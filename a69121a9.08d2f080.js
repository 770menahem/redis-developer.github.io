(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{253:function(e,t,i){"use strict";i.r(t),i.d(t,"frontMatter",(function(){return r})),i.d(t,"metadata",(function(){return o})),i.d(t,"toc",(function(){return l})),i.d(t,"default",(function(){return c}));var n=i(3),s=i(7),a=(i(0),i(338)),r=(i(343),i(344),i(339),i(340),{id:"index-profiler",title:"RedisInsight Profiler Tool - Analyze Your Redis Commands Using Redis Monitor Command",sidebar_label:"RedisInsight Profiler Tool - Analyze Your Redis Commands Using Redis Monitor Command",slug:"/explore/redisinsightv2/profiler",authors:["ajeet"]}),o={unversionedId:"explore/redisinsightv2/profiler/index-profiler",id:"explore/redisinsightv2/profiler/index-profiler",isDocsHomePage:!1,title:"RedisInsight Profiler Tool - Analyze Your Redis Commands Using Redis Monitor Command",description:"alttext",source:"@site/docs/explore/redisinsightv2/profiler/index-profiler.mdx",slug:"/explore/redisinsightv2/profiler",permalink:"/explore/redisinsightv2/profiler",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/explore/redisinsightv2/profiler/index-profiler.mdx",version:"current",lastUpdatedAt:1645203458,sidebar_label:"RedisInsight Profiler Tool - Analyze Your Redis Commands Using Redis Monitor Command",sidebar:"docs",previous:{title:"Visualize Redis Database keys using the RedisInsight Browser Tool",permalink:"/explore/redisinsightv2/browser"},next:{title:"Perform Database Search and Analytics using the RediSearch Plugin in RedisInsight v2.0",permalink:"/explore/redisinsightv2/redisearch"}},l=[{value:"Step 1. Create Redis database with RedisTimeSeries module enabled",id:"step-1-create-redis-database-with-redistimeseries-module-enabled",children:[]},{value:"Step 2. Create database",id:"step-2-create-database",children:[]},{value:"Step 3. Download RedisInsight",id:"step-3-download-redisinsight",children:[]},{value:"Step 4. Connect to Redis Enterprise Cloud Database",id:"step-4-connect-to-redis-enterprise-cloud-database",children:[]},{value:"Step 5. Execute the script",id:"step-5-execute-the-script",children:[]},{value:"Step 6. Running Profiler",id:"step-6-running-profiler",children:[]},{value:"References:",id:"references",children:[]}],d={toc:l};function c(e){var t=e.components,r=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},d,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(958).default,title:"image_tooltip"})),Object(a.b)("p",null,"Last week ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.redis.com/latest/ri/release-notes/v2.0.2/"}),"the maintenance release of RedisInsight Preview 2.0")," (v2.0.4) was introduced by the RedisInsight Team. RedisInsight v2.0 is a complete product rewrite based on a new tech stack composed of ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.electronjs.org/"}),"Electron"),", ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://elastic.github.io/eui/#/"}),"Elastic UI"),", ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://microsoft.github.io/monaco-editor/"}),"Monaco Editor"),", and ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/"}),"Node"),".js. This newer preview build added a dedicated RedisInsight Profiler UI for the first time. The profiler uses the MONITOR command to analyze every command sent to the Redis instance in real time. "),Object(a.b)("p",null,"RedisInsight Profiler analyzes your Redis commands that are being run on the Redis server in real time. The tool provides you detailed information about the number of commands processed, commands/second, and number of connected clients. It also gives information about top prefixes, top keys, and top commands."),Object(a.b)("p",null,"It basically runs the Redis MONITOR command and generates a summarized view. MONITOR is a debugging command that streams back every command processed by the Redis server. It can help in understanding what is happening to the database. This command can both be used via redis-cli and via telnet. All the commands sent to the Redis instance are monitored for the duration of the profiling. The ability to see all the requests processed by the server is useful in order to spot bugs in an application, both when using Redis as a database and as a distributed caching system."),Object(a.b)("p",null,"Follow the below instructions to test drive RedisInsight Profiler tool introduced under the RedisInsight v2.0.4 release:"),Object(a.b)("h3",{id:"step-1-create-redis-database-with-redistimeseries-module-enabled"},"Step 1. Create Redis database with RedisTimeSeries module enabled"),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(959).default,title:"image_tooltip"})),Object(a.b)("p",null,"Visit ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.redis.com/create/rediscloud"}),"https://developer.redis.com/create/rediscloud")," and create a Redis database. ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.redis.com/howtos/redistimeseries"}),"Follow these steps to enable RedisTimeSeries module "),"on Redis Enterprise Cloud."),Object(a.b)("h3",{id:"step-2-create-database"},"Step 2. Create database"),Object(a.b)("p",null,"Click \u201cCreate Database\u201d.  Enter database name and select RedisTimeSeries Module."),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(960).default,title:"image_tooltip"})),Object(a.b)("p",null,"Once the database is created, you will see the endpoint URL that gets generated. Save it for future reference."),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(961).default,title:"image_tooltip"})),Object(a.b)("h3",{id:"step-3-download-redisinsight"},"Step 3. Download RedisInsight"),Object(a.b)("p",null,"To install RedisInsight on your local system, you need to first download the software from the Redis website.**"),Object(a.b)("p",null,Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://redis.com/redis-enterprise/redis-insight/#insight-form"}),"Click this link "),"to access a form that allows you to select the operating system of your choice.**"),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(962).default,title:"image_tooltip"})),Object(a.b)("p",null,"Execute the installer. Once it is installed on your computer, click on the RedisInsight icon to open the tool. "),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(963).default,title:"image_tooltip"})),Object(a.b)("h3",{id:"step-4-connect-to-redis-enterprise-cloud-database"},"Step 4. Connect to Redis Enterprise Cloud Database"),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(964).default,title:"image_tooltip"})),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(965).default,title:"image_tooltip"})),Object(a.b)("p",null,"As the database is empty, you won\u2019t be able to see any key."),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(966).default,title:"image_tooltip"})),Object(a.b)("h3",{id:"step-5-execute-the-script"},"Step 5. Execute the script"),Object(a.b)("p",null,"Below is the script that creates a time series representing sensor temperature measurements. After you create the time series, you can send temperature measurements. Then you can query the data for a time range on some aggregation rule."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{}),"from redistimeseries.client import Client as RedisTimeSeries\nimport time\nimport sys\nimport site\nimport datetime\nimport random\n\nprint(' \\n '.join(sys.path))\nredis = RedisTimeSeries(host='redis-16169.c212.ap-south-1-1.ec2.cloud.redislabs.com', port=16169, password='XXXX')\n\n# redis.flushdb()\nkey = 'temperature'\ndef create(key):\n       print('\\n Create new time series: %s' % str(key))\n       #redis.create(key,retentionSecs=30,labels={'sensor_id' : 2,'area_id' : 32})\n       redis.create(key,retention_msecs=30000,labels={'sensor_id' : 2,'area_id' : 32})\n       print('')\ndef store(key, interval):\n       print(\"\\n Append new value to time series:\\n\")\n       begin_time = int(time.time())\n       for i in range(interval):\n               timestamp = int(time.time())\n               value = round(random.uniform(0.0,100.0),2)\n               timestamp_strftime = datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')\n               sys.stdout.write(' %s : %.2f \\n' % (timestamp_strftime, value))\n               sys.stdout.flush()\n               #redis.add(key,timestamp,value,retentionSecs=30, labels={'sensor_id' : 2,'area_id' : 32})\n               redis.add(key,timestamp,value,retention_msecs=30000, labels={'sensor_id' : 2,'area_id' : 32})\n               time.sleep(1)\n       end_time = int(time.time()-1)\n       return (begin_time, end_time)\ndef query(key, begin_time, end_time):\n       begin_time_datetime = datetime.datetime.fromtimestamp(begin_time).strftime('%Y-%m-%d %H:%M:%S')\n       end_time_datetime = datetime.datetime.fromtimestamp(end_time).strftime('%Y-%m-%d %H:%M:%S')\n       print(\"\\n Query time series in range:\\n\\n %s to %s \\n\" % (begin_time_datetime, end_time_datetime))\n       try:\n               #for record in redis.range(key,begin_time, end_time,bucketSizeSeconds=1):\n               for record in redis.range(key,begin_time, end_time,bucket_size_msec=1000):\n                       timestamp = datetime.datetime.fromtimestamp(record[0]).strftime('%Y-%m-%d %H:%M:%S')\n                       value = round(float(record[1]),2)\n                       print(' %s : %.2f ' % (timestamp,value))\n       except Exception as e:\n               print(\"\\n Error: %s\" % e)\n       print('')\ndef print_info():\n       print('\\n Query time series info:\\n')\n       for key in redis.keys('*'):\n               print(' key=%s' % (key.decode('utf8')))\n               info = redis.info(key)\n               sensor = info.labels['sensor_id']\n               print(\" sensor_id=%s \" % str(sensor))\n               area = info.labels['area_id']\n               print(\" area_id=%s \" % str(area))\n               last_time_stamp_seconds = info.__dict__['lastTimeStamp']\n               last_time_stamp = datetime.datetime.fromtimestamp(last_time_stamp_seconds).strftime('%Y-%m-%d %H:%M:%S')\n               print(\" last_time_stamp=%s \" % str(last_time_stamp))\n\n       print('')\n\ndef print_loop(loops):\n\n        for i in range(loops):\n\n                if i == 0:\n                        sys.stdout.write(' ')\n\n                sys.stdout.write('.')\n                sys.stdout.flush()\n                time.sleep(1)\n\n        print('')\n\ncreate(key)\ninterval = 10\nbegin_time, end_time = store(key,interval)\ntime.sleep(1) \nquery(key,begin_time,end_time)\nquery(key,begin_time+4,end_time-5)\nprint_info()\nprint('\\n Set expire key: %s' % str(key))\nredis.expire(key, (30))\nloops = 30\nprint_loop(loops)\nquery(key,begin_time,end_time)\ntime.sleep(1)\ninterval = 1\ncreate(key)\nbegin_time, end_time = store(key,interval)\ntime.sleep(1)\nquery(key,begin_time,end_time)\ntime.sleep(1)\nprint('\\n Delete key: %s' % str(key))\nredis.delete(key)\ntime.sleep(1)\n\nquery(key,begin_time,end_time)\n\nprint('')\n\n")),Object(a.b)("p",null,"Results:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{}),"Create new time series: temperature\n\n\n Append new value to time series:\n\n 2022-02-13 17:52:16 : 36.50 \n 2022-02-13 17:52:17 : 84.56 \n 2022-02-13 17:52:18 : 25.90 \n 2022-02-13 17:52:19 : 29.24 \n 2022-02-13 17:52:20 : 35.75 \n 2022-02-13 17:52:21 : 78.14 \n 2022-02-13 17:52:22 : 28.77 \n 2022-02-13 17:52:23 : 26.37 \n 2022-02-13 17:52:24 : 74.93 \n 2022-02-13 17:52:25 : 46.61 \n\n Query time series in range:\n\n 2022-02-13 17:52:16 to 2022-02-13 17:52:25 \n\n 2022-02-13 17:52:16 : 36.50 \n 2022-02-13 17:52:17 : 84.56 \n 2022-02-13 17:52:18 : 25.90 \n 2022-02-13 17:52:19 : 29.24 \n 2022-02-13 17:52:20 : 35.75 \n 2022-02-13 17:52:21 : 78.14 \n 2022-02-13 17:52:22 : 28.77 \n 2022-02-13 17:52:23 : 26.37 \n 2022-02-13 17:52:24 : 74.93 \n 2022-02-13 17:52:25 : 46.61 \n\n\n Query time series in range:\n\n 2022-02-13 17:52:20 to 2022-02-13 17:52:20 \n\n 2022-02-13 17:52:20 : 35.75 \n\n\n")),Object(a.b)("h3",{id:"step-6-running-profiler"},"Step 6. Running Profiler"),Object(a.b)("p",null,"The new RedisInsight Browser tool allows you to explore keys in your Redis server. You can add, edit, and delete a key. It also helps you to browse, filter, and visualize key-value Redis data structures. "),Object(a.b)("p",null,"Open Browser tool and select TS from the drop-down menu as shown below: "),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(967).default,title:"image_tooltip"})),Object(a.b)("p",null,"It will display temperature as a key. Choose the \u201cProfiler\u201d option and click on \u201cStart Profiler.\u201d"),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(968).default,title:"image_tooltip"})),Object(a.b)("p",null,"Soon you will be able to see the detailed information about the number of commands processed, commands/second, and number of connected clients. It also gives information about top prefixes, top keys, and top commands."),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt_text",src:i(969).default,title:"image_tooltip"})),Object(a.b)("h3",{id:"references"},"References:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"https://redis.com/redis-enterprise/redis-insight/"}),"RedisInsight: The Best Redis GUI")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"/explore/redisinsight/slowlog"}),"Slowlog Configuration using RedisInsight")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"/explore/redisinsight/browser"}),"Explore Redis keys using RedisInsight browser tool")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"/explore/redisinsight/memoryanalyzer"}),"Memory Analysis using RedisInsight"))))}c.isMDXComponent=!0},340:function(e,t,i){"use strict";var n=i(0),s=i.n(n),a=i(338),r=i(345);i(339),i(59);t.a=function(e){var t=s.a.useState(!1),i=t[0],n=t[1];return s.a.createElement("div",{className:"ri-container"},s.a.createElement("div",{className:"ri-description-short"},s.a.createElement("div",{className:"ri-icon"},s.a.createElement("span",{className:"fe fe-zap"})),s.a.createElement("div",{className:"ri-detail"},s.a.createElement("div",{className:"ri-title"},s.a.createElement("a",{href:e.page},e.title)),s.a.createElement("div",{className:"ri-description"},e.description,s.a.Children.count(e.children)>0&&s.a.createElement("span",{className:"ri-more fe fe-more-horizontal",onClick:function(){return n(!i)}})))),i&&s.a.createElement("div",{className:"ri-description-long"},s.a.createElement(a.a,{components:r.a},e.children)))}},341:function(e,t,i){"use strict";var n=i(0),s=i(342);t.a=function(){var e=Object(n.useContext)(s.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},342:function(e,t,i){"use strict";var n=i(0),s=Object(n.createContext)(void 0);t.a=s},343:function(e,t,i){"use strict";var n=i(0),s=i.n(n),a=i(341),r=i(346),o=i(60),l=i.n(o),d=37,c=39;t.a=function(e){var t=e.lazy,i=e.block,o=e.defaultValue,m=e.values,p=e.groupId,u=e.className,b=Object(a.a)(),f=b.tabGroupChoices,h=b.setTabGroupChoices,g=Object(n.useState)(o),_=g[0],y=g[1],O=n.Children.toArray(e.children);if(null!=p){var j=f[p];null!=j&&j!==_&&m.some((function(e){return e.value===j}))&&y(j)}var v=function(e){y(e),null!=p&&h(p,e)},w=[];return s.a.createElement("div",null,s.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":i},u)},m.map((function(e){var t=e.value,i=e.label;return s.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":_===t,className:Object(r.a)("tabs__item",l.a.tabItem,{"tabs__item--active":_===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,i){switch(i.keyCode){case c:!function(e,t){var i=e.indexOf(t)+1;e[i]?e[i].focus():e[0].focus()}(e,t);break;case d:!function(e,t){var i=e.indexOf(t)-1;e[i]?e[i].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return v(t)},onClick:function(){v(t)}},i)}))),t?Object(n.cloneElement)(O.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):s.a.createElement("div",{className:"margin-vert--md"},O.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}},344:function(e,t,i){"use strict";var n=i(3),s=i(0),a=i.n(s);t.a=function(e){var t=e.children,i=e.hidden,s=e.className;return a.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:i,className:s}),t)}},958:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_1-cba8f19d77d9433fea724f31d514bfad.png"},959:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_2-fc14bfe0db210d49b436fe2e521cc4c5.png"},960:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_3-83facbf6b328934caa47054894963118.png"},961:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_4-396f36639b7eed3ec101a7ac93b38253.png"},962:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_5-3803016ae853d22691721c2d13ae7f4d.png"},963:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_6-13ae031bfc1016d23f5be3c6e1d689c6.png"},964:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_7-4ec48d172a2a6657a6879e89310015b6.png"},965:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_8-4254d54bf202a245d8ce6f17617e59cb.png"},966:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_9-fe1ac9389ea829c56e67ba392af6339b.png"},967:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_10-a0add99e5f195e24beae94a05b77810a.png"},968:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_11-cf92e57595d5c574bfef23fee33976db.png"},969:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/profiler_12-4e34fa51e8599a0bf93fead82fa8c7a3.png"}}]);