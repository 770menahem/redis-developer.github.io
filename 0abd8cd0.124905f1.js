(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{312:function(e,t,n){"use strict";var a=n(0),i=n.n(a),o=n(310),r=n(317);n(311),n(59);t.a=function(e){var t=i.a.useState(!1),n=t[0],a=t[1];return i.a.createElement("div",{className:"ri-container"},i.a.createElement("div",{className:"ri-description-short"},i.a.createElement("div",{className:"ri-icon"},i.a.createElement("span",{className:"fe fe-zap"})),i.a.createElement("div",{className:"ri-detail"},i.a.createElement("div",{className:"ri-title"},i.a.createElement("a",{href:e.page},e.title)),i.a.createElement("div",{className:"ri-description"},e.description,i.a.Children.count(e.children)>0&&i.a.createElement("span",{className:"ri-more fe fe-more-horizontal",onClick:function(){return a(!n)}})))),n&&i.a.createElement("div",{className:"ri-description-long"},i.a.createElement(o.a,{components:r.a},e.children)))}},313:function(e,t,n){"use strict";var a=n(0),i=n(314);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},314:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i},315:function(e,t,n){"use strict";var a=n(0),i=n.n(a),o=n(313),r=n(318),s=n(60),l=n.n(s),d=37,c=39;t.a=function(e){var t=e.lazy,n=e.block,s=e.defaultValue,m=e.values,b=e.groupId,p=e.className,u=Object(o.a)(),h=u.tabGroupChoices,O=u.setTabGroupChoices,j=Object(a.useState)(s),g=j[0],f=j[1],y=a.Children.toArray(e.children);if(null!=b){var w=h[b];null!=w&&w!==g&&m.some((function(e){return e.value===w}))&&f(w)}var v=function(e){f(e),null!=b&&O(b,e)},N=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n},p)},m.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(r.a)("tabs__item",l.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case c:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case d:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(N,e.target,e)},onFocus:function(){return v(t)},onClick:function(){v(t)}},n)}))),t?Object(a.cloneElement)(y.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},316:function(e,t,n){"use strict";var a=n(3),i=n(0),o=n.n(i);t.a=function(e){var t=e.children,n=e.hidden,i=e.className;return o.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:i}),t)}},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n(3),i=n(7),o=(n(0),n(310)),r=(n(315),n(316),n(311),n(312),{id:"index-redis-om",title:"Getting Started With Redis OM for Python",sidebar_label:"Redis OM for Python",slug:"/develop/python/redis-om",authors:["andrew"]}),s={unversionedId:"develop/python/redis-om/index-redis-om",id:"develop/python/redis-om/index-redis-om",isDocsHomePage:!1,title:"Getting Started With Redis OM for Python",description:"Redis OM for Python makes it easy to model and query data in Redis using",source:"@site/docs/develop/python/redis-om/index-redis-om.mdx",slug:"/develop/python/redis-om",permalink:"/develop/python/redis-om",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/python/redis-om/index-redis-om.mdx",version:"current",sidebar_label:"Redis OM for Python"},l=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Python",id:"python",children:[]},{value:"Redis",id:"redis",children:[{value:"Downloading Redis",id:"downloading-redis",children:[]},{value:"Installing Redis On Windows",id:"installing-redis-on-windows",children:[]},{value:"Using Redis With Docker",id:"using-redis-with-docker",children:[]}]},{value:"Recommended: RediSearch and RedisJSON",id:"recommended-redisearch-and-redisjson",children:[]},{value:"Starting Redis",id:"starting-redis",children:[{value:"Ubuntu Linux (Including WSL)",id:"ubuntu-linux-including-wsl",children:[]},{value:"macOS with Homebrew",id:"macos-with-homebrew",children:[]},{value:"Docker",id:"docker",children:[]}]},{value:"Installing Redis OM",id:"installing-redis-om",children:[]},{value:"Setting the Redis URL Environment Variable",id:"setting-the-redis-url-environment-variable",children:[]},{value:"Defining a Model",id:"defining-a-model",children:[{value:"The HashModel Class",id:"the-hashmodel-class",children:[]},{value:"Type Annotations",id:"type-annotations",children:[]}]},{value:"Creating Models",id:"creating-models",children:[{value:"Optional Fields",id:"optional-fields",children:[]},{value:"Default Values",id:"default-values",children:[]},{value:"Automatic Primary Keys",id:"automatic-primary-keys",children:[]}]},{value:"Validating Data",id:"validating-data",children:[{value:"Models Coerce Values By Default",id:"models-coerce-values-by-default",children:[]},{value:"Strict Validation",id:"strict-validation",children:[]}]},{value:"Saving Models",id:"saving-models",children:[]},{value:"Examining Your Data In Redis",id:"examining-your-data-in-redis",children:[]},{value:"Getting a Model",id:"getting-a-model",children:[]},{value:"Querying for Models With Expressions",id:"querying-for-models-with-expressions",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],d={toc:l};function c(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/redis/redis-om-python"}),"Redis OM for Python")," makes it easy to model and query data in Redis using\ndeclarative models that will feel right at home to users of Peewee, SQLAlchemy,\nand the Django ORM."),Object(o.b)("p",null,"This tutorial will walk you through installing Redis OM for Python, creating\nyour first model, and using it to save and validate data."),Object(o.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.b)("p",null,"Redis OM requires Python version 3.9 or above and a Redis instance to connect\nto."),Object(o.b)("h2",{id:"python"},"Python"),Object(o.b)("p",null,"Make sure you are running ",Object(o.b)("strong",{parentName:"p"},"Python version 3.9 or higher"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"python --version\nPython 3.9.0\n")),Object(o.b)("p",null,"If you don't have Python installed, you can download it from\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.python.org/downloads/"}),"Python.org"),", use\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pyenv/pyenv"}),"Pyenv"),", or install Python with your operating\nsystem's package manager."),Object(o.b)("h2",{id:"redis"},"Redis"),Object(o.b)("p",null,"Redis OM saves data in Redis, so you will need Redis installed and running to\ncomplete this tutorial."),Object(o.b)("h3",{id:"downloading-redis"},"Downloading Redis"),Object(o.b)("p",null,"The latest version of Redis is available from ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redis.io/"}),"Redis.io"),". You\ncan also install Redis with your operating system's package manager."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE:")," This tutorial will guide you through starting Redis locally, but the\ninstructions will also work if Redis is running on a remote server."),Object(o.b)("h3",{id:"installing-redis-on-windows"},"Installing Redis On Windows"),Object(o.b)("p",null,"Redis doesn't run directly on Windows, but you can use Windows Subsystem for\nLinux (WSL) to run Redis. See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://youtu.be/_nFwPTHOMIY"}),"our video on\nYouTube")," for a walk-through."),Object(o.b)("p",null,"Windows users can also use Docker. See the next section on running Redis with\nDocker for more information."),Object(o.b)("h3",{id:"using-redis-with-docker"},"Using Redis With Docker"),Object(o.b)("p",null,"Instead of installing Redis manually or with a package manager, you can run\nRedis with Docker."),Object(o.b)("p",null,"We recommend the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.docker.com/r/redislabs/redismod"}),"redismod")," image\nbecause it includes Redis modules that Redis OM can use to give you extra\nfeatures. Later sections of this guide will provide more detail about these\nfeatures."),Object(o.b)("p",null,"You can also use the official Redis Docker image, which is hosted on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.docker.com/_/redis"}),"Docker\nHub"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE"),": We'll talk about how to actually start Redis with Docker when we\ndiscuss ",Object(o.b)("em",{parentName:"p"},"running")," Redis later in this guide."),Object(o.b)("h2",{id:"recommended-redisearch-and-redisjson"},"Recommended: RediSearch and RedisJSON"),Object(o.b)("p",null,"Redis OM relies on the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://oss.redis.com/redisearch/"}),"RediSearch")," and\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://oss.redis.com/redisjson/"}),"RedisJSON")," Redis modules to support rich queries and embedded\nmodels."),Object(o.b)("p",null,"You don't need these Redis modules to use Redis OM's data modeling, validation,\nand persistence features, but we recommend them to get the most out of Redis OM."),Object(o.b)("p",null,"The easiest way to run these Redis modules during local development is to use\nthe ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.docker.com/r/redislabs/redismod"}),"redismod")," Docker image."),Object(o.b)("p",null,'For other installation methods, follow the "Quick Start" guides on both modules\'\nhome pages.'),Object(o.b)("h2",{id:"starting-redis"},"Starting Redis"),Object(o.b)("p",null,"Before you get started with Redis OM, make sure you start Redis."),Object(o.b)("p",null,"The command to start Redis will depend on how you installed it."),Object(o.b)("h3",{id:"ubuntu-linux-including-wsl"},"Ubuntu Linux (Including WSL)"),Object(o.b)("p",null,"If you installed Redis using ",Object(o.b)("inlineCode",{parentName:"p"},"apt"),", start it with the ",Object(o.b)("inlineCode",{parentName:"p"},"systemctl")," command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ sudo systemctl restart redis.service\n")),Object(o.b)("p",null,"Otherwise, you can start the server manually:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ redis-server start\n")),Object(o.b)("h3",{id:"macos-with-homebrew"},"macOS with Homebrew"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ brew services start redis\n")),Object(o.b)("h3",{id:"docker"},"Docker"),Object(o.b)("p",null,"The command to start Redis with Docker depends on the image you've chosen to\nuse."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TIP:")," The ",Object(o.b)("inlineCode",{parentName:"p"},"-d")," option in these examples runs Redis in the background, while\n",Object(o.b)("inlineCode",{parentName:"p"},"-p 6379:6379")," makes Redis reachable at port 6379 on your localhost."),Object(o.b)("h4",{id:"docker-with-the-redismod-image-recommended"},"Docker with the ",Object(o.b)("inlineCode",{parentName:"h4"},"redismod")," image (recommended)"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ docker run -d -p 6379:6379 redislabs/redismod\n")),Object(o.b)("h4",{id:"docker-with-the-redis-image"},"Docker with the ",Object(o.b)("inlineCode",{parentName:"h4"},"redis")," image"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ docker run -d -p 6379:6379 redis\n")),Object(o.b)("h2",{id:"installing-redis-om"},"Installing Redis OM"),Object(o.b)("p",null,"The recommended way to install Redis OM is with\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://python-poetry.org/docs/"}),"Poetry"),". You can install Redis OM using Poetry\nwith the following command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ poetry install redis-om\n")),Object(o.b)("p",null,"If you're using Pipenv, the command is:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ pipenv install redis-om\n")),Object(o.b)("p",null,"Finally, you can install Redis OM with ",Object(o.b)("inlineCode",{parentName:"p"},"pip")," by running the following command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ pip install redis-om\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TIP:")," If you aren't using Poetry or Pipenv and are instead installing\ndirectly with ",Object(o.b)("inlineCode",{parentName:"p"},"pip"),", we recommend that you install Redis OM in a virtual\nenvironment (AKA, a virtualenv). If you aren't familiar with this concept, see\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://realpython.com/lessons/creating-virtual-environment/"}),"Dan Bader's video and transcript"),"."),Object(o.b)("h2",{id:"setting-the-redis-url-environment-variable"},"Setting the Redis URL Environment Variable"),Object(o.b)("p",null,"We're almost ready to create a Redis OM model! But first, we need to make sure\nthat Redis OM knows how to connect to Redis."),Object(o.b)("p",null,"By default, Redis OM tries to connect to Redis on your localhost at port 6379.\nMost local install methods will result in Redis running at this location, in\nwhich case you don't need to do anything special."),Object(o.b)("p",null,"However, if you configured Redis to run on a different port, or if you're using\na remote Redis server, you'll need to set the ",Object(o.b)("inlineCode",{parentName:"p"},"REDIS_OM_URL")," environment\nvariable."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"REDIS_OM_URL")," environment variable follows the redis-py URL format:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"redis://[[username]:[password]]@localhost:6379/[database number]\n")),Object(o.b)("p",null,"The default connection is equivalent to the following ",Object(o.b)("inlineCode",{parentName:"p"},"REDIS_OM_URL")," environment\nvariable:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"redis://@localhost:6379\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TIP:")," Redis databases are numbered, and the default is 0. You can leave off\nthe database number to use the default database."),Object(o.b)("p",null,'Other supported prefixes include "rediss" for SSL connections and "unix" for\nUnix domain sockets:'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"rediss://[[username]:[password]]@localhost:6379/0\nunix://[[username]:[password]]@/path/to/socket.sock?db=0\n")),Object(o.b)("h2",{id:"defining-a-model"},"Defining a Model"),Object(o.b)("p",null,"In this tutorial, we'll create a ",Object(o.b)("inlineCode",{parentName:"p"},"Customer")," model that validates and saves data.\nLet's start with a basic definition of the model. We'll add features as we go\nalong."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import datetime\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: str\n")),Object(o.b)("p",null,"There are a few details to note:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Our ",Object(o.b)("inlineCode",{parentName:"li"},"Customer")," model extends the ",Object(o.b)("inlineCode",{parentName:"li"},"HashModel")," class. This means that it will\nbe saved to Redis as a hash. The other model class that Redis OM provides is\n",Object(o.b)("inlineCode",{parentName:"li"},"JsonModel"),", which we'll discuss later."),Object(o.b)("li",{parentName:"ol"},"We've specified the model's fields using Python type annotations.")),Object(o.b)("p",null,"Let's dig into the ",Object(o.b)("inlineCode",{parentName:"p"},"HashModel")," class and type annotations a bit more."),Object(o.b)("h3",{id:"the-hashmodel-class"},"The HashModel Class"),Object(o.b)("p",null,"When you subclass ",Object(o.b)("inlineCode",{parentName:"p"},"HashModel"),", your subclass is both a Redis OM model, with\nmethods for saving data to Redis, ",Object(o.b)("em",{parentName:"p"},"and")," a Pydantic model."),Object(o.b)("p",null,"This means that you can use Pydantic field validations with your Redis OM\nmodels, which we'll cover later, when we talk about validation. But this also\nmeans you can use Redis OM models anywhere you would use a Pydantic model, like\nin your FastAPI applications. \ud83e\udd2f"),Object(o.b)("h3",{id:"type-annotations"},"Type Annotations"),Object(o.b)("p",null,"The type annotations you add to your model fields are used for a few purposes:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Validating data with Pydantic validators"),Object(o.b)("li",{parentName:"ul"},"Serializing data Redis"),Object(o.b)("li",{parentName:"ul"},"Deserializing data from Redis")),Object(o.b)("p",null,"We'll see examples of these throughout the course of this tutorial."),Object(o.b)("p",null,"An important detail about the ",Object(o.b)("inlineCode",{parentName:"p"},"HashModel")," class is that it does not support\n",Object(o.b)("inlineCode",{parentName:"p"},"list"),", ",Object(o.b)("inlineCode",{parentName:"p"},"set"),", or mapping (like ",Object(o.b)("inlineCode",{parentName:"p"},"dict"),") types. This is because Redis hashes\ncannot contain lists, sets, or other hashes."),Object(o.b)("p",null,"If you want to model fields with a list, set, or mapping type, or another model,\nyou'll need to use the ",Object(o.b)("inlineCode",{parentName:"p"},"JsonModel")," class, which can support these types, as well\nas embedded models."),Object(o.b)("h2",{id:"creating-models"},"Creating Models"),Object(o.b)("p",null,"Let's see what creating a model object looks like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: str\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="andrew.brookins@example.com",\n    join_date=datetime.date.today(),\n    age=38,\n    bio="Python developer, works at Redis, Inc."\n)\n')),Object(o.b)("h3",{id:"optional-fields"},"Optional Fields"),Object(o.b)("p",null,"What would happen if we left out one of these fields, like ",Object(o.b)("inlineCode",{parentName:"p"},"bio"),"?"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\n\nfrom redis_om import HashModel\nfrom pydantic import ValidationError\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: str\n\n\n# All fields are required because none of the fields\n# are marked `Optional`, so we get a validation error:\ntry:\n    Customer(\n        first_name="Andrew",\n        last_name="Brookins",\n        email="andrew.brookins@example.com",\n        join_date=datetime.date.today(),\n        age=38  # <- We didn\'t pass in a bio!\n    )\nexcept ValidationError as e:\n    print(e)\n    """\n    ValidationError: 1 validation error for Customer\n    bio\n      field required (type=value_error.missing)\n    """\n')),Object(o.b)("p",null,"If we want the ",Object(o.b)("inlineCode",{parentName:"p"},"bio")," field to be optional, we need to change the type annotation\nto use ",Object(o.b)("inlineCode",{parentName:"p"},"Optional"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str]  # <- Now, bio is an Optional[str]\n")),Object(o.b)("p",null,"Now we can create ",Object(o.b)("inlineCode",{parentName:"p"},"Customer")," objects with or without the ",Object(o.b)("inlineCode",{parentName:"p"},"bio")," field."),Object(o.b)("h3",{id:"default-values"},"Default Values"),Object(o.b)("p",null,"Fields can have default values. You set them by assigning a value to a field."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str] = "Super dope"  # <- We added a default here\n')),Object(o.b)("p",null,"Now, if we create a ",Object(o.b)("inlineCode",{parentName:"p"},"Customer")," object without a ",Object(o.b)("inlineCode",{parentName:"p"},"bio")," field, it will use the\ndefault value."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str] = "Super dope"\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="andrew.brookins@example.com",\n    join_date=datetime.date.today(),\n    age=38)  # <- Notice, we didn\'t give a bio!\n\nprint(andrew.bio)  # <- So we got the default value.\n# > \'Super Dope\'\n')),Object(o.b)("p",null,"The model will then save this default value to Redis the next time you call\n",Object(o.b)("inlineCode",{parentName:"p"},"save()"),"."),Object(o.b)("h3",{id:"automatic-primary-keys"},"Automatic Primary Keys"),Object(o.b)("p",null,"Models generate a globally unique primary key automatically without needing to talk to Redis."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str] = "Super dope"\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="andrew.brookins@example.com",\n    join_date=datetime.date.today(),\n    age=38)\n\nprint(andrew.pk)\n# > \'01FJM6PH661HCNNRC884H6K30C\'\n')),Object(o.b)("p",null,"The ID is available ",Object(o.b)("em",{parentName:"p"},"before")," you save the model."),Object(o.b)("p",null,"The default ID generation function creates\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ulid/spec"}),"ULIDs"),", though you can change the function that\ngenerates the primary key for models if you'd like to use a different kind of\nprimary key."),Object(o.b)("h2",{id:"validating-data"},"Validating Data"),Object(o.b)("p",null,"Redis OM uses ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/samuelcolvin/pydantic"}),"Pydantic")," to validate data based on the type\nannotations you assign to fields in a model class."),Object(o.b)("p",null,"This validation ensures that fields like ",Object(o.b)("inlineCode",{parentName:"p"},"first_name"),", which the ",Object(o.b)("inlineCode",{parentName:"p"},"Customer"),"\nmodel marked as a ",Object(o.b)("inlineCode",{parentName:"p"},"str"),", are always strings. ",Object(o.b)("strong",{parentName:"p"},"But every Redis OM model is also\na Pydantic model"),", so you can use Pydantic validators like ",Object(o.b)("inlineCode",{parentName:"p"},"EmailStr"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"Pattern"),", and many more for complex validations!"),Object(o.b)("p",null,"For example, we defined the ",Object(o.b)("inlineCode",{parentName:"p"},"join_date")," for our ",Object(o.b)("inlineCode",{parentName:"p"},"Customer")," model earlier as a\n",Object(o.b)("inlineCode",{parentName:"p"},"datetime.date"),". So, if we try to create a model with a ",Object(o.b)("inlineCode",{parentName:"p"},"join_date")," that isn't a\ndate, we'll get a validation error."),Object(o.b)("p",null,"Let's try it now:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\nfrom pydantic import ValidationError\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str] = "Super dope"\n\n\ntry:\n    Customer(\n        first_name="Andrew",\n        last_name="Brookins",\n        email="a@example.com",\n        join_date="not a date!",  # <- The problem line!\n        age=38\n    )\nexcept ValidationError as e:\n    print(e)\n    """\n    pydantic.error_wrappers.ValidationError: 1 validation error for Customer\n    join_date\n      invalid date format (type=value_error.date)\n    """\n')),Object(o.b)("h3",{id:"models-coerce-values-by-default"},"Models Coerce Values By Default"),Object(o.b)("p",null,'You might wonder what qualifies as a "date" in our last validation example. By\ndefault, Redis OM will try to coerce input values to the correct type. That\nmeans we can pass a date string for ',Object(o.b)("inlineCode",{parentName:"p"},"join_date")," instead of a ",Object(o.b)("inlineCode",{parentName:"p"},"date")," object:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="a@example.com",\n    join_date="2020-01-02",  # <- We\'re passing a YYYY-MM-DD date string now\n    age=38\n)\n\nprint(andrew.join_date)\n# > 2021-11-02\ntype(andrew.join_date)\n# > datetime.date  # The model parsed the string automatically!\n')),Object(o.b)("p",null,"This ability to combine parsing (in this case, a YYYY-MM-DD date string) with\nvalidation can save you a lot of work."),Object(o.b)("p",null,"However, you can turn off coercion -- check the next section on using strict\nvalidation."),Object(o.b)("h3",{id:"strict-validation"},"Strict Validation"),Object(o.b)("p",null,"You can turn on strict validation to reject values for a field unless they match\nthe exact type of the model's type annotations."),Object(o.b)("p",null,"You do this by changing a field's type annotation to use one of the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pydantic-docs.helpmanual.io/usage/types/#strict-types"}),'"strict"\ntypes provided by\nPydantic'),"."),Object(o.b)("p",null,"Redis OM supports all of Pydantic's strict types: ",Object(o.b)("inlineCode",{parentName:"p"},"StrictStr"),", ",Object(o.b)("inlineCode",{parentName:"p"},"StrictBytes"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"StrictInt"),", ",Object(o.b)("inlineCode",{parentName:"p"},"StrictFloat"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"StrictBool"),"."),Object(o.b)("p",null,"If we wanted to make sure that the ",Object(o.b)("inlineCode",{parentName:"p"},"age")," field only accepts integers and doesn't\ntry to parse a string containing an integer, like \"1\", we'd use the ",Object(o.b)("inlineCode",{parentName:"p"},"StrictInt"),"\nclass."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom pydantic import StrictInt, ValidationError\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: StrictInt  # <- Instead of int, we use StrictInt\n    bio: Optional[str]\n\n\n# Now if we use a string instead of an integer for `age`,\n# we get a validation error:\ntry:\n    Customer(\n        first_name="Andrew",\n        last_name="Brookins",\n        email="a@example.com",\n        join_date="2020-01-02",  # <- A date as a string shouldn\'t work now!\n        age="38"\n    )\nexcept ValidationError as e:\n    print(e)\n    """\n    pydantic.error_wrappers.ValidationError: 1 validation error for Customer\n    join_date\n      Value must be a datetime.date object (type=value_error)\n    """\n')),Object(o.b)("p",null,"Pydantic doesn't include a ",Object(o.b)("inlineCode",{parentName:"p"},"StrictDate")," class, but we can create our own. In\nthis example, we create a ",Object(o.b)("inlineCode",{parentName:"p"},"StrictDate")," type that we'll use to validate that\n",Object(o.b)("inlineCode",{parentName:"p"},"join_date")," is a ",Object(o.b)("inlineCode",{parentName:"p"},"datetime.date")," object."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom pydantic import ValidationError\nfrom redis_om import HashModel\n\n\nclass StrictDate(datetime.date):\n    @classmethod\n    def __get_validators__(cls) -> \'CallableGenerator\':\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, value: datetime.date, **kwargs) -> datetime.date:\n        if not isinstance(value, datetime.date):\n            raise ValueError("Value must be a datetime.date object")\n        return value\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: StrictDate\n    age: int\n    bio: Optional[str]\n\n\n# Now if we use a string instead of a date object for `join_date`,\n# we get a validation error:\ntry:\n    Customer(\n        first_name="Andrew",\n        last_name="Brookins",\n        email="a@example.com",\n        join_date="2020-01-02",  # <- A string shouldn\'t work now!\n        age="38"\n    )\nexcept ValidationError as e:\n    print(e)\n    """\n    pydantic.error_wrappers.ValidationError: 1 validation error for Customer\n    join_date\n      Value must be a datetime.date object (type=value_error)\n    """\n')),Object(o.b)("h2",{id:"saving-models"},"Saving Models"),Object(o.b)("p",null,"We can save the model to Redis by calling ",Object(o.b)("inlineCode",{parentName:"p"},"save()"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="andrew.brookins@example.com",\n    join_date=datetime.date.today(),\n    age=38)\n\nandrew.save()\n')),Object(o.b)("h2",{id:"examining-your-data-in-redis"},"Examining Your Data In Redis"),Object(o.b)("p",null,"You can view the data stored in Redis for any Redis OM model."),Object(o.b)("p",null,"First, get the key of a model instance you want to inspect. The ",Object(o.b)("inlineCode",{parentName:"p"},"key()")," method\nwill give you the exact Redis key used to store the model."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE:")," The naming of this method may be confusing. This is not the primary\nkey, but is instead the Redis key for this model. For this reason, the method\nname may change."),Object(o.b)("p",null,"In this example, we're looking at the key created for the ",Object(o.b)("inlineCode",{parentName:"p"},"Customer")," model we've\nbeen building:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str] = "Super dope"\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="andrew.brookins@example.com",\n    join_date=datetime.date.today(),\n    age=38)\n\nandrew.save()\nandrew.key()\n# > \'mymodel.Customer:01FKGX1DFEV9Z2XKF59WQ6DC9T\'\n')),Object(o.b)("p",null,"With the model's Redis key, you can start ",Object(o.b)("inlineCode",{parentName:"p"},"redis-cli")," and inspect the data\nstored under that key. Here, we run ",Object(o.b)("inlineCode",{parentName:"p"},"JSON.GET")," command with ",Object(o.b)("inlineCode",{parentName:"p"},"redis-cli"),' using\nthe running "redis" container that this project\'s Docker Compose file defines:'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'$ docker-compose exec -T redis redis-cli HGETALL mymodel.Customer:01FKGX1DFEV9Z2XKF59WQ6DC9r\n\n 1) "pk"\n 2) "01FKGX1DFEV9Z2XKF59WQ6DC9T"\n 3) "first_name"\n 4) "Andrew"\n 5) "last_name"\n 6) "Brookins"\n 7) "email"\n 8) "andrew.brookins@example.com"\n 9) "join_date"\n10) "2021-11-02"\n11) "age"\n12) "38"\n13) "bio"\n14) "Super dope"\n')),Object(o.b)("h2",{id:"getting-a-model"},"Getting a Model"),Object(o.b)("p",null,"If you have the primary key of a model, you can call the ",Object(o.b)("inlineCode",{parentName:"p"},"get()")," method on the\nmodel class to get the model's data."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom redis_om import HashModel\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str\n    email: str\n    join_date: datetime.date\n    age: int\n    bio: Optional[str] = "Super dope"\n\n\nandrew = Customer(\n    first_name="Andrew",\n    last_name="Brookins",\n    email="andrew.brookins@example.com",\n    join_date=datetime.date.today(),\n    age=38)\n\nandrew.save()\n\nassert Customer.get(andrew.pk) == andrew\n')),Object(o.b)("h2",{id:"querying-for-models-with-expressions"},"Querying for Models With Expressions"),Object(o.b)("p",null,"Redis OM comes with a rich query language that allows you to query Redis with\nPython expressions."),Object(o.b)("p",null,"To show how this works, we'll make a small change to the ",Object(o.b)("inlineCode",{parentName:"p"},"Customer")," model we\ndefined earlier. We'll add ",Object(o.b)("inlineCode",{parentName:"p"},"Field(index=True)")," to tell Redis OM that we want to\nindex the ",Object(o.b)("inlineCode",{parentName:"p"},"last_name")," and ",Object(o.b)("inlineCode",{parentName:"p"},"age")," fields:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import datetime\nfrom typing import Optional\n\nfrom pydantic import EmailStr\n\nfrom redis_om import (\n    Field,\n    get_redis_connection,\n    HashModel,\n    Migrator\n)\n\n\nclass Customer(HashModel):\n    first_name: str\n    last_name: str = Field(index=True)\n    email: EmailStr\n    join_date: datetime.date\n    age: int = Field(index=True)\n    bio: Optional[str]\n\n\n# Now, if we use this model with a Redis deployment that has the\n# RediSearch module installed, we can run queries like the following.\n\n# Before running queries, we need to run migrations to set up the\n# indexes that Redis OM will use. You can also use the `migrate`\n# CLI tool for this!\nredis = get_redis_connection()\nMigrator(redis).run()\n\n\n# Find all customers with the last name "Brookins"\nCustomer.find(Customer.last_name == "Brookins").all()\n\n# Find all customers that do NOT have the last name "Brookins"\nCustomer.find(Customer.last_name != "Brookins").all()\n\n# Find all customers whose last name is "Brookins" OR whose age is\n# 100 AND whose last name is "Smith"\nCustomer.find((Customer.last_name == "Brookins") | (\n        Customer.age == 100\n) & (Customer.last_name == "Smith")).all()\n')),Object(o.b)("h2",{id:"next-steps"},"Next Steps"),Object(o.b)("p",null,"Now that you know the basics of working with Redis OM, start playing around with\nit in your project!"),Object(o.b)("p",null,"If you're a FastAPI user, check out ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/redis/redis-om-python/blob/main/docs/fastapi_integration.md"}),"how to integrate Redis OM with FastAPI"),"."))}c.isMDXComponent=!0}}]);