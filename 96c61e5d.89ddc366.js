(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{227:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var r=t(3),o=t(7),a=(t(0),t(319)),i={id:"geo-filters",title:"Geo Filters",sidebar_label:"Geo Filters",slug:"/develop/dotnet/redis-om-dotnet/searching/geo-filters"},s={unversionedId:"develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filters",id:"develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filters",isDocsHomePage:!1,title:"Geo Filters",description:"A really nifty bit of indexing you can do with Redis OM is geo-indexing. To GeoIndex, all you need to do is to mark a GeoLoc field in your model as Indexed and create the index",source:"@site/docs/develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filter.md",slug:"/develop/dotnet/redis-om-dotnet/searching/geo-filters",permalink:"/develop/dotnet/redis-om-dotnet/searching/geo-filters",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filter.md",version:"current",lastUpdatedAt:1635532485,sidebar_label:"Geo Filters",sidebar:"docs",previous:{title:"Numeric Queries",permalink:"/develop/dotnet/redis-om-dotnet/searching/numeric-queries"},next:{title:"Aggregations Intro",permalink:"/develop/dotnet/redis-om-dotnet/aggregations"}},c=[{value:"Querying Based off Location",id:"querying-based-off-location",children:[]}],d={toc:c};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A really nifty bit of indexing you can do with Redis OM is geo-indexing. To GeoIndex, all you need to do is to mark a ",Object(a.b)("inlineCode",{parentName:"p"},"GeoLoc")," field in your model as ",Object(a.b)("inlineCode",{parentName:"p"},"Indexed")," and create the index "),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"[Document]\npublic class Restaurant\n{\n    [Indexed]\n    public string Name { get; set; }\n\n    [Indexed]\n    public GeoLoc Location{get; set;}\n\n    [Indexed(Aggregatable = true)]\n    public double CostPerPerson{get;set;}\n}\n")),Object(a.b)("p",null,"So let's create the index and seed some data."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),'// connect\nvar provider = new RedisConnectionProvider("redis://localhost:6379");\n\n// get connection\nvar connection = provider.Connection;\n\n// get collection\nvar restaurants = provider.RedisCollection<Restaurant>();\n\n// Create index\nawait connection.CreateIndexAsync(typeof(Restaurant));\n\n// seed with dummy data\n var r1 = new Restaurant {Name = "Tony\'s Pizza & Pasta", CostPerPerson = 12.00, Location = new (-122.076751,37.369929)};\nvar r2 = new Restaurant {Name = "Nizi Sushi", CostPerPerson = 16.00, Location = new (-122.057360,37.371207)};\nvar r3 = new Restaurant {Name = "Thai Thai", CostPerPerson = 11.50, Location = new (-122.04382,37.38)};\nvar r4 = new Restaurant {Name = "Chipotles", CostPerPerson = 8.50, Location = new (-122.0524,37.359719 )};\nrestaurants.Insert(r1);\nrestaurants.Insert(r2);\nrestaurants.Insert(r3);\nrestaurants.Insert(r4);\n')),Object(a.b)("h2",{id:"querying-based-off-location"},"Querying Based off Location"),Object(a.b)("p",null,"With our data seeded, we can now run geo-filters on our restaurants data, let's say we had an office (e.g. Redis's offices in Mountain View at ",Object(a.b)("inlineCode",{parentName:"p"},"-122.064224,37.377266"),") and we wanted to find nearby restaurants, we could do so by using a ",Object(a.b)("inlineCode",{parentName:"p"},"GeoFilter")," query restaurants within a certain radius, say 1 mile we can:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),'var nearbyRestaurants = restaurants.GeoFilter(x => x.Location, -122.064224, 37.377266, 5, GeoLocDistanceUnit.Miles);\nforeach (var restaurant in nearbyRestaurants)\n{\n    Console.WriteLine($"{restaurant.Name} is within 1 mile of work");\n}\n')))}l.isMDXComponent=!0},319:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=o.a.createContext({}),l=function(e){var n=o.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return o.a.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,b=u["".concat(i,".").concat(f)]||u[f]||p[f]||a;return t?o.a.createElement(b,s(s({ref:n},d),{},{components:t})):o.a.createElement(b,s({ref:n},d))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);