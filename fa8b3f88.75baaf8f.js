(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{304:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return l}));var a=n(3),i=n(7),r=(n(0),n(313)),o={id:"index-usingjava",title:"Modeling JSON Documents with Redis and Java",sidebar_label:"RedisJSON and Java",slug:"/howtos/redisjson/using-java"},s={unversionedId:"howtos/redisjson/using-java/index-usingjava",id:"howtos/redisjson/using-java/index-usingjava",isDocsHomePage:!1,title:"Modeling JSON Documents with Redis and Java",description:"RedisJSON lets you store, index, and query JSON data in Redis. Jedis, a Java driver for Redis, provides full support for RedisJSON as of the 4.0 release.",source:"@site/docs/howtos/redisjson/using-java/index-usingjava.mdx",slug:"/howtos/redisjson/using-java",permalink:"/howtos/redisjson/using-java",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisjson/using-java/index-usingjava.mdx",version:"current",sidebar_label:"RedisJSON and Java",sidebar:"docs",previous:{title:"How to cache JSON data in Redis with Go",permalink:"/howtos/redisjson/using-go"},next:{title:"How to visualize JSON data using RedisInsight",permalink:"/howtos/redisjson/using-redisinsight"}},d=[{value:"1. Run the RedisMod Docker container",id:"1-run-the-redismod-docker-container",children:[]},{value:"2. Add Jedis as a Dependency",id:"2-add-jedis-as-a-dependency",children:[]},{value:"3. Connect to Redis",id:"3-connect-to-redis",children:[]},{value:"4. Model Your Domain",id:"4-model-your-domain",children:[]},{value:"Querying and indexing JSON",id:"querying-and-indexing-json",children:[]}],c={toc:d};function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"RedisJSON lets you store, index, and query JSON data in Redis. Jedis, a Java driver for Redis, provides full support for RedisJSON as of the 4.0 release."),Object(r.b)("p",null,"Follow along with the steps below to get started with Java and RedisJSON."),Object(r.b)("h3",{id:"1-run-the-redismod-docker-container"},"1. Run the RedisMod Docker container"),Object(r.b)("p",null,"The RedisMod docker container bundles the Redis modules that power RedisJSON. To get a running Redis instance with RedisJSON, run the following bash command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"})," docker run -d -p 6379:6379 redislabs/redismod:latest\n")),Object(r.b)("h3",{id:"2-add-jedis-as-a-dependency"},"2. Add Jedis as a Dependency"),Object(r.b)("p",null,"You'll need to add Jedis to your Java project. If you're using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://maven.apache.org/install.html"}),"Maven"),", the dependency will look something like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>4.0.0<version>\n</dependency>\n")),Object(r.b)("p",null,"Replace the version with your desired version of Jedis, but note that you'll need Jedis 4.0 or greater to get RedisJSON support."),Object(r.b)("h3",{id:"3-connect-to-redis"},"3. Connect to Redis"),Object(r.b)("p",null,"You'll need to initialize you connection to Redis. This means configuring and creating a ",Object(r.b)("inlineCode",{parentName:"p"},"UnifiedJedis")," instance:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  HostAndPort config = new HostAndPort(Protocol.DEFAULT_HOST, 6379);\n  PooledJedisConnectionProvider provider = new PooledJedisConnectionProvider(config);\n  UnifiedJedis client = new UnifiedJedis(provider);\n")),Object(r.b)("h2",{id:"4-model-your-domain"},"4. Model Your Domain"),Object(r.b)("p",null,"You'll need to represent your data by creating ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Plain_old_Java_object"}),"POJOs"),". Jedis will then help you serialize these objects to JSON."),Object(r.b)("p",null,"Suppose you're building an online learning platform, and you want to represent\nstudents. Let's create a simple POJO to represent these students:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"private class Student {\n    private String firstName;\n    private String lastName;\n\n    public Student(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n      return firstName;\n    }\n\n    public String getLastName() {\n      return lastName;\n    }\n}\n")),Object(r.b)("p",null,"Now we can create some students and store them in Redis as JSON:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Student maya = new Student("Maya", "Jayavant");\nclient.jsonSet("student:111", maya);\n\nStudent oliwia = new Student("Oliwia", "Jagoda");\nclient.jsonSet("student:112", oliwia);\n')),Object(r.b)("p",null,"Notice we pass the ",Object(r.b)("inlineCode",{parentName:"p"},"Student")," instances to the ",Object(r.b)("inlineCode",{parentName:"p"},"jsonSet()"),' method. Jedis then serializes the objects and stores them in Redis at the specified keys (in this case, "student:111" and "student:112").'),Object(r.b)("h2",{id:"querying-and-indexing-json"},"Querying and indexing JSON"),Object(r.b)("p",null,'If we want to be able to query this JSON, we\'ll need to create an index. Let\'s\ncreate an index on the "firstName" and "lastName" fields. To do this:'),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},'We define which fields to index ("firstName" and "lastName").'),Object(r.b)("li",{parentName:"ol"},'We set up the index definition to recognize JSON and include only those\ndocuments\nwhose key starts with "student:".'),Object(r.b)("li",{parentName:"ol"},'Then we actually create the index, called "student-index", by calling ',Object(r.b)("inlineCode",{parentName:"li"},"ftCreate\n()"),".")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Schema schema = new Schema().addTextField("$.firstName", 1.0).addTextField("$" +\n            ".lastName", 1.0);\nIndexDefinition rule = new IndexDefinition(IndexDefinition.Type.JSON)\n        .setPrefixes(new String[]{"student:"});\nclient.ftCreate("student-index",\n            IndexOptions.defaultOptions().setDefinition(rule),\n            schema);\n')),Object(r.b)("p",null,'With an index now defined, we can query our JSON. Let\'s find all students whose\nname begins with "maya":'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'Query q = new Query("@\\\\$\\\\" + ".firstName:maya*");\nSearchResult mayaSearch = client.ftSearch("student-index", q);\n')),Object(r.b)("p",null,"We can then iterate over our search results:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"List<Document> docs = mayaSearch.getDocuments();\nfor (Document doc : docs) {\n   System.out.println(doc);\n}\n")),Object(r.b)("p",null,"This example just scratches the surface. You can atomically manipulate JSON documents and query them in a variety of ways. See the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://oss.redis.com/redisjson/"}),"RedisJSON docs"),", the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://oss.redis.com/redisearch/"}),"RediSearch")," docs, and our course, ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://university.redis.com/courses/ru203/"}),'"Querying, Indexing, and Full-text Search in Redis"'),", for a lot more examples. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://university.redis.com/courses/ru204/"}),"RU204: Storing, Querying and Indexing JSON at Speed")," - a course at Redis University"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/howtos/redisjson/using-python"}),"RedisJSON and Python")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/howtos/redisjson/storing-complex-json-document"}),"How to store and retrieve nested JSON document")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/howtos/redisjson/using-nodejs"}),"Importing JSON data into Redis using NodeJS")," "),Object(r.b)("li",{parentName:"ul"},"Learn more about ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://oss.redis.com/redisjson/"}),"RedisJSON")," in the Quickstart tutorial."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/howtos/shoppingcart"}),"How to build shopping cart app using NodeJS and RedisJSON")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://redis.com/blog/index-and-query-json-docs-with-redis/"}),"Indexing, Querying, and Full-Text Search of JSON Documents with Redis"))))}l.isMDXComponent=!0},313:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),l=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=l(n),b=a,m=u["".concat(o,".").concat(b)]||u[b]||p[b]||r;return n?i.a.createElement(m,s(s({ref:t},c),{},{components:n})):i.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);