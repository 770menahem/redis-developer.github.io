(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{179:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return r})),o.d(t,"metadata",(function(){return s})),o.d(t,"toc",(function(){return c})),o.d(t,"default",(function(){return d}));var n=o(3),i=o(7),a=(o(0),o(361)),r={id:"index-vincent-aceto-story",title:"Hacktoberfest Stories: A Hacktoberfest Composition: Redis and Docker",sidebar_label:"Vincent's Hacktoberfest at Redis Story",slug:"/hacktoberfest/stories/vincent-aceto"},s={unversionedId:"get-involved/hacktoberfest/vincent-aceto-story/index-vincent-aceto-story",id:"get-involved/hacktoberfest/vincent-aceto-story/index-vincent-aceto-story",isDocsHomePage:!1,title:"Hacktoberfest Stories: A Hacktoberfest Composition: Redis and Docker",description:"Hello!  My name's Vincent Aceto and I am a Software Engineer based in New York City.  Throughout the week, you can find me hacking away on mobile and TV applications over at Equinox Media.  On the weekends, when I'm not getting lost somewhere on my skateboard, I'll be nose deep in some open source or personal projects.",source:"@site/docs/get-involved/hacktoberfest/vincent-aceto-story/index-vincent-aceto-story.mdx",slug:"/hacktoberfest/stories/vincent-aceto",permalink:"/hacktoberfest/stories/vincent-aceto",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/get-involved/hacktoberfest/vincent-aceto-story/index-vincent-aceto-story.mdx",version:"current",lastUpdatedAt:1635715782,sidebar_label:"Vincent's Hacktoberfest at Redis Story",sidebar:"docs",previous:{title:"Hacktoberfest Stories: Opening the source of open source",permalink:"/hacktoberfest/stories/lara-aasem"},next:{title:"Redis Discord Server",permalink:"/community/discord/"}},c=[],l={toc:c};function d(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Hello!  My name's ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.vincentaceto.com/"}),"Vincent Aceto")," and I am a Software Engineer based in New York City.  Throughout the week, you can find me hacking away on mobile and TV applications over at Equinox Media.  On the weekends, when I'm not getting lost somewhere on my skateboard, I'll be nose deep in some open source or personal projects."),Object(a.b)("p",null,"October is a special month for those who enjoy working on exciting software projects.  In fact, there couldn\u2019t be a more perfect month to get into software exploration and contribution; it's collectively known as Hacktoberfest!  Hacktoberfest is a community-led effort to encourage open source contributing and foster learning.  I am a huge advocate for open source, so getting involved in Hacktoberfest is such a joy; if I have the chance to learn something new or brush up on some skills, then definitely count me in."),Object(a.b)("p",null,"Now, rewind the clock a bit, and you'd find me perusing Github's Hacktoberfest-tagged issues.  I wanted to find the best first contribution for the month's coding festivities.  While searching, I had one very important criterion that the introductory issue needed to satisfy: to work with a technology that I do not use on a daily basis.  I wanted to make sure that I walked away with a newfound knowledge that would benefit my career.  After some time, my eyes landed on a Redis Developer Community issue - I knew it immediately, this was perfect!  The checkbox was ticked, for I do not regularly work with Redis.  I was now ready to kick off the Hacktoberfest celebration."),Object(a.b)("p",null,"The project I worked on is entitled ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/redis-developer/introducing-the-geosearch-command"}),"Introducing The Geosearch Command"),".   The goal of the project is to demonstrate the use of the GEOSEARCH command, which was added to Redis in the recent 6.2 release.  Working as a software engineer, you are almost always going to be working with some cached data and, more often than not, it's Redis that is sitting nicely somewhere in that cache layer.  That said, my first-hand experience (at the time) with the caching technology resonated somewhere between \u201clanding page\u201d and \u201cgetting started\u201d.  The project had turned out to be developer sale, a two-for-one: I would get to learn more about the Redis technology, how to set up an instance, familiarize myself with the API, and I would get the opportunity to work with Docker - which I'm not regularly hacking with during my day-to-day."),Object(a.b)("p",null,"Now, onto the ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/redis-developer/introducing-the-geosearch-command/issues/5"}),"issue"),".  The issue's aim was to extend an existing Docker Compose integration.  The ",Object(a.b)("inlineCode",{parentName:"p"},"docker-compose.yml")," file was to include a schema, which was to run the repository's Python Flask application in a Docker container.  Additionally, the main application was to connect to the project's existing Redis container - this Redis build step was already included in the Docker Compose file.  With the features and constraints clearly defined, the next step was to pull out the documentation.  To make sure I was familiar with the tech at hand, and to ensure I got the most out of working on the issue, I started with the Redis installation docs - becoming aware that things like the default Redis port ",Object(a.b)("inlineCode",{parentName:"p"},"6379")," would come to serve me well when debugging.  After installation, I took some time to explore the Redis API and read about Redis' internal hash implementation at a high level.  The final reconnaissance was to review Docker.  I had briefly used Docker at a previous position, and have worked on some personal projects using the container technology; however, a quick Dockerfile and ",Object(a.b)("inlineCode",{parentName:"p"},"docker-compose.yml")," refresher was necessary."),Object(a.b)("p",null,"With the pre-work done, it was time to start the Flask application's Docker Compose implementation.  Here is a step-by-step guide, expressed in the present tense, to the process:"),Object(a.b)("p",null,"First, let's start with the Docker Compose ",Object(a.b)("inlineCode",{parentName:"p"},"YAML")," file:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the YAML file",src:o(795).default})),Object(a.b)("p",null,"As you can see, we have some Redis provisioning steps.  We assign a name to the container, define the version of Redis we wish to spin up, and the port mapping (",Object(a.b)("inlineCode",{parentName:"p"},"6379:6379")," states we'd like to expose port ",Object(a.b)("inlineCode",{parentName:"p"},"6379")," from inside the container to a port on your local machine)."),Object(a.b)("p",null,"Now, let's start with composing the project's application.  Unlike the Redis container, which uses an official Docker image to build from, we don't have a blueprint to scaffold the project's application.  This blueprint, or schema, is called a Dockerfile.  A Dockerfile lists steps on how to build our image.  It's this very image that tells Docker's engine how to build the container.  Let's create a Dockerfile, which will assemble the application image for us:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the Dockerfile",src:o(796).default})),Object(a.b)("p",null,"In short, this file serves as the foundation for the construction of the project's application environment.  Additionally, the file tells Docker which files we want to include in our container, how to install the contained app's dependencies and what command should be used to run the app. Most of the file's instructions are better explained in the ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.docker.com/engine/reference/builder/"}),"official documentation"),", so please take a look there if you're curious as to what the file's instructions have to offer."),Object(a.b)("p",null,"Great, before we move on to the compose file, let's make sure we test that Docker is able to build and run the container from our image."),Object(a.b)("p",null,"Let's build the image:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the image build",src:o(797).default})),Object(a.b)("p",null,"Get our newly created image's hash identifier by listing our local images:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the list of local images",src:o(798).default})),Object(a.b)("p",null,"Now let\u2019s run the container using the image id, while making sure we bind a port on our machine to the exposed port defined in the Dockerfile:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the port binding",src:o(799).default})),Object(a.b)("p",null,"Great!  The logs indicate the container is running.  Let's ensure our port mapping is working.  A quick ",Object(a.b)("inlineCode",{parentName:"p"},"cURL")," command verifies that we can talk to the application:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the cURL command",src:o(800).default})),Object(a.b)("p",null,"With the Flask application Docker-fied",Object(a.b)("sup",null,"TM"),", let's compose it with Redis!"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the Redis composition",src:o(801).default})),Object(a.b)("p",null,"Let us quickly dissect what was added to the ",Object(a.b)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Define a service for the application (namespaced under 'app')"),Object(a.b)("li",{parentName:"ol"},"Define a name for the container"),Object(a.b)("li",{parentName:"ol"},"Set a build context/entry point (this is the relative location for our service's Dockerfile)"),Object(a.b)("li",{parentName:"ol"},"Map the service's port to the host machine"),Object(a.b)("li",{parentName:"ol"},"Ensure that Redis is initialized before the Flask app starts (since the Flask application requires a Redis connection on ",Object(a.b)("inlineCode",{parentName:"li"},"init"),")"),Object(a.b)("li",{parentName:"ol"},"Define the necessary environment variables.")),Object(a.b)("p",null,"With the scaffolding in order, it's now time to run both the Flask application and Redis with Docker Compose.  To do so, we'll run the command ",Object(a.b)("inlineCode",{parentName:"p"},"docker-compose up"),":"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab of the docker-compose-up command",src:o(802).default})),Object(a.b)("p",null,"Finally, let's navigate to ",Object(a.b)("inlineCode",{parentName:"p"},"localhost:5000")," in our browser to see the application in action:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab showing localhost:5000",src:o(803).default})),Object(a.b)("p",null,"Excellent, the Flask application is running and is composed with the pre-existing Redis integration!"),Object(a.b)("p",null,"Now, before I conclude, I'd be remiss if I said that things worked as smoothly as portrayed; however, we welcome such hiccups and challenges.  The main problem I faced was an empty response from the contained application server.  What could be the issue?  The Dockerfile, for the Flask app, is working.  The compose file seemingly provisions our services successfully.  What could be the problem here?  Welp, turns out I forgot a very important factoid: Docker Compose will set up a single default network, one of which will house the services defined in the yaml file.  Containers and their services can communicate within this network, but what about our browser - which is not on that Docker network?"),Object(a.b)("p",null,"To resolve this issue, we need to tell our contained application server that it should listen on all networks, not just localhost; which, in the context of our running Docker network, is local only to that micro-network, if you will.  To tell the Flask server to listen on all accessible networks, we can define our host in the Dockerfile's ",Object(a.b)("inlineCode",{parentName:"p"},"CMD")," command:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"Screen grab showing the CMD command",src:o(804).default})),Object(a.b)("p",null,"All good!"),Object(a.b)("p",null,"Working through this issue, I definitely picked up some newfound Redis knowledge!  While not 100% necessary for the task at hand, starting with the official documentation and exploring the API provided me with the confidence needed to tackle this issue.  Additionally, the project allowed me to solidify some pre-existing Docker knowledge; and, very politely, pointed out which knowledge gaps needed to be filled."),Object(a.b)("p",null,"Working through this Hacktoberfest-inspired issue was very rewarding, and I can say that I have walked away a better developer.  Not only was I exposed to more technology, and got to flex some problem-solving muscles, but my passion for open-source software collaboration has grown evermore."),Object(a.b)("p",null,"Thank you for reading!  I hope my story inspires you to start with (or continue) working with open source."),Object(a.b)("hr",null),Object(a.b)("p",null,"You can find Vincent online at ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.vincentaceto.com/"}),"his website")," and at ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.linkedin.com/in/vinaceto"}),"LinkedIn"),"."))}d.isMDXComponent=!0},361:function(e,t,o){"use strict";o.d(t,"a",(function(){return p})),o.d(t,"b",(function(){return b}));var n=o(0),i=o.n(n);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},p=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(o),u=n,b=p["".concat(r,".").concat(u)]||p[u]||h[u]||a;return o?i.a.createElement(b,s(s({ref:t},l),{},{components:o})):i.a.createElement(b,s({ref:t},l))}));function b(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,r=new Array(a);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var l=2;l<a;l++)r[l]=o[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},795:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/1-docker-compose-yaml-f00397e4e31b71f8a3467ff5bbb93a11.png"},796:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/2-dockerfile-95d4dd7ac8c67bb1b1c3cdee3bc23971.png"},797:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/3-build-image-e60062affd71c9a7e7c0b841db071728.png"},798:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/4-list-local-images-9416a763a149eedd38c35eb836a55896.png"},799:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/5-run-container-bind-port-8cbf2505cb94330d3a53bb9c50fa314e.png"},800:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/6-curl-5e22259c83c70ba92e2bccbcf69974fc.png"},801:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/7-compose-with-Redis-9c50b4ffb968d577d3e3e09b3bf7addb.png"},802:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/8-docker-compose-up-f481a9380fae8ccaa00ebcaad1ebdd80.png"},803:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/9-localhost-5000-ad5db018dd6c812596419b5443e349b8.png"},804:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/10-cmd-5af0881fbc89c322289a9d491e9fe0a1.png"}}]);