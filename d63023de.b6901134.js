(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{225:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(3),a=n(7),r=(n(0),n(262)),l=(n(267),n(268),n(263),n(264),{id:"index-fixed-window-reactive",title:"Reactive Implementation",sidebar_label:"Reactive Implementation",slug:"/develop/java/spring/rate-limiting/fixed-window/reactive"}),o={unversionedId:"develop/java/spring/rate-limiting/fixed-window/index-fixed-window-reactive",id:"develop/java/spring/rate-limiting/fixed-window/index-fixed-window-reactive",isDocsHomePage:!1,title:"Reactive Implementation",description:"Author: Brian Sam-Bodden",source:"@site/docs/develop/java/spring/rate-limiting/fixed-window/index-fixed-window-reactive.mdx",slug:"/develop/java/spring/rate-limiting/fixed-window/reactive",permalink:"/develop/java/spring/rate-limiting/fixed-window/reactive",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/java/spring/rate-limiting/fixed-window/index-fixed-window-reactive.mdx",version:"current",sidebar_label:"Reactive Implementation",sidebar:"docs",previous:{title:"How to Implement Fixed Window Rate Limiting using Redis",permalink:"/develop/java/spring/rate-limiting/fixed-window"},next:{title:"Atomicity with Lua",permalink:"/develop/java/spring/rate-limiting/fixed-window/reactive-lua"}},s=[{value:"A basic Spring Web Flux App",id:"a-basic-spring-web-flux-app",children:[]},{value:"Spring WebFlux Filters",id:"spring-webflux-filters",children:[]},{value:"Reactive Redis Template",id:"reactive-redis-template",children:[]},{value:"Identifying the Requester",id:"identifying-the-requester",children:[]},{value:"Increment and Expire Key",id:"increment-and-expire-key",children:[]},{value:"Completing the filter implementation",id:"completing-the-filter-implementation",children:[]},{value:"Testing with curl",id:"testing-with-curl",children:[]}],c={toc:s};function p(e){var t=e.components,l=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,l,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Author: ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://twitter.com/bsbodden"}),"Brian Sam-Bodden")),Object(r.b)("h2",{id:"a-basic-spring-web-flux-app"},"A basic Spring Web Flux App"),Object(r.b)("p",null,"Let's start by creating a simple Spring Boot application using the Spring Initializr:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"In your browser, launch the ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://start.spring.io"}),"Spring Initilizr")),Object(r.b)("li",{parentName:"ol"},"Fill out the form using the following settings:")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Project: Maven Project"),Object(r.b)("li",{parentName:"ul"},"Language: Java"),Object(r.b)("li",{parentName:"ul"},"Spring Boot: 2.5.4"),Object(r.b)("li",{parentName:"ul"},"Project Metadata:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Group: ",Object(r.b)("inlineCode",{parentName:"li"},"com.redis.rl")),Object(r.b)("li",{parentName:"ul"},"Artifact: ",Object(r.b)("inlineCode",{parentName:"li"},"fixed-window-rate-limiter")),Object(r.b)("li",{parentName:"ul"},"Name: ",Object(r.b)("inlineCode",{parentName:"li"},"fixed-window-rate-limiter")),Object(r.b)("li",{parentName:"ul"},"Description: Redis Fixed Window Rate Limiter"),Object(r.b)("li",{parentName:"ul"},"Package Name: ",Object(r.b)("inlineCode",{parentName:"li"},"com.redis.rl")),Object(r.b)("li",{parentName:"ul"},"Packaging: JAR"),Object(r.b)("li",{parentName:"ul"},"Java: 11"))),Object(r.b)("li",{parentName:"ul"},"Dependencies:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Spring Reactive Web"),Object(r.b)("li",{parentName:"ul"},"String Data Reactive"),Object(r.b)("li",{parentName:"ul"},"Spring Boot DevTools")))),Object(r.b)("p",null,Object(r.b)("img",{alt:"Spring Initializr",src:n(789).default})),Object(r.b)("p",null,"Click on GENERATE and Initializr will generate the zip file for the project and prompt you to download it to your local machine.\nUnzip the downloaded file (named ",Object(r.b)("inlineCode",{parentName:"p"},"fixed-window-rate-limiter.zip"),") in a suitable directory. For example on a Mac:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"cd ~/my-directory\nunzip ~/Downloads/fixed-window-rate-limiter.zip\n")),Object(r.b)("p",null,"Now, open the file ",Object(r.b)("inlineCode",{parentName:"p"},"FixedWindowRateLimiterApplication.java")," located under ",Object(r.b)("inlineCode",{parentName:"p"},"fixed-window-rate-limiter/src/main/java/com/redis/rl/"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"package com.redis.rl;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class FixedWindowRateLimiterApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(FixedWindowRateLimiterApplication.class, args);\n    }\n\n}\n")),Object(r.b)("p",null,"And let's add the ",Object(r.b)("inlineCode",{parentName:"p"},"@Bean")," annotated method ",Object(r.b)("inlineCode",{parentName:"p"},"routes()"),' to create the simplest of endpoints; a "ping" endpoint,\nwhich replies with a text reponse "PONG":'),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'@Bean\nRouterFunction<ServerResponse> routes() {\n  return route() //\n      .GET("/api/ping", r -> ok() //\n          .contentType(TEXT_PLAIN) //\n          .body(BodyInserters.fromValue("PONG")) //\n      ).build();\n}\n')),Object(r.b)("p",null,"You'll also need the following imports:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import static org.springframework.web.reactive.function.server.RouterFunctions.route;\nimport static org.springframework.web.reactive.function.server.ServerResponse.ok;\nimport static org.springframework.http.MediaType.TEXT_PLAIN;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport org.springframework.web.reactive.function.BodyInserters;\n")),Object(r.b)("p",null,"Let's use curl to test the newly created endpoint:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"/>curl http://localhost:8080/api/ping\nPONG\n")),Object(r.b)("h2",{id:"spring-webflux-filters"},"Spring WebFlux Filters"),Object(r.b)("p",null,"We'll implement our rate limiter as a Spring WebFlux Filter. A filter allows us to\nintercept a request and modify the response. For our needs we'll use a ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/server/HandlerFilterFunction.html"}),Object(r.b)("inlineCode",{parentName:"a"},"HandlerFilterFunction")),";\nwhich we can filter a ",Object(r.b)("inlineCode",{parentName:"p"},"RouterFunction")," such as our ",Object(r.b)("inlineCode",{parentName:"p"},"routes()")," endpoint."),Object(r.b)("p",null,"We'll keep everything in one file to make the example easier to manage for our simple example. At the end of the file\n",Object(r.b)("inlineCode",{parentName:"p"},"FixedWindowRateLimiterApplication.java")," let's add a class called ",Object(r.b)("inlineCode",{parentName:"p"},"RateLimiterHandlerFilterFunction")," as shown:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"class RateLimiterHandlerFilterFunction implements HandlerFilterFunction<ServerResponse, ServerResponse> {\n\n  @Override\n  public Mono<ServerResponse> filter(ServerRequest request, HandlerFunction<ServerResponse> next) {\n    // TODO Auto-generated method stub\n    return null;\n  }\n}\n")),Object(r.b)("p",null,"The class implements the ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," method, which currently returns ",Object(r.b)("inlineCode",{parentName:"p"},"null"),". Let's modify it to simply pass the\nrequest throught."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"@Override\npublic Mono<ServerResponse> filter(ServerRequest request, HandlerFunction<ServerResponse> next) {\n  return next.handle(request);\n}\n")),Object(r.b)("p",null,"And also, let's apply it to our ",Object(r.b)("inlineCode",{parentName:"p"},"routes")," method:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'@Bean\nRouterFunction<ServerResponse> routes() {\n  return route() //\n      .GET("/api/ping", r -> ok() //\n          .contentType(TEXT_PLAIN) //\n          .body(BodyInserters.fromValue("PONG")) //\n      ).filter(new RateLimiterHandlerFilterFunction()).build();\n}\n')),Object(r.b)("p",null,"Testing the endpoint with curl should still works as previously."),Object(r.b)("h2",{id:"reactive-redis-template"},"Reactive Redis Template"),Object(r.b)("p",null,"Spring Data Redis provides a Reactive API which plays well with all the other reactive parts of the Spring framework.\nIn order to work with Redis we'll use the ",Object(r.b)("inlineCode",{parentName:"p"},"ReactiveRedisTemplate"),", the aptly named ",Object(r.b)("inlineCode",{parentName:"p"},"reactiveRedisTemplate")," method\nconfigures a reactive template given a ",Object(r.b)("inlineCode",{parentName:"p"},"ReactiveRedisConnectionFactory")," (which will be injected by the framework)."),Object(r.b)("p",null,"The template is configured to use the work with String keys and Long values as shown by the usage of the ",Object(r.b)("inlineCode",{parentName:"p"},"StringRedisSerializer"),"\nand the ",Object(r.b)("inlineCode",{parentName:"p"},"GenericToStringSerializer"),"."),Object(r.b)("p",null,"The template offers a high-level abstraction for Redis interactions and we will later pass it to our rate limiter\nfilter to use Redis as our rate limiting back-end:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"@Bean\nReactiveRedisTemplate<String, Long> reactiveRedisTemplate(ReactiveRedisConnectionFactory factory) {\n  JdkSerializationRedisSerializer jdkSerializationRedisSerializer = new JdkSerializationRedisSerializer();\n  StringRedisSerializer stringRedisSerializer = StringRedisSerializer.UTF_8;\n  GenericToStringSerializer<Long> longToStringSerializer = new GenericToStringSerializer<>(Long.class);\n  ReactiveRedisTemplate<String, Long> template = new ReactiveRedisTemplate<>(factory,\n      RedisSerializationContext.<String, Long>newSerializationContext(jdkSerializationRedisSerializer)\n          .key(stringRedisSerializer).value(longToStringSerializer).build());\n  return template;\n}\n\n@Autowired\nprivate ReactiveRedisTemplate<String, Long> redisTemplate;\n")),Object(r.b)("p",null,"Below are the required imports added:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\nimport org.springframework.data.redis.core.ReactiveRedisTemplate;\nimport org.springframework.data.redis.serializer.GenericToStringSerializer;\nimport org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n")),Object(r.b)("p",null,"Next, let's modify the ",Object(r.b)("inlineCode",{parentName:"p"},"RateLimiterHandlerFilterFunction")," class to include the template and let's add a\nconstructor so that we can properly initialize it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"class RateLimiterHandlerFilterFunction implements HandlerFilterFunction<ServerResponse, ServerResponse> {\n\n  private ReactiveRedisTemplate<String, Long> redisTemplate;\n\n  public RateLimiterHandlerFilterFunction(ReactiveRedisTemplate<String, Long> redisTemplate) {\n    this.redisTemplate = redisTemplate;\n  }\n")),Object(r.b)("p",null,"We also need to modify the ",Object(r.b)("inlineCode",{parentName:"p"},"routes")," method to include the ",Object(r.b)("inlineCode",{parentName:"p"},"redisTemplate")," in the call to the\n",Object(r.b)("inlineCode",{parentName:"p"},"RateLimiterHandlerFilterFunction")," constructor:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'@Bean\nRouterFunction<ServerResponse> routes() {\n  return route() //\n      .GET("/api/ping", r -> ok() //\n          .contentType(TEXT_PLAIN) //\n          .body(BodyInserters.fromValue("PONG")) //\n      ).filter(new RateLimiterHandlerFilterFunction(redisTemplate)).build();\n}\n')),Object(r.b)("h2",{id:"identifying-the-requester"},"Identifying the Requester"),Object(r.b)("p",null,"As mentioned in the introduction to rate limiting, identifying the origin of the request is critical to\nthe efficacy of your rate limiting implementation. In this simple implementation we will focus on the\nmechanics of rate limiting and do the simplest possible thing we can do to identify the requester."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," method in ",Object(r.b)("inlineCode",{parentName:"p"},"RateLimiterHandlerFilterFunction")," takes an instance of a ",Object(r.b)("inlineCode",{parentName:"p"},"ServerRequest"),", from\nwhich we can obtain the IP address of the requester. Add private method ",Object(r.b)("inlineCode",{parentName:"p"},"requestAddress")," to the filter function\nclass:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'private String requestAddress(Optional<InetSocketAddress> maybeAddress) {\n  return maybeAddress.isPresent() ? maybeAddress.get().getHostName() : "";\n}\n')),Object(r.b)("p",null,"With the ",Object(r.b)("inlineCode",{parentName:"p"},"requestAddress")," in place we can build the key we'll use to check for the requesters' quota.\nTo compute the key we will concatenate the requester's address and the current minute of the hour. We'll\nprefix the keys with ",Object(r.b)("inlineCode",{parentName:"p"},"rl_"),' for "rate limiting":'),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'public Mono<ServerResponse> filter(ServerRequest request, HandlerFunction<ServerResponse> next) {\n  int currentMinute = LocalTime.now().getMinute();\n  String key = String.format("rl_%s:%s", requestAddress(request.remoteAddress()), currentMinute);\n  System.out.println(">>>> key " + key);\n\n  return next.handle(request);\n}\n')),Object(r.b)("p",null,"Invoking the endpoint should show the key on the console like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),">>>> key rl_localhost:34\n")),Object(r.b)("h2",{id:"increment-and-expire-key"},"Increment and Expire Key"),Object(r.b)("p",null,"Now we need to implement the logic to execute the ",Object(r.b)("inlineCode",{parentName:"p"},"INCR")," and an ",Object(r.b)("inlineCode",{parentName:"p"},"EXPIRE")," logic\noutlined in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/develop/java/spring/rate-limiting/fixed-window"}),"Fixed Window"),"\nimplementation using Spring Data Redis Reactive:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"MULTI\nINCR [user-api-key]:[current minute number]\nEXPIRE [user-api-key]:[current minute number] 59\nEXEC\n")),Object(r.b)("p",null,'The "Basic Rate Limiting" recipe calls for the use of a ',Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://redis.io/topics/transactions"}),"Redis Transaction"),"\nin which the commands are sent to the server, accumulated in serial way and executed\nsequentially without any possible interruption by a request from another client."),Object(r.b)("p",null,"Basically, we want the ",Object(r.b)("inlineCode",{parentName:"p"},"INCR")," and ",Object(r.b)("inlineCode",{parentName:"p"},"EXPIRE")," calls to update the requests-per-unit-of-time counter\nto happen atomically or not at all. Given that ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/56647972/how-do-i-use-transactions-in-spring-data-redis-reactive"}),Object(r.b)("inlineCode",{parentName:"a"},"a Reactive API and Redis Transactions (MULTI/EXEC) are not compatible paradigms")),', which boils down to "you cannot listen to a command that is going to be executed in the future" in a chain of reactive commands\nA "best possible" approach to achieve this behavior with a reactive API is by using the ',Object(r.b)("inlineCode",{parentName:"p"},"ReactiveRedisTemplate")," ",Object(r.b)("inlineCode",{parentName:"p"},"execute")," method which takes a\n",Object(r.b)("inlineCode",{parentName:"p"},"ReactiveRedisCallback"),' guaranteing that at least the commands will run on the same Redis\nconnection, but, this is by no means a real "transaction":'),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"private Mono<ServerResponse> incrAndExpireKey(String key, ServerRequest request,\n  HandlerFunction<ServerResponse> next) {\n  return redisTemplate.execute(new ReactiveRedisCallback<List<Object>>() {\n    @Override\n    public Publisher<List<Object>> doInRedis(ReactiveRedisConnection connection) throws DataAccessException {\n      ByteBuffer bbKey = ByteBuffer.wrap(key.getBytes());\n      return Mono.zip( //\n          connection.numberCommands().incr(bbKey), //\n          connection.keyCommands().expire(bbKey, Duration.ofSeconds(59L)) //\n      ).then(Mono.empty());\n    }\n  }).then(next.handle(request));\n}\n")),Object(r.b)("p",null,"Let's break down what this monster of a reactive method:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"The method returns an Asynchronous (0-1) Result, a ",Object(r.b)("inlineCode",{parentName:"li"},"Mono")," (a specialized ",Object(r.b)("inlineCode",{parentName:"li"},"Publisher<T>")," that emits at most one item in this case a ",Object(r.b)("inlineCode",{parentName:"li"},"ServerResponse"),")"),Object(r.b)("li",{parentName:"ol"},"The method takes the calculated rate limiting ",Object(r.b)("inlineCode",{parentName:"li"},"key"),", the original server ",Object(r.b)("inlineCode",{parentName:"li"},"request")," and ",Object(r.b)("inlineCode",{parentName:"li"},"next")," handler function"),Object(r.b)("li",{parentName:"ol"},"In the ",Object(r.b)("inlineCode",{parentName:"li"},"doInRedis")," method we turn the key into a ",Object(r.b)("inlineCode",{parentName:"li"},"ByteBuffer")," in order to use with ",Object(r.b)("inlineCode",{parentName:"li"},"ReactiveRedisConnection")," commands"),Object(r.b)("li",{parentName:"ol"},"The zip methods waits for all the sources to emit one element and combines these elements into an output value\n,which we are ignoring since all we are after is sequential execution on the ",Object(r.b)("inlineCode",{parentName:"li"},"INCR")," and ",Object(r.b)("inlineCode",{parentName:"li"},"EXPIRE")," commands."),Object(r.b)("li",{parentName:"ol"},"The method then returns a ",Object(r.b)("inlineCode",{parentName:"li"},"Mono.empty()")),Object(r.b)("li",{parentName:"ol"},"Finally handle the request.")),Object(r.b)("h2",{id:"completing-the-filter-implementation"},"Completing the filter implementation"),Object(r.b)("p",null,"To complete the filter implementation, we'll add a constant for the cap on the number of request per minute, that can\nbe optionally loaded from the application's properties:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'@Value("${MAX_REQUESTS_PER_MINUTE}")\nprivate static Long MAX_REQUESTS_PER_MINUTE = 20L;\n')),Object(r.b)("p",null,"Let's break down he final ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," method implementation:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"We use the Redis template ",Object(r.b)("inlineCode",{parentName:"li"},"opsForValue()")," to retrieve the value stored under the calculated key."),Object(r.b)("li",{parentName:"ol"},"If the value..",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Is greater than or equal to the max quota we deny the request with a 409 response."),Object(r.b)("li",{parentName:"ul"},"Otherwise, call ",Object(r.b)("inlineCode",{parentName:"li"},"incrementAndExpireKey")))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Is empty/key not found (first request on this window) we call ",Object(r.b)("inlineCode",{parentName:"li"},"incrementAndExpireKey"))))),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'public Mono<ServerResponse> filter(ServerRequest request, HandlerFunction<ServerResponse> next) {\n  int currentMinute = LocalTime.now().getMinute();\n  String key = String.format("rl_%s:%s", requestAddress(request.remoteAddress()), currentMinute);\n\n  return redisTemplate //\n      .opsForValue().get(key) //\n      .flatMap( //\n          value -> value >= MAX_REQUESTS_PER_MINUTE ? //\n              ServerResponse.status(TOO_MANY_REQUESTS).build() : //\n              incrAndExpireKey(key, request, next) //\n      ).switchIfEmpty(incrAndExpireKey(key, request, next));\n}\n')),Object(r.b)("h2",{id:"testing-with-curl"},"Testing with curl"),Object(r.b)("p",null,"A simple way to test an API rate limiter is using ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://curl.se"}),"curl")," in a loop,\nsince we are testing a set number of requests per unit of time the curl loop below will\nsuffice:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),'for n in {1..22}; do echo $(curl -s -w " :: HTTP %{http_code}, %{size_download} bytes, %{time_total} s" -X GET http://localhost:8080/api/ping); sleep 0.5; done\n')),Object(r.b)("p",null,"We loop 22 times, the example code is set to 20 so 22 will allow us to see two 429 responses. The\ncurl flags used are as follows; first is ",Object(r.b)("inlineCode",{parentName:"p"},"-s")," that silences curl (makes it hide progress bar and errors), ",Object(r.b)("inlineCode",{parentName:"p"},"-w")," is the write out options in which we can pass a string with interpolated variables.\nThen we sleep 1/2 second between cycles."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),'\u279c for n in {1..22}; do echo $(curl -s -w " :: HTTP %{http_code}, %{size_download} bytes, %{time_total} s" -X GET http://localhost:8080/api/ping); sleep 0.5; done\nPONG :: HTTP 200, 4 bytes, 0.393156 s\nPONG :: HTTP 200, 4 bytes, 0.019530 s\nPONG :: HTTP 200, 4 bytes, 0.023677 s\nPONG :: HTTP 200, 4 bytes, 0.019922 s\nPONG :: HTTP 200, 4 bytes, 0.025573 s\nPONG :: HTTP 200, 4 bytes, 0.018916 s\nPONG :: HTTP 200, 4 bytes, 0.019548 s\nPONG :: HTTP 200, 4 bytes, 0.018335 s\nPONG :: HTTP 200, 4 bytes, 0.010105 s\nPONG :: HTTP 200, 4 bytes, 0.008416 s\nPONG :: HTTP 200, 4 bytes, 0.009829 s\nPONG :: HTTP 200, 4 bytes, 0.011766 s\nPONG :: HTTP 200, 4 bytes, 0.010809 s\nPONG :: HTTP 200, 4 bytes, 0.015483 s\nPONG :: HTTP 200, 4 bytes, 0.009732 s\nPONG :: HTTP 200, 4 bytes, 0.009970 s\nPONG :: HTTP 200, 4 bytes, 0.008696 s\nPONG :: HTTP 200, 4 bytes, 0.009176 s\nPONG :: HTTP 200, 4 bytes, 0.009678 s\nPONG :: HTTP 200, 4 bytes, 0.012497 s\n:: HTTP 429, 0 bytes, 0.010071 s\n:: HTTP 429, 0 bytes, 0.006625 s\n')),Object(r.b)("p",null,"If we run Redis in monitor mode, we should see the call to ",Object(r.b)("inlineCode",{parentName:"p"},"GET")," for a rejected\nrequest, and the same plus calls to ",Object(r.b)("inlineCode",{parentName:"p"},"INCR")," and ",Object(r.b)("inlineCode",{parentName:"p"},"EXPIRE")," for an allowed request:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),'1630366639.188290 [0 172.17.0.1:65016] "GET" "rl_localhost:37"\n1630366639.200956 [0 172.17.0.1:65016] "INCR" "rl_localhost:37"\n1630366639.202372 [0 172.17.0.1:65016] "EXPIRE" "rl_localhost:37" "59"\n...\n1630366649.891110 [0 172.17.0.1:65016] "GET" "rl_localhost:37"\n1630366650.417131 [0 172.17.0.1:65016] "GET" "rl_localhost:37"\n')),Object(r.b)("p",null,"You can find this example on the main branch at ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/redis-developer/fixed-window-rate-limiter"}),"https://github.com/redis-developer/fixed-window-rate-limiter")))}p.isMDXComponent=!0},264:function(e,t,n){"use strict";var i=n(0),a=n.n(i),r=n(262),l=n(270);n(263),n(55);t.a=function(e){var t=a.a.useState(!1),n=t[0],i=t[1];return a.a.createElement("div",{className:"ri-container"},a.a.createElement("div",{className:"ri-description-short"},a.a.createElement("div",{className:"ri-icon"},a.a.createElement("span",{className:"fe fe-zap"})),a.a.createElement("div",{className:"ri-detail"},a.a.createElement("div",{className:"ri-title"},a.a.createElement("a",{href:e.page},e.title)),a.a.createElement("div",{className:"ri-description"},e.description,a.a.Children.count(e.children)>0&&a.a.createElement("span",{className:"ri-more fe fe-more-horizontal",onClick:function(){return i(!n)}})))),n&&a.a.createElement("div",{className:"ri-description-long"},a.a.createElement(r.a,{components:l.a},e.children)))}},265:function(e,t,n){"use strict";var i=n(0),a=n(266);t.a=function(){var e=Object(i.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},266:function(e,t,n){"use strict";var i=n(0),a=Object(i.createContext)(void 0);t.a=a},267:function(e,t,n){"use strict";var i=n(0),a=n.n(i),r=n(265),l=n(269),o=n(56),s=n.n(o),c=37,p=39;t.a=function(e){var t=e.lazy,n=e.block,o=e.defaultValue,d=e.values,b=e.groupId,u=e.className,m=Object(r.a)(),h=m.tabGroupChoices,j=m.setTabGroupChoices,O=Object(i.useState)(o),g=O[0],f=O[1],w=i.Children.toArray(e.children);if(null!=b){var v=h[b];null!=v&&v!==g&&d.some((function(e){return e.value===v}))&&f(v)}var N=function(e){f(e),null!=b&&j(b,e)},R=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":n},u)},d.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(l.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return R.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case p:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(R,e.target,e)},onFocus:function(){return N(t)},onClick:function(){N(t)}},n)}))),t?Object(i.cloneElement)(w.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return Object(i.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},268:function(e,t,n){"use strict";var i=n(3),a=n(0),r=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return r.a.createElement("div",Object(i.a)({role:"tabpanel"},{hidden:n,className:a}),t)}},789:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/start-spring-io-01-b64e74c2f2f16c5c0d0145c2aee477ee.png"}}]);