(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{120:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(3),i=t(7),o=(t(0),t(335)),r=(t(340),t(341),t(336),t(337),{id:"redis-om-spring-json",title:"Mapping Java Objects to JSON",sidebar_label:"Working with JSON",slug:"/develop/java/spring/redis-om/redis-om-spring-json",authors:["bsb"]}),s={unversionedId:"develop/java/spring/redis-om/redis-om-spring-json",id:"develop/java/spring/redis-om/redis-om-spring-json",isDocsHomePage:!1,title:"Mapping Java Objects to JSON",description:"Introduction",source:"@site/docs/develop/java/spring/redis-om/index-redis-om-spring-json.mdx",slug:"/develop/java/spring/redis-om/redis-om-spring-json",permalink:"/develop/java/spring/redis-om/redis-om-spring-json",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/java/spring/redis-om/index-redis-om-spring-json.mdx",version:"current",lastUpdatedAt:1642092098,sidebar_label:"Working with JSON",sidebar:"docs",previous:{title:"Redis OM - Spring",permalink:"/develop/java/spring/redis-om/redis-om-spring"},next:{title:"Enhanced Mapping of Java Objects to Hashes",permalink:"/develop/java/spring/redis-om/redis-om-spring-hash"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"What You Will build",id:"what-you-will-build",children:[]},{value:"What You need",id:"what-you-need",children:[]},{value:"Starting with Spring Initializr",id:"starting-with-spring-initializr",children:[]},{value:"Adding Redis OM Spring",id:"adding-redis-om-spring",children:[{value:"Maven",id:"maven",children:[]},{value:"Gradle",id:"gradle",children:[]}]},{value:"Enabling Redis Document Repositories",id:"enabling-redis-document-repositories",children:[]},{value:"\ud83d\ude80 Launch Redis",id:"-launch-redis",children:[]},{value:"Domain Entity",id:"domain-entity",children:[]},{value:"Redis OM Spring Document Repositories",id:"redis-om-spring-document-repositories",children:[]},{value:"Pre-populating the Database",id:"pre-populating-the-database",children:[]},{value:"Where&#39;s our data?",id:"wheres-our-data",children:[{value:"RediSearch Indices",id:"redisearch-indices",children:[]},{value:"Create Simple Dynamic Queries",id:"create-simple-dynamic-queries",children:[]},{value:"Testing Controller",id:"testing-controller",children:[]},{value:"Storing and Querying Geospatial Data",id:"storing-and-querying-geospatial-data",children:[]},{value:"Native RediSearch Queries",id:"native-redisearch-queries",children:[]},{value:"Numeric Queries",id:"numeric-queries",children:[]},{value:"What&#39;s Next",id:"whats-next",children:[]}]}],c={toc:l};function p(e){var n=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"The JSON format has become ubiquitous as a data exchange format as well as a storage format,\nwith many traditional relational databases now supporting JSON as a native format as well as\na several document-oriented databases like CouchDB and MongoDB gaining in popularity. JSON as\na data format eliminates the rigidity of relational database schemas, allow applications to\nevolve more naturally."),Object(o.b)("p",null,"But did you know that Redis is a full-fledge document database supporting JSON natively? The\nRedisJSON module adds JSON as a native Redis datatype ",Object(o.b)("inlineCode",{parentName:"p"},"ReJSON-RL")," and it is seamlessly integrated\nwith Redis' Search Engine RediSearch. In this tutorial we'll build a simple Document application\nusing Redis OM Spring."),Object(o.b)("h2",{id:"what-you-will-build"},"What You Will build"),Object(o.b)("p",null,"You will build an application that stores ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," POJOs (Plain Old Java Objects) as JSON documents in Redis."),Object(o.b)("h2",{id:"what-you-need"},"What You need"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"About 15 minutes"),Object(o.b)("li",{parentName:"ul"},"A favorite text editor or IDE"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://www.oracle.com/technetwork/java/javase/downloads/index.html"}),"JDK 11")," or later"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://www.gradle.org/downloads"}),"Gradle 4+")," or ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://maven.apache.org/download.cgi"}),"Maven 3.2+")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.docker.com"}),"Docker")," / ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.docker.com/compose/"}),"Docker Compose"))),Object(o.b)("h2",{id:"starting-with-spring-initializr"},"Starting with Spring Initializr"),Object(o.b)("p",null,"We'll start by creating a base SpringBoot application using the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://start.spring.io"}),"Spring Initializr"),". You can use this\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.6.0&packaging=jar&jvmVersion=11&groupId=com.redis.om&artifactId=roms-documents&name=roms-documents&description=Redis%20OM%20Spring%20Document%20Demo&packageName=com.redis.om&dependencies=web,lombok,devtools"}),"pre-initialized project"),"\nand click Generate to download a ZIP file. This project is configured to fit the examples in this tutorial."),Object(o.b)("p",null,Object(o.b)("img",{alt:"Spring Initializr",src:t(556).default})),Object(o.b)("p",null,"To configure the project:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Navigate to ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://start.spring.io."}),"https://start.spring.io.")," This service pulls in all the dependencies you need for an application and does most of the setup for you."),Object(o.b)("li",{parentName:"ul"},"Choose either Gradle or Maven and the language you want to use. This guide assumes that you chose Java."),Object(o.b)("li",{parentName:"ul"},"Click ",Object(o.b)("em",{parentName:"li"},"Dependencies")," and select ",Object(o.b)("em",{parentName:"li"},"Spring Web"),", ",Object(o.b)("em",{parentName:"li"},"Lombok")," and ",Object(o.b)("em",{parentName:"li"},"Spring Boot DevTools"),"."),Object(o.b)("li",{parentName:"ul"},"Click ",Object(o.b)("em",{parentName:"li"},"Generate"),"."),Object(o.b)("li",{parentName:"ul"},"Download the resulting ZIP file (",Object(o.b)("inlineCode",{parentName:"li"},"roms-documents.zip"),"), which is an archive of a web application that is configured with your choices.")),Object(o.b)("p",null,"The dependencies included are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Spring Web"),": Build web/RESTful applications using Spring MVC. It will allow us to expose our app as a web service."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Lombok"),": Java annotation library which helps to reduce boilerplate code."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Spring Boot DevTools"),": Provides fast application restarts, LiveReload, and configurations for enhanced development experience.")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"NOTE:")," If your IDE has the Spring Initializr integration, you can complete this process from your IDE."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"NOTE:")," You can also fork the project from Github and open it in your IDE or other editor."),Object(o.b)("h2",{id:"adding-redis-om-spring"},"Adding Redis OM Spring"),Object(o.b)("h3",{id:"maven"},"Maven"),Object(o.b)("p",null,"To use Redis OM Spring, open the ",Object(o.b)("inlineCode",{parentName:"p"},"pom.xml")," file and add the Redis OM Spring Maven dependency to the pom.xml file ",Object(o.b)("inlineCode",{parentName:"p"},"dependencies")," element:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),"<dependency>\n  <groupId>com.redis.om.spring</groupId>\n  <artifactId>redis-om-spring</artifactId>\n  <version>0.1.0-SNAPSHOT</version>\n</dependency>\n")),Object(o.b)("h3",{id:"gradle"},"Gradle"),Object(o.b)("p",null,"If using gradle add the dependency as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-groovy"}),"dependencies {\n  implementation 'com.redis.om.spring:redis-om-spring:0.1.0-SNAPSHOT'\n}\n")),Object(o.b)("h2",{id:"enabling-redis-document-repositories"},"Enabling Redis Document Repositories"),Object(o.b)("p",null,"The generated application contains a single file, the ",Object(o.b)("inlineCode",{parentName:"p"},"@SpringBootApplications")," annotated main application:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"package com.redis.om;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class RomsDocumentsApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RomsDocumentsApplication.class, args);\n    }\n\n}\n")),Object(o.b)("p",null,"To enable the Redis Document Repositories we add the ",Object(o.b)("inlineCode",{parentName:"p"},"@EnableRedisDocumentRepositories")," which will\nallow us to use the ",Object(o.b)("inlineCode",{parentName:"p"},"RedisDocumentRepository")," class as the type of our Data Repositories."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.redis.om;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport com.redis.om.spring.annotations.EnableRedisDocumentRepositories;\n\n@SpringBootApplication\n@EnableRedisDocumentRepositories(basePackages = "com.redis.om.documents.*")\npublic class RomsDocumentsApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RomsDocumentsApplication.class, args);\n    }\n\n}\n')),Object(o.b)("h2",{id:"-launch-redis"},"\ud83d\ude80 Launch Redis"),Object(o.b)("p",null,"Redis OM Spring relies on the power of the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redisearch.io/"}),"RediSearch")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redisjson.io"}),"RedisJSON")," modules.\nThe docker compose YAML file below can get started quickly. You can place at the root folder of your project and name it\n",Object(o.b)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'version: "3.9"\nservices:\n  redis:\n    image: "redislabs/redismod:edge"\n    ports:\n      - "6379:6379"\n    volumes:\n      - ./data:/data\n    entrypoint: >\n      redis-server\n        --loadmodule /usr/lib/redis/modules/redisai.so\n        --loadmodule /usr/lib/redis/modules/redisearch.so\n        --loadmodule /usr/lib/redis/modules/redisgraph.so\n        --loadmodule /usr/lib/redis/modules/redistimeseries.so\n        --loadmodule /usr/lib/redis/modules/rejson.so\n        --loadmodule /usr/lib/redis/modules/redisbloom.so\n        --loadmodule /var/opt/redislabs/lib/modules/redisgears.so\n        --appendonly yes\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n')),Object(o.b)("p",null,"To launch the docker compose application, on the command line (or via Docker Desktop), clone this repository and run (from the root folder):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"docker compose up\n")),Object(o.b)("p",null,"Let's also launch an instance of the Redis CLI so that we can spy on what ROMS is doing. To do so we'll\nlaunch Redis in monitor mode:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"redis-cli MONITOR\n")),Object(o.b)("h2",{id:"domain-entity"},"Domain Entity"),Object(o.b)("p",null,"We'll have a single class in our application, the ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," class. We'll use lombok to avoid having to\ncreate getters and setters. We'll use the lombok annotations ",Object(o.b)("inlineCode",{parentName:"p"},"@Data"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@RequiredArgsConstructor")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"@AllArgsConstructor"),"."),Object(o.b)("p",null,"Finally, to mark the class as a JSON document, we use the ",Object(o.b)("inlineCode",{parentName:"p"},"@Document")," annotation."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.redis.om.documents.domain;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.geo.Point;\nimport org.springframework.data.redis.core.index.Indexed;\n\nimport com.redis.om.spring.annotations.Document;\nimport com.redis.om.spring.annotations.Searchable;\n\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\n\n@Data\n@RequiredArgsConstructor(staticName = "of")\n@AllArgsConstructor(access = AccessLevel.PROTECTED)\n@Document\npublic class Company {\n  @Id\n  private String id;\n\n  @NonNull\n  @Searchable\n  private String name;\n\n  @Indexed\n  private Set<String> tags = new HashSet<String>();\n\n  @NonNull\n  private String url;\n\n  @NonNull\n  @Indexed\n  private Point location;\n\n  @NonNull\n  @Indexed\n  private Integer numberOfEmployees;\n\n  @NonNull\n  @Indexed\n  private Integer yearFounded;\n\n  private boolean publiclyListed;\n}\n')),Object(o.b)("p",null,"Note that it has a ",Object(o.b)("inlineCode",{parentName:"p"},"@Document")," annotation on its type and a property named ",Object(o.b)("inlineCode",{parentName:"p"},"id")," that is annotated with ",Object(o.b)("inlineCode",{parentName:"p"},"org.springframework.data.annotation.Id"),".\nThose two items are responsible for creating the actual key used to persist the JSON document in Redis."),Object(o.b)("p",null,"Our company POJO consists of a ",Object(o.b)("inlineCode",{parentName:"p"},"name")," and ",Object(o.b)("inlineCode",{parentName:"p"},"url")," ",Object(o.b)("inlineCode",{parentName:"p"},"String")," properties, a ",Object(o.b)("inlineCode",{parentName:"p"},"Set")," of ",Object(o.b)("inlineCode",{parentName:"p"},"Strings")," representing a set of ",Object(o.b)("inlineCode",{parentName:"p"},"tags"),", a\n",Object(o.b)("inlineCode",{parentName:"p"},"org.springframework.data.geo.Point")," representing a Geo ",Object(o.b)("inlineCode",{parentName:"p"},"location")," for our company's headquarters, two ",Object(o.b)("inlineCode",{parentName:"p"},"Integer"),"s for the ",Object(o.b)("inlineCode",{parentName:"p"},"numberOfEmployees"),"\nand the ",Object(o.b)("inlineCode",{parentName:"p"},"yearFounded")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"boolean")," as to whether the company is ",Object(o.b)("inlineCode",{parentName:"p"},"publiclyListed"),"."),Object(o.b)("h2",{id:"redis-om-spring-document-repositories"},"Redis OM Spring Document Repositories"),Object(o.b)("p",null,"Working with Redis OM Spring Document Repositories lets you seamlessly convert and store domain objects in Redis JSON keys,\napply custom mapping strategies, and use secondary indexes maintained by RediSearch."),Object(o.b)("p",null,"To create the component responsible for storage and retrieval, we need to define a repository interface.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"RedisDocumentRepository")," extends the familiar ",Object(o.b)("inlineCode",{parentName:"p"},"PagingAndSortingRepository")," from the core ",Object(o.b)("inlineCode",{parentName:"p"},"org.springframework.data.repository")," package."),Object(o.b)("p",null,"Let's create a basic repository under ",Object(o.b)("inlineCode",{parentName:"p"},"src/main/java/com/redis/om/documents/repositories")," with the contents shown:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"package com.redis.om.documents.repositories;\n\nimport com.redis.om.documents.domain.Company;\nimport com.redis.om.spring.repository.RedisDocumentRepository;\n\npublic interface CompanyRepository extends RedisDocumentRepository<Company, String> {\n}\n")),Object(o.b)("p",null,"The empty repository declaration is all we need to get basic CRUD functionality/pagination and sorting for our POJOs."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CompanyRepository")," extends the ",Object(o.b)("inlineCode",{parentName:"p"},"RedisDocumentRepository")," interface. The type of entity and ID that it works with,\n",Object(o.b)("inlineCode",{parentName:"p"},"Company")," and ",Object(o.b)("inlineCode",{parentName:"p"},"String"),", are specified in the generic parameters on ",Object(o.b)("inlineCode",{parentName:"p"},"RedisDocumentRepository"),". By extending\n",Object(o.b)("inlineCode",{parentName:"p"},"PagingAndSortingRepository"),", which itself extends ",Object(o.b)("inlineCode",{parentName:"p"},"CrudRepository"),", our ",Object(o.b)("inlineCode",{parentName:"p"},"CompanyRepository")," inherits several methods\nfor working with Company persistence, including methods for saving, deleting, and finding Company entities."),Object(o.b)("h2",{id:"pre-populating-the-database"},"Pre-populating the Database"),Object(o.b)("p",null,"Let's add a couple of ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," POJOs to Redis so that we can have some data to play with and at the same time\nget to undertstand how ROMS serializes POJOs to JSON."),Object(o.b)("p",null,"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"RomsDocumentsApplication")," class to include the newly created ",Object(o.b)("inlineCode",{parentName:"p"},"CompanyRepository")," using the ",Object(o.b)("inlineCode",{parentName:"p"},"@Autowired"),"\nannotation. Then we'll use a ",Object(o.b)("inlineCode",{parentName:"p"},"CommandLineRunner")," ",Object(o.b)("inlineCode",{parentName:"p"},"@Bean")," annotated method to create two ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," POJOs and\nsave them to the database."),Object(o.b)("p",null,"In the ",Object(o.b)("inlineCode",{parentName:"p"},"CommandLineRunner")," we take the following steps:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Use the repository ",Object(o.b)("inlineCode",{parentName:"li"},"deleteAll")," method to clear the database (be careful with this is production! \ud83d\ude40)"),Object(o.b)("li",{parentName:"ul"},"Create two ",Object(o.b)("inlineCode",{parentName:"li"},"Company")," instances; one for Redis and one for Microsoft. Including name, URL, Geo Location, number\nof employees, year established, as well a set of tags."),Object(o.b)("li",{parentName:"ul"},"Use the repository ",Object(o.b)("inlineCode",{parentName:"li"},"save")," method passing each of the created POJOs.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.redis.om.documents;\n\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.geo.Point;\n\nimport com.redis.om.documents.domain.Company;\nimport com.redis.om.documents.repositories.CompanyRepository;\nimport com.redis.om.spring.annotations.EnableRedisDocumentRepositories;\n\n@SpringBootApplication\n@Configuration\n@EnableRedisDocumentRepositories(basePackages = "com.redis.om.documents.*")\npublic class RomsDocumentsApplication {\n\n  @Autowired\n  CompanyRepository companyRepo;\n\n  @Bean\n  CommandLineRunner loadTestData() {\n    return args -> {\n      companyRepo.deleteAll();\n      Company redis = Company.of("Redis", "https://redis.com", new Point(-122.066540, 37.377690), 526, 2011);\n      redis.setTags(Set.of("fast", "scalable", "reliable"));\n\n      Company microsoft = Company.of("Microsoft", "https://microsoft.com", new Point(-122.124500, 47.640160), 182268, 1975);\n      microsoft.setTags(Set.of("innovative", "reliable"));\n\n      companyRepo.save(redis);\n      companyRepo.save(microsoft);\n    };\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(RomsDocumentsApplication.class, args);\n  }\n\n}\n')),Object(o.b)("p",null,"Since we are using Spring Boot DevTools, if you already had the application running, it should have restarted/reloaded. If\nnot, use the ",Object(o.b)("inlineCode",{parentName:"p"},"mvn")," command to launch the application:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./mvnw spring-boot:run\n")),Object(o.b)("p",null,"If every goes as expected, you should see the familiar Spring Boot banner fly by:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"[INFO] --- spring-boot-maven-plugin:2.6.0-M1:run (default-cli) @ roms-documents ---\n[INFO] Attaching agents: []\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::             (v2.6.0-M1)\n\n2021-11-30 09:45:58.094  INFO 36380 --- [  restartedMain] c.r.o.d.RomsDocumentsApplication         : Starting RomsDocumentsApplication using Java 11.0.9 on BSB.lan with PID 36380 (/Users/bsb/Code/module-clients/java/high-level/redis-om/redis-om-spring/demos/roms-documents/target/classes started by briansam-bodden in /Users/bsb/Code/module-clients/java/high-level/redis-om/redis-om-spring/demos/roms-documents)\n")),Object(o.b)("h2",{id:"wheres-our-data"},"Where's our data?"),Object(o.b)("p",null,"If you were watching the Redis CLI monitor you should have seen a barrage of output fly by. Let's break it down\nand inspect it using another Redis CLI so as to understand the inner workings of the system."),Object(o.b)("h3",{id:"redisearch-indices"},"RediSearch Indices"),Object(o.b)("p",null,"At the top you should have seen the ",Object(o.b)("inlineCode",{parentName:"p"},"FT.CREATE")," command which using the annotations in our POJO determined a RediSearch\nindex recipe. Since our POJO is annotated with ",Object(o.b)("inlineCode",{parentName:"p"},"@Document")," we get a RediSearch index ",Object(o.b)("inlineCode",{parentName:"p"},"ON JSON")," against any keys starting\nwith ",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company:")," (which is the default key prefix for Spring Data Redis and also for ROMS):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1638291270.881079 [0 172.19.0.1:63378] "FT.CREATE" "CompanyIdx" "ON" "JSON" "PREFIX" "1" "com.redis.om.documents.domain.Company:" "SCHEMA" "$.name" "AS" "name" "TEXT" "$.tags[*]" "AS" "tags" "TAG" "$.location" "AS" "location" "GEO" "$.numberOfEmployees" "AS" "numberOfEmployees" "NUMERIC" "$.yearFounded" "AS" "yearFounded" "NUMERIC"\n')),Object(o.b)("p",null,"ROMS uses the POJO fields annotated with ",Object(o.b)("inlineCode",{parentName:"p"},"@Indexed")," or ",Object(o.b)("inlineCode",{parentName:"p"},"@Searchable")," to build the index schema. In the case of the ",Object(o.b)("inlineCode",{parentName:"p"},"Company"),' POJO\nwe have name propery annotated as "searchable" which means we get full-text search capabilities over that field. This is reflected\nin the schema field definition ',Object(o.b)("inlineCode",{parentName:"p"},"$.name AS name TEXT"),"."),Object(o.b)("p",null,"On the other hand the field ",Object(o.b)("inlineCode",{parentName:"p"},"tags"),' is annotated as "indexable" which means we get an index field of type TAG, meaning\nthat we can search for Companies by the exact value of the field. This is again, reflected in the schema field definition: ',Object(o.b)("inlineCode",{parentName:"p"},"$.tags[*] AS tags TAG")),Object(o.b)("p",null,"Spring Data Redis creates a SET to maintain primary keys for our entities, ROMS inherits this functionality from SDR. The ",Object(o.b)("inlineCode",{parentName:"p"},"DEL"),"\ncommand following the index creation is triggered because of the call to ",Object(o.b)("inlineCode",{parentName:"p"},"companyRepo.deleteAll();")," in our data loading method. If we\nhad any saved objects already we would also see calls to delete those individual instances."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1638291270.936493 [0 172.19.0.1:63378] "DEL" "com.redis.om.documents.domain.Company"\n')),Object(o.b)("p",null,"Finally, for each of the ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," POJOs we should see a sequence of REDIS commands like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1638291270.958384 [0 172.19.0.1:63378] "SISMEMBER" "com.redis.om.documents.domain.Company" "01FNRW9V98CYQMV2YAB7M4KFGQ"\n1638291270.966868 [0 172.19.0.1:63378] "JSON.SET" "com.redis.om.documents.domain.Company:01FNRW9V98CYQMV2YAB7M4KFGQ" "." "{\\"id\\":\\"01FNRW9V98CYQMV2YAB7M4KFGQ\\",\\"name\\":\\"Redis\\",\\"tags\\":[\\"reliable\\",\\"fast\\",\\"scalable\\"],\\"url\\":\\"https://redis.com\\",\\"location\\":\\"-122.06654,37.37769\\",\\"numberOfEmployees\\":526,\\"yearFounded\\":2011,\\"publiclyListed\\":false}"\n1638291270.970030 [0 172.19.0.1:63378] "SADD" "com.redis.om.documents.domain.Company" "01FNRW9V98CYQMV2YAB7M4KFGQ"\n')),Object(o.b)("p",null,"The first line checks whether the object already exists in the Redis SET of primary keys using the ",Object(o.b)("inlineCode",{parentName:"p"},"SISMEMBER")," command. Then,\nthe RedisJSON ",Object(o.b)("inlineCode",{parentName:"p"},"JSON.SET")," commands is used to save the JSON serialization of the entity. Once that operation succeeds, the\n",Object(o.b)("inlineCode",{parentName:"p"},"id")," property of the object is addded to the primary keys set using the ",Object(o.b)("inlineCode",{parentName:"p"},"SADD")," command."),Object(o.b)("p",null,"Let's inspect the data using the Redis CLI. We'll start by listing the keys prefixed with ",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'127.0.0.1:6379> SCAN 0 MATCH com.redis.om.documents.domain.Company*\n1) "0"\n2) 1) "com.redis.om.documents.domain.Company:01FNRW9V98CYQMV2YAB7M4KFGQ"\n   2) "com.redis.om.documents.domain.Company:01FNRW9V9VFNG0MQCJDXZPEG3H"\n   3) "com.redis.om.documents.domain.Company"\n')),Object(o.b)("p",null,"We have 3 matches, one for each of the ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," POJOs created plus the Redis SET for the primary keys.\nLet's inspect some of the values."),Object(o.b)("p",null,"Let's check what type of data structure is stored in the ",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company")," key:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'127.0.0.1:6379> TYPE "com.redis.om.documents.domain.Company"\nset\n')),Object(o.b)("p",null,"Knowing that it is a Redis SET, let inspect it's contents using the ",Object(o.b)("inlineCode",{parentName:"p"},"SMEMBERS")," command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'127.0.0.1:6379> SMEMBERS "com.redis.om.documents.domain.Company"\n1) "01FNRW9V9VFNG0MQCJDXZPEG3H"\n2) "01FNRW9V98CYQMV2YAB7M4KFGQ"\n')),Object(o.b)("p",null,"The set contains all the Ids of our Companies. Now, let's investigate the  ",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company:01FNRW9V98CYQMV2YAB7M4KFGQ")," key:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'127.0.0.1:6379> TYPE "com.redis.om.documents.domain.Company:01FNRW9V98CYQMV2YAB7M4KFGQ"\nReJSON-RL\n')),Object(o.b)("p",null,"The Redis datatype stored is a ",Object(o.b)("inlineCode",{parentName:"p"},"ReJSON-RL")," (a Redis JSON document). Let's check its contents using the ",Object(o.b)("inlineCode",{parentName:"p"},"JSON.GET")," command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'127.0.0.1:6379> JSON.GET "com.redis.om.documents.domain.Company:01FNRW9V98CYQMV2YAB7M4KFGQ"\n"{\\"id\\":\\"01FNRW9V98CYQMV2YAB7M4KFGQ\\",\\"name\\":\\"Redis\\",\\"tags\\":[\\"reliable\\",\\"fast\\",\\"scalable\\"],\\"url\\":\\"https://redis.com\\",\\"location\\":\\"-122.06654,37.37769\\",\\"numberOfEmployees\\":526,\\"yearFounded\\":2011,\\"publiclyListed\\":false}"\n')),Object(o.b)("p",null,"With our new gained understanding of how ROMS serialized our ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," POJOs, let's move on to expanding the powers of\nour ",Object(o.b)("inlineCode",{parentName:"p"},"CompanyRepository")," to go beyond CRUD."),Object(o.b)("h3",{id:"create-simple-dynamic-queries"},"Create Simple Dynamic Queries"),Object(o.b)("p",null,"ROMS most compelling feature is the ability to create repository implementations automatically, at runtime,\nfrom a repository interface."),Object(o.b)("p",null,"Let's start with a simple method declaration in ",Object(o.b)("inlineCode",{parentName:"p"},"CompanyRepository")," that will find a unique instance of ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," given\nthe company name."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"package com.redis.om.documents.repositories;\n\nimport java.util.Optional;\n// ... other imports ommitted ...\n\npublic interface CompanyRepository extends RedisDocumentRepository<Company, String> {\n  // find one by property\n  Optional<Company> findOneByName(String name);\n}\n")),Object(o.b)("p",null,"ROMS uses the method name, parameters and return type to determine the correct query to generate and how to\npackage and return a result."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"findOneByName")," return an ",Object(o.b)("inlineCode",{parentName:"p"},"Optional")," of ",Object(o.b)("inlineCode",{parentName:"p"},"Company")," this tells ROMS to return a null payload if the entity is not found. The ",Object(o.b)("inlineCode",{parentName:"p"},"findOne")," part\nalso reinforces that even if there are multiple results we are only interested in getting one. ROMS parses the method name\nto detemined the number of expected parameters, the ",Object(o.b)("inlineCode",{parentName:"p"},"ByName")," portion of the method tell us we expect 1 single parameter named ",Object(o.b)("inlineCode",{parentName:"p"},"name"),"."),Object(o.b)("h3",{id:"testing-controller"},"Testing Controller"),Object(o.b)("p",null,"Let's create a REST controller to test the ",Object(o.b)("inlineCode",{parentName:"p"},"findOneByName")," method. Create the ",Object(o.b)("inlineCode",{parentName:"p"},"CompanyController")," under the package\n",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.documents.controllers")," as shown:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.redis.om.documents.controllers;\n\nimport java.util.Optional;\nimport java.util.Set;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.redis.om.documents.domain.Company;\nimport com.redis.om.documents.repositories.CompanyRepository;\n\n@RestController\n@RequestMapping("/api/companies")\npublic class CompanyController {\n  @Autowired\n  CompanyRepository repository;\n\n  @GetMapping("name/{name}")\n  Optional<Company> byName(@PathVariable("name") String name) {\n    return repository.findOneByName(name);\n  }\n}\n')),Object(o.b)("p",null,"In our controller, we include our ",Object(o.b)("inlineCode",{parentName:"p"},"CompanyRepository")," and create simple method to respond to a GET request at\n",Object(o.b)("inlineCode",{parentName:"p"},"/api/companies/name/{name}")," where ",Object(o.b)("inlineCode",{parentName:"p"},"{name}")," would be the string parameter we are passing as the ",Object(o.b)("inlineCode",{parentName:"p"},"name")," to find."),Object(o.b)("p",null,"Let's test the endpoint using CURL by passing it the exact company name ",Object(o.b)("inlineCode",{parentName:"p"},"Redis"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'\u279c curl --location --request GET \'http://localhost:8080/api/companies/name/Redis\'\n{"id":"01FNRW9V98CYQMV2YAB7M4KFGQ","name":"Redis","tags":["reliable","fast","scalable"],"url":"https://redis.com","location":{"x":-122.06654,"y":37.37769},"numberOfEmployees":526,"yearFounded":2011,"publiclyListed":false}\n')),Object(o.b)("p",null,"Let's format the resulting JSON:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "01FNRW9V98CYQMV2YAB7M4KFGQ",\n  "name": "Redis",\n  "tags": [\n    "reliable",\n    "fast",\n    "scalable"\n  ],\n  "url": "https://redis.com",\n  "location": {\n    "x": -122.06654,\n    "y": 37.37769\n  },\n  "numberOfEmployees": 526,\n  "yearFounded": 2011,\n  "publiclyListed": false\n}\n')),Object(o.b)("p",null,"Inspecting the Redis CLI Monitor shows the resulting RediSearch query:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1638344903.218982 [0 172.19.0.1:63410] "FT.SEARCH" "CompanyIdx" "@name:Redis "\n')),Object(o.b)("p",null,"Notice that you can use ",Object(o.b)("inlineCode",{parentName:"p"},"redis")," (all lowercase) or ",Object(o.b)("inlineCode",{parentName:"p"},"rEdI")," and you will get a match for ",Object(o.b)("inlineCode",{parentName:"p"},"Redis"),", if you go below 4\ncharacters, say you try ",Object(o.b)("inlineCode",{parentName:"p"},"red")," or ",Object(o.b)("inlineCode",{parentName:"p"},"RED")," you will get no hits. RediSearch limits the minimun string match size to 4\ncharacters to prevent potentially millions of results being returned."),Object(o.b)("h3",{id:"storing-and-querying-geospatial-data"},"Storing and Querying Geospatial Data"),Object(o.b)("p",null,"ROMS supports GeoJSON types to store geospatial data. By using the ",Object(o.b)("inlineCode",{parentName:"p"},"near")," keyword in our queries,\nwe tell ROMS to expect a ",Object(o.b)("inlineCode",{parentName:"p"},"Point"),"  (",Object(o.b)("inlineCode",{parentName:"p"},"org.springframework.data.geo.Point"),") and a\n",Object(o.b)("inlineCode",{parentName:"p"},"Distance"),"  (",Object(o.b)("inlineCode",{parentName:"p"},"org.springframework.data.geo.Distance"),") types as parameters."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// geospatial query\nIterable<Company> findByLocationNear(Point point, Distance distance);\n")),Object(o.b)("p",null,"Let's add a test endpoint to our controller for our Geo query:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'@GetMapping("near")\nIterable<Company> byLocationNear(//\n    @RequestParam("lat") double lat, //\n    @RequestParam("lon") double lon, //\n    @RequestParam("d") double distance) {\n  return repository.findByLocationNear(new Point(lon, lat), new Distance(distance, Metrics.MILES));\n}\n')),Object(o.b)("p",null,"In our controller method we take 2 request parameters; latitude ",Object(o.b)("inlineCode",{parentName:"p"},"lat"),", longitude ",Object(o.b)("inlineCode",{parentName:"p"},"lon")," and a distance ",Object(o.b)("inlineCode",{parentName:"p"},"d")," (in miles).\nWe use these values to contruct the ",Object(o.b)("inlineCode",{parentName:"p"},"Point")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Distance")," needed for the repository ",Object(o.b)("inlineCode",{parentName:"p"},"findByLocationNear")," method."),Object(o.b)("p",null,"Let's test the method with CURL, using a location near Redis' Mountain View headquarters:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'\u279c curl --location --request GET \'http://localhost:8080/api/companies/near?lat=37.384&lon=-122.064&d=30\'\n[{"id":"01FNRW9V98CYQMV2YAB7M4KFGQ","name":"Redis","tags":["reliable","fast","scalable"],"url":"https://redis.com","location":{"x":-122.06654,"y":37.37769},"numberOfEmployees":526,"yearFounded":2011,"publiclyListed":false}]\n')),Object(o.b)("p",null,"Formatting the JSON result we get a JSON array containing one entry: ",Object(o.b)("inlineCode",{parentName:"p"},"Redis"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": "01FNRW9V98CYQMV2YAB7M4KFGQ",\n    "name": "Redis",\n    "tags": [\n      "reliable",\n      "fast",\n      "scalable"\n    ],\n    "url": "https://redis.com",\n    "location": {\n      "x": -122.06654,\n      "y": 37.37769\n    },\n    "numberOfEmployees": 526,\n    "yearFounded": 2011,\n    "publiclyListed": false\n  }\n]\n')),Object(o.b)("p",null,"Inspecting the Redis CLI Monitor shows the resulting RediSearch query:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1638344951.451871 [0 172.19.0.1:63410] "FT.SEARCH" "CompanyIdx" "@location:[-122.064 37.384 30.0 mi] "\n')),Object(o.b)("h3",{id:"native-redisearch-queries"},"Native RediSearch Queries"),Object(o.b)("p",null,"There might be occassions where you just need to reach for the raw querying power of RediSearch\n(just like when you need raw SQL over JPA). For these scenario, we provide the ",Object(o.b)("inlineCode",{parentName:"p"},"@Query"),"\n(",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.spring.annotations.Query"),") and the ",Object(o.b)("inlineCode",{parentName:"p"},"@Aggregation")," (",Object(o.b)("inlineCode",{parentName:"p"},"com.redis.om.spring.annotations.Aggregation"),")\nannotations. These annotations expose the raw querying API provided by the ",Object(o.b)("inlineCode",{parentName:"p"},"JRediSearch")," library. ROMS adds parameter\nparsing and results mapping so you can use raw RediSearch queries and aggregations in your repositories."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// find by tag field, using JRediSearch "native" annotation\n@Query("@tags:{$tags}")\nIterable<Company> findByTags(@Param("tags") Set<String> tags);\n')),Object(o.b)("p",null,"Let's test it with CURL:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'\u279c curl --location --request GET \'http://localhost:8080/api/companies/tags?tags=reliable\'\n[{"id":"01FNTF7QKAGCQYMWWBV3044DHW","name":"Redis","tags":["reliable","fast","scalable"],"url":"https://redis.com","location":{"x":-122.06654,"y":37.37769},"numberOfEmployees":526,"yearFounded":2011,"publiclyListed":false},{"id":"01FNTF7QKXJ1CNZERHADN91YBR","name":"Microsoft","tags":["reliable","innovative"],"url":"https://microsoft.com","location":{"x":-122.1245,"y":47.64016},"numberOfEmployees":182268,"yearFounded":1975,"publiclyListed":false}]\n')),Object(o.b)("p",null,"Formatting the JSON we can see that the results include companies with the tag ",Object(o.b)("inlineCode",{parentName:"p"},"reliable"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": "01FNTF7QKAGCQYMWWBV3044DHW",\n    "name": "Redis",\n    "tags": [\n      "reliable",\n      "fast",\n      "scalable"\n    ],\n    "url": "https://redis.com",\n    "location": {\n      "x": -122.06654,\n      "y": 37.37769\n    },\n    "numberOfEmployees": 526,\n    "yearFounded": 2011,\n    "publiclyListed": false\n  },\n  {\n    "id": "01FNTF7QKXJ1CNZERHADN91YBR",\n    "name": "Microsoft",\n    "tags": [\n      "reliable",\n      "innovative"\n    ],\n    "url": "https://microsoft.com",\n    "location": {\n      "x": -122.1245,\n      "y": 47.64016\n    },\n    "numberOfEmployees": 182268,\n    "yearFounded": 1975,\n    "publiclyListed": false\n  }\n]\n')),Object(o.b)("p",null,"Inspecting the Redis CLI Monitor we see the RediSearch query that produced the results:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1638345120.384300 [0 172.19.0.1:63412] "FT.SEARCH" "CompanyIdx" "@tags:{reliable} "\n')),Object(o.b)("h3",{id:"numeric-queries"},"Numeric Queries"),Object(o.b)("p",null,"Just like other Spring Data based libraries, ROMS can handle a variety of queries using\nlogic and numerical operators like ",Object(o.b)("inlineCode",{parentName:"p"},"between"),", ",Object(o.b)("inlineCode",{parentName:"p"},"startingWith"),", ",Object(o.b)("inlineCode",{parentName:"p"},"greaterThan"),", ",Object(o.b)("inlineCode",{parentName:"p"},"lessThanOrEquals")," and many\nmore."),Object(o.b)("p",null,"Below are some more examples of what's possible:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"// find by numeric property\nIterable<Company> findByNumberOfEmployees(int noe);\n\n// find by numeric property range\nIterable<Company> findByNumberOfEmployeesBetween(int noeGT, int noeLT);\n\n// starting with/ending with\nIterable<Company> findByNameStartingWith(String prefix);\n")),Object(o.b)("h3",{id:"whats-next"},"What's Next"),Object(o.b)("p",null,"This was but a brief tour of the capabilities of Redis OM Spring (ROMS). In the next installment we'll cover how\nROMS extends Spring Data Redis Redis Hash mapping to make it even better."))}p.isMDXComponent=!0},337:function(e,n,t){"use strict";var a=t(0),i=t.n(a),o=t(335),r=t(342);t(336),t(59);n.a=function(e){var n=i.a.useState(!1),t=n[0],a=n[1];return i.a.createElement("div",{className:"ri-container"},i.a.createElement("div",{className:"ri-description-short"},i.a.createElement("div",{className:"ri-icon"},i.a.createElement("span",{className:"fe fe-zap"})),i.a.createElement("div",{className:"ri-detail"},i.a.createElement("div",{className:"ri-title"},i.a.createElement("a",{href:e.page},e.title)),i.a.createElement("div",{className:"ri-description"},e.description,i.a.Children.count(e.children)>0&&i.a.createElement("span",{className:"ri-more fe fe-more-horizontal",onClick:function(){return a(!t)}})))),t&&i.a.createElement("div",{className:"ri-description-long"},i.a.createElement(o.a,{components:r.a},e.children)))}},338:function(e,n,t){"use strict";var a=t(0),i=t(339);n.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},339:function(e,n,t){"use strict";var a=t(0),i=Object(a.createContext)(void 0);n.a=i},340:function(e,n,t){"use strict";var a=t(0),i=t.n(a),o=t(338),r=t(343),s=t(60),l=t.n(s),c=37,p=39;n.a=function(e){var n=e.lazy,t=e.block,s=e.defaultValue,d=e.values,m=e.groupId,b=e.className,u=Object(o.a)(),h=u.tabGroupChoices,g=u.setTabGroupChoices,O=Object(a.useState)(s),j=O[0],N=O[1],y=a.Children.toArray(e.children);if(null!=m){var f=h[m];null!=f&&f!==j&&d.some((function(e){return e.value===f}))&&N(f)}var C=function(e){N(e),null!=m&&g(m,e)},R=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":t},b)},d.map((function(e){var n=e.value,t=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===n,className:Object(r.a)("tabs__item",l.a.tabItem,{"tabs__item--active":j===n}),key:n,ref:function(e){return R.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case p:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case c:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(R,e.target,e)},onFocus:function(){return C(n)},onClick:function(){C(n)}},t)}))),n?Object(a.cloneElement)(y.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,n){return Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==j})}))))}},341:function(e,n,t){"use strict";var a=t(3),i=t(0),o=t.n(i);n.a=function(e){var n=e.children,t=e.hidden,i=e.className;return o.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:i}),n)}},556:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/redis-om-spring-tut-001-3ff39bb0a57c0de114998dab1bd3d7c2.png"}}]);