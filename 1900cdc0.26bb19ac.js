(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{250:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(r),b=n,m=u["".concat(s,".").concat(b)]||u[b]||p[b]||i;return r?a.a.createElement(m,o(o({ref:t},c),{},{components:r})):a.a.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},96:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return d}));var n=r(3),a=r(7),i=(r(0),r(250)),s={id:"index-redisgears",title:"RedisGears Tutorial",sidebar_label:"RedisGears Tutorial",slug:"/howtos/redisgears"},o={unversionedId:"howtos/redisgears/index-redisgears",id:"howtos/redisgears/index-redisgears",isDocsHomePage:!1,title:"RedisGears Tutorial",description:"Author: Ajeet Singh Raina",source:"@site/docs/howtos/redisgears/index-redisgears.mdx",slug:"/howtos/redisgears",permalink:"/howtos/redisgears",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisgears/index-redisgears.mdx",version:"current",sidebar_label:"RedisGears Tutorial",sidebar:"docs",previous:{title:"RedisBloom Tutorial",permalink:"/howtos/redisbloom"},next:{title:"RedisAI  Tutorial",permalink:"/howtos/redisai"}},l=[{value:"Step 1. Installing RedisGears",id:"step-1-installing-redisgears",children:[]},{value:"Step 2. Verifying if RedisGears module is enabled:",id:"step-2-verifying-if-redisgears-module-is-enabled",children:[]},{value:"Step 3. Create a &quot;wordcount&quot; Python script",id:"step-3-create-a-wordcount-python-script",children:[]},{value:"Step 4. Execute the CLI",id:"step-4-execute-the-cli",children:[]},{value:"References",id:"references",children:[]}],c={toc:l};function d(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Author: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://twitter.com/ajeetsraina"}),"Ajeet Singh Raina")),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://redis.com/modules/redis-gears/"}),"RedisGears")," is an engine for data processing in Redis. RedisGears supports batch and event-driven processing for Redis data. To use RedisGears, you write functions that describe how your data should be processed. You then submit this code to your Redis deployment for remote execution."),Object(i.b)("p",null,"RedisGears is implemented by a Redis module. To use RedisGears, you\u2019ll need to make sure that your Redis deployment has the module installed."),Object(i.b)("h3",{id:"step-1-installing-redisgears"},"Step 1. Installing RedisGears"),Object(i.b)("p",null,"Before you can use RedisGears, you have to install the RedisGears module. We will be using redislabs/redismod Docker image for this demonsration"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"})," docker run -d -p 6379:6379 redislabs/redismod\n")),Object(i.b)("h3",{id:"step-2-verifying-if-redisgears-module-is-enabled"},"Step 2. Verifying if RedisGears module is enabled:"),Object(i.b)("p",null,"You can directly use ",Object(i.b)("inlineCode",{parentName:"p"},"redis-cli"),' CLI to verify if RedisGears module("rg") is properly loaded or not.'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"})," redis-cli\n redis-cli\n 127.0.0.1:6379> info modules\n # Modules\n ..\n module:name=rg,ver=10006,api=1,filters=0,usedby=[],using=[ai],options=[]\n")),Object(i.b)("h3",{id:"step-3-create-a-wordcount-python-script"},'Step 3. Create a "wordcount" Python script'),Object(i.b)("p",null,"To demonstrate RedisGears functionality, we will be performing a unique word count on the existing strings.\nWe will be writing a RedisGears function to do this. "),Object(i.b)("p",null,"Open a file called wordcount.py, and add the following code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"})," gb = GearsBuilder()\n gb.map(lambda x: x['value'])     # map each key object to its string value\n gb.flatmap(lambda x: x.split())  # split each string into a list of words\n gb.countby()                     # run a count-unique on these words\n gb.run()\n")),Object(i.b)("h3",{id:"step-4-execute-the-cli"},"Step 4. Execute the CLI"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"})," redis-cli rg.pyexecute \"`cat wordcount.py`\"\n  1) 1) \"{'key': 'world', 'value': 1}\"\n  2) \"{'key': 'galaxy', 'value': 1}\"\n  3) \"{'key': 'hello', 'value': 3}\"\n  4) \"{'key': 'universe', 'value': 1}\"\n 2) (empty array)\n")),Object(i.b)("p",null,"The results here show the number of occurences of each word in all of our strings. So, we\u2019ve effectively processed the data in our Redis database all at once, in a batch."),Object(i.b)("h3",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/howtos/frauddetection"}),"How to build a Fraud Detection System using RedisGears and RedisBloom")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/explore/redisinsight/redisgears"}),"Writing Your Serverless function using RedisGears Browser Tool")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://redis.com/modules/redis-gears/"}),"RedisGears Module"))))}d.isMDXComponent=!0}}]);