"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[3551],{85162:function(e,t,n){n.d(t,{Z:function(){return o}});var i=n(67294),r=n(86010),a="tabItem_Ymn6";function o(e){var t=e.children,n=e.hidden,o=e.className;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,o),hidden:n},t)}},65488:function(e,t,n){n.d(t,{Z:function(){return m}});var i=n(87462),r=n(67294),a=n(86010),o=n(72389),s=n(67392),l=n(7094),d=n(12466),u="tabList__CuJ",p="tabItem_LNqP";function c(e){var t,n,o=e.lazy,c=e.block,m=e.defaultValue,g=e.values,h=e.groupId,f=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,s.l)(v,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:k[0].props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,l.U)(),b=w.tabGroupChoices,R=w.setTabGroupChoices,C=(0,r.useState)(y),T=C[0],G=C[1],x=[],P=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var S=b[h];null!=S&&S!==T&&v.some((function(e){return e.value===S}))&&G(S)}var E=function(e){var t=e.currentTarget,n=x.indexOf(t),i=v[n].value;i!==T&&(P(t),G(i),null!=h&&R(h,String(i)))},_=function(e){var t,n=null;switch(e.key){case"ArrowRight":var i,r=x.indexOf(e.currentTarget)+1;n=null!=(i=x[r])?i:x[0];break;case"ArrowLeft":var a,o=x.indexOf(e.currentTarget)-1;n=null!=(a=x[o])?a:x[x.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,a.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":c},f)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return x.push(e)},onKeyDown:_,onFocus:E,onClick:E},o,{className:(0,a.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(k.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,o.Z)();return r.createElement(c,(0,i.Z)({key:String(t)},e))}},1203:function(e,t,n){n.d(t,{Z:function(){return g}});var i=n(67294),r=n(3905),a=n(48811),o="riContainer_bco2",s="riDescriptionShort_E27B",l="riDetail_wzFs",d="riIcon_yDou",u="riTitle_x6vI",p="riDescription_RDnu",c="riMore_apRP",m=n(86010),g=function(e){var t=i.useState(!1),n=t[0],g=t[1];return i.createElement("a",{href:e.page,className:o},i.createElement("div",{className:s},i.createElement("div",{className:d},i.createElement("span",{className:"fe fe-zap"})),i.createElement("div",{className:l},i.createElement("div",{className:u},i.createElement("a",{href:e.page},e.title)),i.createElement("div",{className:p},e.description,i.Children.count(e.children)>0&&i.createElement("span",{className:(0,m.Z)(c,"fe","fe-more-horizontal"),onClick:function(){return g(!n)}})))),n&&i.createElement("div",{className:"ri-description-long"},i.createElement(r.Zo,{components:a.Z},e.children)))}},20507:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=(n(65488),n(85162),n(44996),n(1203),["components"]),s={id:"index-spring-fixed-window-reactive-gears",title:"Atomicity with Gears",sidebar_label:"Atomicity with Gears",slug:"/develop/java/spring/rate-limiting/fixed-window/reactive-gears"},l=void 0,d={unversionedId:"develop/java/spring/rate-limiting/fixed-window/index-spring-fixed-window-reactive-gears",id:"develop/java/spring/rate-limiting/fixed-window/index-spring-fixed-window-reactive-gears",title:"Atomicity with Gears",description:"Improving atomicity and performance with RedisGears",source:"@site/docs/develop/java/spring/rate-limiting/fixed-window/index-fixed-window-reactive-gears.mdx",sourceDirName:"develop/java/spring/rate-limiting/fixed-window",slug:"/develop/java/spring/rate-limiting/fixed-window/reactive-gears",permalink:"/develop/java/spring/rate-limiting/fixed-window/reactive-gears",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/java/spring/rate-limiting/fixed-window/index-fixed-window-reactive-gears.mdx",tags:[],version:"current",lastUpdatedAt:1655485542,formattedLastUpdatedAt:"6/17/2022",frontMatter:{id:"index-spring-fixed-window-reactive-gears",title:"Atomicity with Gears",sidebar_label:"Atomicity with Gears",slug:"/develop/java/spring/rate-limiting/fixed-window/reactive-gears"},sidebar:"docs",previous:{title:"Atomicity with Lua",permalink:"/develop/java/spring/rate-limiting/fixed-window/reactive-lua"},next:{title:"C",permalink:"/develop/C/"}},u={},p=[{value:"Improving atomicity and performance with RedisGears",id:"improving-atomicity-and-performance-with-redisgears",level:2},{value:"What is RedisGears?",id:"what-is-redisgears",level:3},{value:"A Rate-Limiting RedisGears Function",id:"a-rate-limiting-redisgears-function",level:3},{value:"The <code>rate_limit</code> function",id:"the-rate_limit-function",level:4},{value:"Function Registration",id:"function-registration",level:4},{value:"RedisGears in SpringBoot",id:"redisgears-in-springboot",level:2},{value:"Lettuce Mod",id:"lettuce-mod",level:2},{value:"Accessing Gears Commands in SpringBoot",id:"accessing-gears-commands-in-springboot",level:3},{value:"Registering the Gears function",id:"registering-the-gears-function",level:3},{value:"Modifying the Filter to use the Gears function",id:"modifying-the-filter-to-use-the-gears-function",level:2},{value:"Testing with curl",id:"testing-with-curl",level:2}],c={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"improving-atomicity-and-performance-with-redisgears"},"Improving atomicity and performance with RedisGears"),(0,a.kt)("h3",{id:"what-is-redisgears"},"What is RedisGears?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://oss.redis.com/redisgears/"},"RedisGears"),' is a dynamic server-side data processing engine, where the "server" part is Redis itself.\nRedisGears is distributed as a Redis module. You can start a Redis instance preconfigured with Gears using the official Docker image:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker run -p 6379:6379 redislabs/redisgears:latest\n")),(0,a.kt)("p",null,"Or, as I do most of the time, using the ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/redislabs/redismod/dockerfile"},'"redismod"')," image which include Gears and\nall the other Redis, Inc. supported modules:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker run -p 6379:6379 redislabs/redismod\n")),(0,a.kt)("p",null,"RedisGears was built with the purpose of providing a data processing engine inside of Redis, with more formal semantics\nthan the simpler Lua server-side scripting. Think of it as a more flexible map-reduce engine for Redis.\nIt supports supports transaction, batch, and event-driven processing of Redis data.\nGears allow you to localize computation and data provides a built-in coordinator to facilitate processing\ndistributed data in a clustered environment."),(0,a.kt)("p",null,'In RedisGears, the main unit of processing is the RedisGears function, which can be (currently) written in Python (more languages are being worked on).\nThese functions run on their own thread, separate from Redis\' main thread and can be executed in response to\nkeyspace events or imperatively as a result of external commands.\nThe functions are "registered" (deployed) to the Gears engine, and have an associated name and a registration Id.'),(0,a.kt)("p",null,"During registration we pick a specific reader for our function which defines how the function\ngets its initial data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"KeysReader"),": Redis keys and values."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"KeysOnlyReader"),": Redis keys."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"StreamReader"),": Redis Stream messages."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PythonReader"),": Arbitrary Python generator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ShardsIDReader"),": Shard ID."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CommandReader"),": Command arguments from application client.")),(0,a.kt)("h3",{id:"a-rate-limiting-redisgears-function"},"A Rate-Limiting RedisGears Function"),(0,a.kt)("p",null,"Depending on the reader type, Gear Functions can either be run immediately, on demand, as batch jobs or in an event-driven manner by registering it to trigger automatically on various types of events."),(0,a.kt)("p",null,"The Python function ",(0,a.kt)("inlineCode",{parentName:"p"},"rate_limit")," takes 3 parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key"),": The Redis key backing the counter for a given user."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max_request"),": The request quota for the user."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"expiry"),": The number of seconds in the future to set the counter TTL.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"def rate_limit(key, max_requests, expiry):\n  requests = execute('GET', key)\n  requests = int(requests) if requests else -1\n  max_requests = int(max_requests)\n  expiry = int(expiry)\n\n  if (requests == -1) or (requests < max_requests):\n    with atomic():\n      execute('INCR', key)\n      execute('EXPIRE', key, expiry)\n    return False\n  else:\n    return True\n\n# Function registration\ngb = GB('CommandReader')\ngb.map(lambda x: rate_limit(x[1], x[2], x[3]))\ngb.register(trigger='RateLimiter')\n")),(0,a.kt)("p",null,"Place the script under ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/resources/scripts"),". Now, Let's break it down:"),(0,a.kt)("h4",{id:"the-rate_limit-function"},"The ",(0,a.kt)("inlineCode",{parentName:"h4"},"rate_limit")," function"),(0,a.kt)("p",null,"Similarly to what we did in the previous implementation, we:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Retrieve the current number of requests for the passed ",(0,a.kt)("inlineCode",{parentName:"li"},"key")," by ",(0,a.kt)("inlineCode",{parentName:"li"},"execute"),"-ing the ",(0,a.kt)("inlineCode",{parentName:"li"},"GET")," command."),(0,a.kt)("li",{parentName:"ol"},"Cast the result to an ",(0,a.kt)("inlineCode",{parentName:"li"},"int")," and if not found, default to ",(0,a.kt)("inlineCode",{parentName:"li"},"-1")),(0,a.kt)("li",{parentName:"ol"},"Cast ",(0,a.kt)("inlineCode",{parentName:"li"},"max_requests")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"expiry")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"int")),(0,a.kt)("li",{parentName:"ol"},"If the quota hasn't been exceeded, perform the ",(0,a.kt)("inlineCode",{parentName:"li"},"INCR"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"EXPIRE")," commands in a transactions (",(0,a.kt)("inlineCode",{parentName:"li"},"with atomic():"),")\nand return ",(0,a.kt)("inlineCode",{parentName:"li"},"False")," (no rate limiting - request is allowed)"),(0,a.kt)("li",{parentName:"ol"},"Otherwise, return ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," (deny the request)")),(0,a.kt)("h4",{id:"function-registration"},"Function Registration"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"At the bottom of the script, in the ",(0,a.kt)("inlineCode",{parentName:"li"},"# Function registration")," section, we instantiate the\n",(0,a.kt)("a",{parentName:"li",href:"https://oss.redis.com/redisgears/runtime.html#gearsbuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"GearsBuilder"),"(",(0,a.kt)("inlineCode",{parentName:"a"},"GB"),")")," using the ",(0,a.kt)("inlineCode",{parentName:"li"},"CommandReader"),"\nreader. The ",(0,a.kt)("inlineCode",{parentName:"li"},"GearsBuilder"),' "builds" the context of the function, in parameters, transformations, triggers, etc.'),(0,a.kt)("li",{parentName:"ol"},"We use the ",(0,a.kt)("inlineCode",{parentName:"li"},"map")," method to performs a one-to-one mapping of records to the params of the ",(0,a.kt)("inlineCode",{parentName:"li"},"rate_limit"),"\nfunction via a mapper function callback."),(0,a.kt)("li",{parentName:"ol"},"We can now invoke the ",(0,a.kt)("inlineCode",{parentName:"li"},"register")," action to register the function as an event handler. The event in our case is the\ntrigger ",(0,a.kt)("inlineCode",{parentName:"li"},"'RateLimiter'"),".")),(0,a.kt)("h2",{id:"redisgears-in-springboot"},"RedisGears in SpringBoot"),(0,a.kt)("p",null,"In order to use our RedisGear function from our SpringBoot application we need to do a few things:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Deploy the function to the Redis server"),(0,a.kt)("li",{parentName:"ol"},"Execute the function to get a yay/nay answer on each request")),(0,a.kt)("h2",{id:"lettuce-mod"},"Lettuce Mod"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/lettucemod"},"LettuceMod")," is a Java client for Redis Modules based on Lettuce created by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jruaux"},"Julien Ruaux "),".\nIt supports the following modules in standalone or cluster configurations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RedisGears"),(0,a.kt)("li",{parentName:"ul"},"RedisJSON"),(0,a.kt)("li",{parentName:"ul"},"RediSearch"),(0,a.kt)("li",{parentName:"ul"},"RedisTimeSeries")),(0,a.kt)("p",null,"To use LettuceMod we'll add the dependency to the Maven POM as shown:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n  <groupId>com.redis</groupId>\n  <artifactId>spring-lettucemod</artifactId>\n  <version>1.7.0</version>\n</dependency>\n")),(0,a.kt)("h3",{id:"accessing-gears-commands-in-springboot"},"Accessing Gears Commands in SpringBoot"),(0,a.kt)("p",null,"To access any of the LettuceMod supported modules we will inject a ",(0,a.kt)("inlineCode",{parentName:"p"},"StatefulRedisModulesConnection")," in\nour ",(0,a.kt)("inlineCode",{parentName:"p"},"FixedWindowRateLimiterApplication")," class as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Autowired\nStatefulRedisModulesConnection<String, String> connection;\n")),(0,a.kt)("p",null,"Add the matching import statement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import com.redis.lettucemod.api.StatefulRedisModulesConnection;\n")),(0,a.kt)("h3",{id:"registering-the-gears-function"},"Registering the Gears function"),(0,a.kt)("p",null,"We'll start by writing a function to determine whether the function with the trigger ",(0,a.kt)("inlineCode",{parentName:"p"},"RateLimiter")," has been\nregistered. It takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"Registration"),"s and digs deep to extract the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"trigger")," argument\nusing the Java Streams API:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private Optional<String> getGearsRegistrationIdForTrigger(List<Registration> registrations, String trigger) {\n  return registrations.stream().filter(r -> r.getData().getArgs().get("trigger").equals(trigger)).findFirst().map(Registration::getId);\n}\n')),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"@PostConstruct")," annotated method ",(0,a.kt)("inlineCode",{parentName:"p"},"loadGearsScript")," method:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We retrieve an instance of the ",(0,a.kt)("inlineCode",{parentName:"li"},"RedisGearsCommands")," from the previously injected ",(0,a.kt)("inlineCode",{parentName:"li"},"StatefulRedisModulesConnection")),(0,a.kt)("li",{parentName:"ol"},"We get the currently registered Gears functions via the ",(0,a.kt)("inlineCode",{parentName:"li"},"dumpregistrations")," method"),(0,a.kt)("li",{parentName:"ol"},"We pass the list of registrations to our ",(0,a.kt)("inlineCode",{parentName:"li"},"getGearsRegistrationIdForTrigger")),(0,a.kt)("li",{parentName:"ol"},"If we don't find the registration we proceed to register the function:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Load the function from the classpath into a ",(0,a.kt)("inlineCode",{parentName:"li"},"String")," named ",(0,a.kt)("inlineCode",{parentName:"li"},"py")),(0,a.kt)("li",{parentName:"ul"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"pyexecute")," method passing the ",(0,a.kt)("inlineCode",{parentName:"li"},"py")," script payload")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@PostConstruct\npublic void loadGearsScript() throws IOException {\n  String py = StreamUtils.copyToString(new ClassPathResource("scripts/rateLimiter.py").getInputStream(),\n      Charset.defaultCharset());\n  RedisGearsCommands<String, String> gears = connection.sync();\n  List<Registration> registrations = gears.dumpregistrations();\n\n  Optional<String> maybeRegistrationId = getGearsRegistrationIdForTrigger(registrations, "RateLimiter");\n  if (maybeRegistrationId.isEmpty()) {\n    try {\n      ExecutionResults er = gears.pyexecute(py);\n      if (er.isOk()) {\n        logger.info("RateLimiter.py has been registered");\n      } else if (er.isError()) {\n        logger.error(String.format("Could not register RateLimiter.py -> %s", Arrays.toString(er.getErrors().toArray())));\n      }\n    } catch (RedisCommandExecutionException rcee) {\n      logger.error(String.format("Could not register RateLimiter.py -> %s", rcee.getMessage()));\n    }\n  } else {\n    logger.info("RateLimiter.py has already been registered");\n  }\n}\n')),(0,a.kt)("h2",{id:"modifying-the-filter-to-use-the-gears-function"},"Modifying the Filter to use the Gears function"),(0,a.kt)("p",null,"Next, we'll modify the filter to include the ",(0,a.kt)("inlineCode",{parentName:"p"},"StatefulRedisModulesConnection")," as well as the\nquota; the value that we need to pass to the function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class RateLimiterHandlerFilterFunction implements HandlerFilterFunction<ServerResponse, ServerResponse> {\n\n  private StatefulRedisModulesConnection<String, String> connection;\n  private Long maxRequestPerMinute;\n\n  public RateLimiterHandlerFilterFunction(StatefulRedisModulesConnection<String, String> connection,\n      Long maxRequestPerMinute) {\n    this.connection = connection;\n    this.maxRequestPerMinute = maxRequestPerMinute;\n  }\n")),(0,a.kt)("p",null,"Now we can modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"filter")," method to use the function. Gears functions are invoked by\ntriggering the correct event ",(0,a.kt)("inlineCode",{parentName:"p"},"RateLimiter")," and passing the parameters required by the function;\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),", the quota and the TTL seconds in the future."),(0,a.kt)("p",null,"As we've have done previously, if the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," we let the request through, otherwise\nwe return an ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTP 429"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Mono<ServerResponse> filter(ServerRequest request, HandlerFunction<ServerResponse> next) {\n  int currentMinute = LocalTime.now().getMinute();\n  String key = String.format("rl_%s:%s", requestAddress(request.remoteAddress()), currentMinute);\n\n  RedisGearsCommands<String, String> gears = connection.sync();\n\n  List<Object> results = gears.trigger("RateLimiter", key, Long.toString(maxRequestPerMinute), "59");\n  if (!results.isEmpty() && !Boolean.parseBoolean((String) results.get(0))) {\n    return next.handle(request);\n  } else {\n    return ServerResponse.status(TOO_MANY_REQUESTS).build();\n  }\n}\n')),(0,a.kt)("h2",{id:"testing-with-curl"},"Testing with curl"),(0,a.kt)("p",null,"Once again, we use curl loop to test the limiter:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'for n in {1..22}; do echo $(curl -s -w " :: HTTP %{http_code}, %{size_download} bytes, %{time_total} s" -X GET http://localhost:8080/api/ping); sleep 0.5; done\n')),(0,a.kt)("p",null,"You should see the 21st request being rejected:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\u279c for n in {1..22}; do echo $(curl -s -w " :: HTTP %{http_code}, %{size_download} bytes, %{time_total} s" -X GET http://localhost:8080/api/ping); sleep 0.5; done\nPONG :: HTTP 200, 4 bytes, 0.064786 s\nPONG :: HTTP 200, 4 bytes, 0.009926 s\nPONG :: HTTP 200, 4 bytes, 0.009546 s\nPONG :: HTTP 200, 4 bytes, 0.010189 s\nPONG :: HTTP 200, 4 bytes, 0.009399 s\nPONG :: HTTP 200, 4 bytes, 0.009210 s\nPONG :: HTTP 200, 4 bytes, 0.008333 s\nPONG :: HTTP 200, 4 bytes, 0.008009 s\nPONG :: HTTP 200, 4 bytes, 0.008919 s\nPONG :: HTTP 200, 4 bytes, 0.009271 s\nPONG :: HTTP 200, 4 bytes, 0.007515 s\nPONG :: HTTP 200, 4 bytes, 0.007057 s\nPONG :: HTTP 200, 4 bytes, 0.008373 s\nPONG :: HTTP 200, 4 bytes, 0.007573 s\nPONG :: HTTP 200, 4 bytes, 0.008209 s\nPONG :: HTTP 200, 4 bytes, 0.009080 s\nPONG :: HTTP 200, 4 bytes, 0.007595 s\nPONG :: HTTP 200, 4 bytes, 0.007955 s\nPONG :: HTTP 200, 4 bytes, 0.007693 s\nPONG :: HTTP 200, 4 bytes, 0.008743 s\n:: HTTP 429, 0 bytes, 0.007226 s\n:: HTTP 429, 0 bytes, 0.007388 s\n')),(0,a.kt)("p",null,"If we run Redis in monitor mode, we should see the Lua calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"RG.TRIGGER")," and under that you should see the\ncalls to ",(0,a.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"INCR")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPIRE")," for allowed requests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'1631249244.006212 [0 172.17.0.1:56036] "RG.TRIGGER" "RateLimiter" "rl_localhost:47" "20" "59"\n1631249244.006995 [0 ?:0] "GET" "rl_localhost:47"\n1631249244.007182 [0 ?:0] "INCR" "rl_localhost:47"\n1631249244.007269 [0 ?:0] "EXPIRE" "rl_localhost:47" "59"\n')),(0,a.kt)("p",null,"And for rate limited request you should see only the call to ",(0,a.kt)("inlineCode",{parentName:"p"},"GET"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'1631249244.538478 [0 172.17.0.1:56036] "RG.TRIGGER" "RateLimiter" "rl_localhost:47" "20" "59"\n1631249244.538809 [0 ?:0] "GET" "rl_localhost:47"\n')),(0,a.kt)("p",null,"The complete code for this implementation is under the branch ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/fixed-window-rate-limiter/tree/with_gears"},(0,a.kt)("inlineCode",{parentName:"a"},"with_gears")),"."))}m.isMDXComponent=!0}}]);