"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[370],{3905:(e,t,l)=>{l.d(t,{Zo:()=>c,kt:()=>m});var n=l(67294);function r(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function s(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?s(Object(l),!0).forEach((function(t){r(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):s(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function a(e,t){if(null==e)return{};var l,n,r=function(e,t){if(null==e)return{};var l,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)l=s[n],t.indexOf(l)>=0||(r[l]=e[l]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)l=s[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(r[l]=e[l])}return r}var u=n.createContext({}),i=function(e){var t=n.useContext(u),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},c=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var l=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=i(l),m=r,k=p["".concat(u,".").concat(m)]||p[m]||d[m]||s;return l?n.createElement(k,o(o({ref:t},c),{},{components:l})):n.createElement(k,o({ref:t},c))}));function m(e,t){var l=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=l.length,o=new Array(s);o[0]=p;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var i=2;i<s;i++)o[i]=l[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,l)}p.displayName="MDXCreateElement"},85162:(e,t,l)=>{l.d(t,{Z:()=>o});var n=l(67294),r=l(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:l,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:l},t)}},65488:(e,t,l)=>{l.d(t,{Z:()=>m});var n=l(87462),r=l(67294),s=l(86010),o=l(72389),a=l(67392),u=l(7094),i=l(12466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var t;const{lazy:l,block:o,defaultValue:p,values:m,groupId:k,className:h}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??y.map((e=>{let{props:{value:t,label:l,attributes:n}}=e;return{value:t,label:l,attributes:n}})),v=(0,a.l)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===p?p:p??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:O}=(0,u.U)(),[P,L]=(0,r.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:T}=(0,i.o5)();if(null!=k){const e=g[k];null!=e&&e!==P&&f.some((t=>t.value===e))&&L(e)}const E=e=>{const t=e.currentTarget,l=w.indexOf(t),n=f[l].value;n!==P&&(T(t),L(n),null!=k&&O(k,String(n)))},N=e=>{var t;let l=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;l=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;l=w[t]??w[w.length-1];break}}null==(t=l)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},h)},f.map((e=>{let{value:t,label:l,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:e=>w.push(e),onKeyDown:N,onClick:E},o,{className:(0,s.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":P===t})}),l??t)}))),l?(0,r.cloneElement)(y.filter((e=>e.props.value===P))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==P})))))}function m(e){const t=(0,o.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},36622:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=l(87462),r=(l(67294),l(3905)),s=l(65488),o=l(85162);const a={},u=void 0,i={unversionedId:"howtos/quick-start/cheat-sheets/lists",id:"howtos/quick-start/cheat-sheets/lists",title:"lists",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/lists.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/lists",permalink:"/howtos/quick-start/cheat-sheets/lists",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/lists.mdx",tags:[],version:"current",lastUpdatedAt:1694812977,formattedLastUpdatedAt:"Sep 15, 2023",frontMatter:{}},c={},d=[],p={toc:d};function m(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"NodeRedis",value:"NODE_JS"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"CLI",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("strong",null,"Command")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Syntax")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Example")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Output"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"LPUSH"),(0,r.kt)("td",null,"LPUSH key value [value ...]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nLPUSH myList "World"\n'))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Inserts the specified values at the head of the list stored at key. ",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"RPUSH"),(0,r.kt)("td",null,"RPUSH key value [value ...]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nRPUSH myList "Hello"\n'))),(0,r.kt)("td",null,"(integer) 2")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Inserts the specified values at the tail of the list stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"LRANGE"),(0,r.kt)("td",null,"LRANGE key start stop"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nLRANGE myList 0 -1\n"))),(0,r.kt)("td",null,'1) "World" 2) "Hello"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns the specified elements of the list stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(S+N) where S is the distance of start and N is the number of elements in the specified range.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"LLEN"),(0,r.kt)("td",null,"LLEN key"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nLLEN myList\n"))),(0,r.kt)("td",null,"(integer) 2")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns the length of the list stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"LPOP"),(0,r.kt)("td",null,"LPOP key [count]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nLPOP myList\n"))),(0,r.kt)("td",null,'"World"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Removes and returns the first element of the list stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"RPOP"),(0,r.kt)("td",null,"RPOP key [count]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nRPOP myList\n"))),(0,r.kt)("td",null,'"Hello"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Removes and returns the last element of the list stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(N)"))))),(0,r.kt)(o.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    LPUSH key value [value ...]\n    Inserts the specified values at the head of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst lPushResult = await client.lPush('myList', 'World');\nconsole.log(lPushResult); // 1\n\n/*\n    RPUSH key value [value ...]\n    Inserts the specified values at the tail of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst rPushResult = await client.rPush('myList', 'Hello');\nconsole.log(rPushResult); // 2\n\n/*\n    LRANGE key start stop\n    Returns the specified elements of the list stored at key.\n    Time Complexity: O(S+N) where S is the distance of start and N is the number of elements in the specified range.\n    */\nconst lRangeResult = await client.lRange('myList', 0, -1);\nconsole.log(lRangeResult); // [\"World\", \"Hello\"]\n\n/*\n    LLEN key\n    Returns the length of the list stored at key.\n    Time Complexity: O(1)\n    */\nconst lLenResult = await client.lLen('myList');\nconsole.log(lLenResult); // 2\n\n/*\n    LPOP key [count]\n    Removes and returns the first element of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst lPopResult = await client.lPop('myList');\nconsole.log(lPopResult); // \"World\"\n\n/*\n    RPOP key [count]\n    Removes and returns the last element of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst rPopResult = await client.rPop('myList');\nconsole.log(rPopResult); // \"Hello\"\n")))))}m.isMDXComponent=!0}}]);