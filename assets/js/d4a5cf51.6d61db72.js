"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[5851,1144,3325,1947,9570],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>h});var a=o(67294);function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function n(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){s(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,a,s=function(e,t){if(null==e)return{};var o,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(s[o]=e[o]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(s[o]=e[o])}return s}var c=a.createContext({}),d=function(e){var t=a.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):n(n({},t),e)),o},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var o=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),u=d(o),h=s,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||i;return o?a.createElement(m,n(n({ref:t},l),{},{components:o})):a.createElement(m,n({ref:t},l))}));function h(e,t){var o=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=o.length,n=new Array(i);n[0]=u;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:s,n[1]=r;for(var d=2;d<i;d++)n[d]=o[d];return a.createElement.apply(null,n)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},50358:(e,t,o)=>{o.d(t,{Z:()=>c});var a=o(67294),s=o(52263);const i="authorByline_VoxI",n="authorLabel_a70t",r="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:o}=(0,s.Z)(),c=o.customFields.authors;return a.createElement(a.Fragment,null,t.authors&&a.createElement("div",{className:"docAuthors"},a.createElement("hr",null),t.authors.map((e=>a.createElement("div",{key:e,className:i},a.createElement("img",{className:r,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),a.createElement("div",null,a.createElement("div",{className:n},"Author:"),a.createElement("div",null,a.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),a.createElement("hr",null)))}},40374:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=o(87462),s=(o(67294),o(3905)),i=o(50358),n=o(95995),r=o(30989),c=o(29621),d=o(25384);const l={id:"index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",sidebar_label:"How to use Redis for API Gateway Caching",slug:"/howtos/solutions/api-gateway-caching",authors:["prasan","will"]},p=void 0,u={unversionedId:"howtos/solutions/api-gateway-caching/index-solutions-api-gateway-caching",id:"howtos/solutions/api-gateway-caching/index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",description:"What is API Gateway Caching?",source:"@site/docs/howtos/solutions/api-gateway-caching/index-api-gateway-caching.mdx",sourceDirName:"howtos/solutions/api-gateway-caching",slug:"/howtos/solutions/api-gateway-caching",permalink:"/howtos/solutions/api-gateway-caching",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/api-gateway-caching/index-api-gateway-caching.mdx",tags:[],version:"current",lastUpdatedAt:1678145567,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{id:"index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",sidebar_label:"How to use Redis for API Gateway Caching",slug:"/howtos/solutions/api-gateway-caching",authors:["prasan","will"]}},h={},m=[{value:"What is API Gateway Caching?",id:"what-is-api-gateway-caching",level:2},{value:"Why You Should Use Redis for API Gateway Caching",id:"why-you-should-use-redis-for-api-gateway-caching",level:2},{value:"Microservices Architecture for an E-commerce Application",id:"microservices-architecture-for-an-e-commerce-application",level:2},{value:"E-commerce Application Frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"API Gateway Caching in a Microservices Application with Redis and MongoDB",id:"api-gateway-caching-in-a-microservices-application-with-redis-and-mongodb",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Resources",id:"additional-resources",level:3},{value:"Learn More",id:"learn-more",level:2}],g={toc:m};function f(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(i.Z,{frontMatter:l,mdxType:"Authors"}),(0,s.kt)(c.default,{mdxType:"SourceCode"}),(0,s.kt)("h2",{id:"what-is-api-gateway-caching"},"What is API Gateway Caching?"),(0,s.kt)("p",null,"So you are building a microservices application, but you're struggling with how to handle authentication in a way that lets you reuse code and maximize performance. Typically for authentication you might use sessions, OAuth, authorization tokens, etc. For the purposes of this tutorial, let's say we're using an authorization token. In a monolithic application authentication is pretty straightforward:"),(0,s.kt)("p",null,"When a request comes in..."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Decode the ",(0,s.kt)("inlineCode",{parentName:"li"},"Authorization")," header"),(0,s.kt)("li",{parentName:"ol"},"Validate the credentials"),(0,s.kt)("li",{parentName:"ol"},"Store the session information on the request for further use down the line")),(0,s.kt)("p",null,"However, you might be left puzzled by how to accomplish something similar with microservices. Typically in a microservices application you have an API gateway that serves as the single entrypoint for clients, and routes traffic to the appropriate services. Depending on the nature of the request, those services may or may not require a user to be authenticated. Because of this, you might think it is a good idea to handle authentication in each respective service. While this works, you end up with a fair amount of duplicated code. It's also more difficult to understand where slowdowns are happening and scale services appropriately because you repeat some of the same work in each service. A more effective way of handling authentication is to handle it at the API gateway layer, and then pass the session information down to each service."),(0,s.kt)("p",null,"Great, you've decided to handle authentication at the API gateway layer. Now you have to decide where to store sessions. Imagine you're building an e-commerce app that uses MongoDB as the primary data store. You could store sessions in MongoDB, but think about how many times you will be hitting MongoDB to retrieve session information. If you have millions of customers, you don't want to be going to MongoDB for every single request made to the API. This is where Redis comes in."),(0,s.kt)("h2",{id:"why-you-should-use-redis-for-api-gateway-caching"},"Why You Should Use Redis for API Gateway Caching"),(0,s.kt)("p",null,"Redis is an in-memory datastore, making it perfect for caching session data. It allows you to reduce the load on your primary database while speeding up database reads. The rest of this tutorial covers how to do this in the context of an e-commerce application."),(0,s.kt)("h2",{id:"microservices-architecture-for-an-e-commerce-application"},"Microservices Architecture for an E-commerce Application"),(0,s.kt)(r.default,{mdxType:"MicroservicesArchitectureWithRedis"}),(0,s.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce Application Frontend using Next.js and Tailwind"),(0,s.kt)(n.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,s.kt)("h2",{id:"api-gateway-caching-in-a-microservices-application-with-redis-and-mongodb"},"API Gateway Caching in a Microservices Application with Redis and MongoDB"),(0,s.kt)("p",null,"What's nice about a microservice architecture is each service is set up so it can scale independently. Now, seeing as how each service might require authentication, you will likely want to obtain session information for most requests. Therefore, it makes a lot of sense to use the API gateway to cache and retrieve session information and subsequently pass the information on to each service. Let's see how you might accomplish this."),(0,s.kt)("p",null,"In our sample application, all requests are routed through the API gateway. We are using ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," to set up our API gateway and we're using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Authorization")," header to pass the authorization token from the frontend to the API. For every request, the API gateway gets the authorization token and looks it up in Redis. Then it passes it along to the correct microservice. Below you will find the code to validate the session:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import {\n  createProxyMiddleware,\n  responseInterceptor,\n} from 'http-proxy-middleware';\n\n//-----\nconst app: Express = express();\n\napp.use(cors());\napp.use(async (req, res, next) => {\n  const authorizationHeader = req.header('Authorization');\n  const sessionInfo = await getSessionInfo(authorizationHeader); //---- (1)\n\n  //add session info to request\n  if (sessionInfo?.sessionData && sessionInfo?.sessionId) {\n    req.session = sessionInfo?.sessionData;\n    req.sessionId = sessionInfo?.sessionId;\n  }\n  next();\n});\n\napp.use(\n  '/orders',\n  createProxyMiddleware({\n    // http://localhost:3000/orders/bar -> http://localhost:3001/orders/bar\n    target: 'http://localhost:3001',\n    changeOrigin: true,\n    selfHandleResponse: true,\n    onProxyReq(proxyReq, req, res) {\n      // pass session info to microservice\n      proxyReq.setHeader('x-session', req.session);\n    },\n    onProxyRes: applyAuthToResponse, //---- (2)\n  }),\n);\n\napp.use(\n  '/orderHistory',\n  createProxyMiddleware({\n    target: 'http://localhost:3002',\n    changeOrigin: true,\n    selfHandleResponse: true,\n    onProxyReq(proxyReq, req, res) {\n      // pass session info to microservice\n      proxyReq.setHeader('x-session', req.session);\n    },\n    onProxyRes: applyAuthToResponse, //---- (2)\n  }),\n);\n//-----\n\nconst getSessionInfo = async (authHeader?: string) => {\n  // (For demo purpose only) random userId and sessionId values are created for first time, then userId is fetched gainst that sessionId for future requests\n  let sessionId = '';\n  let sessionData: string | null = '';\n\n  if (!!authHeader) {\n    sessionId = authHeader.split(/\\s/)[1];\n  } else {\n    sessionId = 'SES_' + randomUUID(); // generate random new sessionId\n  }\n\n  const nodeRedisClient = getNodeRedisClient();\n  if (nodeRedisClient) {\n    const exists = await nodeRedisClient.exists(sessionId);\n    if (!exists) {\n      await nodeRedisClient.set(\n        sessionId,\n        JSON.stringify({ userId: 'USR_' + randomUUID() }),\n      ); // generate random new userId\n    }\n    sessionData = await nodeRedisClient.get(sessionId);\n  }\n\n  return {\n    sessionId: sessionId,\n    sessionData: sessionData,\n  };\n};\n\nconst applyAuthToResponse = responseInterceptor(\n  // adding sessionId to the response so that front end can store it for future requests\n\n  async (responseBuffer, proxyRes, req, res) => {\n    // detect json responses\n    if (\n      !!proxyRes.headers['content-type'] &&\n      proxyRes.headers['content-type'].includes('application/json')\n    ) {\n      let data = JSON.parse(responseBuffer.toString('utf8'));\n\n      // manipulate JSON data here\n      if (!!(req as Request).sessionId) {\n        data = Object.assign({}, data, { auth: (req as Request).sessionId });\n      }\n\n      // return manipulated JSON\n      return JSON.stringify(data);\n    }\n\n    // return other content-types as-is\n    return responseBuffer;\n  },\n);\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The example above is not meant to be the de facto best practice for handling authentication. It is meant to illustrate what you might do with respect to Redis. You will likely have a different setup for authentication, but the concept of storing a session in Redis is similar.")),(0,s.kt)("p",null,"In the code above, we check for the ",(0,s.kt)("inlineCode",{parentName:"p"},"Authorization")," header, else we create a new one and store it in Redis. Then we retrieve the session from Redis. Further down the line we attach the session to the ",(0,s.kt)("inlineCode",{parentName:"p"},"x-session")," header prior to calling the orders service. Now let's see how the orders service receives the session."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{9}","{9}":!0},"router.post(API_NAMES.CREATE_ORDER, async (req: Request, res: Response) => {\n  const body = req.body;\n  const result: IApiResponseBody = {\n    data: null,\n    error: null,\n  };\n\n  const sessionData = req.header('x-session');\n  const userId = sessionData ? JSON.parse(sessionData).userId : \"\";\n  ...\n});\n")),(0,s.kt)("p",null,"The highlighted line above shows how to pull the session out of the ",(0,s.kt)("inlineCode",{parentName:"p"},"x-session")," header and get the ",(0,s.kt)("inlineCode",{parentName:"p"},"userId"),"."),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"That's all there is to it! You've now seen how to use Redis for API gateway caching. It is not too complicated to get started, but it will help you scale as you build out microservices. Check out additional resources below for learning more about Redis."),(0,s.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/howtos/solutions/cqrs"},"CQRS")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/howtos/solutions/interservice-communication"},"Interservice communication")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/howtos/solutions/caching"},"Query caching")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.youtube.com/c/Redisinc"},"Redis YouTube channel")),(0,s.kt)("li",{parentName:"ul"},"Clients like ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/redis/node-redis"},"Node Redis")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-node"},"Redis om Node")," help you to use Redis in Node.js applications.")),(0,s.kt)("h2",{id:"learn-more"},"Learn More"),(0,s.kt)(d.default,{mdxType:"RedisEnterprise"}))}f.isMDXComponent=!0},30989:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=o(87462),s=(o(67294),o(3905));const i={},n=void 0,r={unversionedId:"howtos/solutions/common-data/microservices-arch-with-redis",id:"howtos/solutions/common-data/microservices-arch-with-redis",title:"microservices-arch-with-redis",description:"The e-commerce microservices application uses the following architecture:",source:"@site/docs/howtos/solutions/common-data/microservices-arch-with-redis.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-arch-with-redis",permalink:"/howtos/solutions/common-data/microservices-arch-with-redis",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-arch-with-redis.mdx",tags:[],version:"current",lastUpdatedAt:1678131735,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...i}=e;return(0,s.kt)("wrapper",(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The e-commerce microservices application uses the following architecture:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"products service")," - handles querying products from the database and returning them to the frontend"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"orders service")," - handles validating and creating orders"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"order history service")," - handles querying a customer's order history"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"payments service")," - handles processing orders for payment"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"api gateway")," - unifies your services under a single endpoint"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"mongodb")," - serves as the primary database, storing orders, order history, products, etc."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"redis")," - serves as the stream processor and caching database")),(0,s.kt)("p",null,"Here is what the architecture diagram looks like so far:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Microservices architecture with Redis",src:o(87251).Z,width:"1484",height:"656"})),(0,s.kt)("p",null,"What's nice about this architecture is each service is set up so it can scale independently. What this also means is you can incrementally adopt Redis where needed."))}p.isMDXComponent=!0},95995:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var a=o(87462),s=(o(67294),o(3905)),i=o(29621);const n={},r=void 0,c={unversionedId:"howtos/solutions/common-data/microservices-ecommerce",id:"howtos/solutions/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in MongoDB and Redis. Below you will find screenshots of the frontend of the e-commerce app:",source:"@site/docs/howtos/solutions/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-ecommerce",permalink:"/howtos/solutions/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1678131735,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},d={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,s.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,s.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,s.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in ",(0,s.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB")," and ",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis"),". Below you will find screenshots of the frontend of the e-commerce app:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Dashboard"),": Shows the list of products with search functionality"),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{alt:"redis microservices e-commerce app frontend products page",src:o(98920).Z,width:"2475",height:"1873"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Shopping Cart"),': Add products to the cart, then checkout using the "Buy Now" button.\n',(0,s.kt)("img",{alt:"redis microservices e-commerce app frontend shopping cart",src:o(53296).Z,width:"2772",height:"1942"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Order history"),": Once an order is placed, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Orders")," link in the top navigation bar will show you the order status and history"),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{alt:"redis microservices e-commerce app frontend order history page",src:o(28125).Z,width:"2511",height:"1351"})))),(0,s.kt)(i.default,{mdxType:"SourceCode"}))}u.isMDXComponent=!0},29621:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=o(87462),s=(o(67294),o(3905));const i={},n=void 0,r={unversionedId:"howtos/solutions/common-data/microservices-source-code-tip",id:"howtos/solutions/common-data/microservices-source-code-tip",title:"microservices-source-code-tip",description:"Below is a link to the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/common-data/microservices-source-code-tip.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-source-code-tip",permalink:"/howtos/solutions/common-data/microservices-source-code-tip",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-source-code-tip.mdx",tags:[],version:"current",lastUpdatedAt:1678131735,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Below is a link to the source code for the application used in this tutorial"),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}p.isMDXComponent=!0},25384:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=o(87462),s=(o(67294),o(3905));const i={},n=void 0,r={unversionedId:"howtos/solutions/common-data/redis-enterprise",id:"howtos/solutions/common-data/redis-enterprise",title:"redis-enterprise",description:"You can use Redis Enterprise as a multi-model primary database. Redis Enterprise is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or Flash. It also supports Active-Active (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes.",source:"@site/docs/howtos/solutions/common-data/redis-enterprise.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/redis-enterprise",permalink:"/howtos/solutions/common-data/redis-enterprise",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/redis-enterprise.mdx",tags:[],version:"current",lastUpdatedAt:1678145567,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},d=[],l={toc:d};function p(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"You can use ",(0,s.kt)("strong",{parentName:"p"},"Redis Enterprise")," as a multi-model primary database. Redis Enterprise is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or ",(0,s.kt)("strong",{parentName:"p"},"Flash"),". It also supports ",(0,s.kt)("strong",{parentName:"p"},"Active-Active")," (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes."),(0,s.kt)("p",null,"Redis Enterprise has many built-in modular capabilities, making it a unified, real-time data platform. Redis Enterprise is far more than a document database."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"RedisJSON"),": Persists JSON documents"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"RediSearch"),": Indexes and searches JSON documents"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"RedisGraph"),": A fast and easy-to-use graph database"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"RedisBloom:")," Provides bloom filters and other probabilistic data structures"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"RedisTimeSeries"),": Supports time series data structures"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"RedisGears"),": Syncs data to external databases via different pattern (write-behind/ write-through) or executes custom logic.")),(0,s.kt)("p",null,"Use ",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," to view your Redis data or to play with raw Redis commands in the workbench."),(0,s.kt)("p",null,"If you're interested in diving deeper, try ",(0,s.kt)("a",{parentName:"p",href:"https://redis.com/try-free"},"Redis Enterprise")," today for free!"))}p.isMDXComponent=!0},53296:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/design-cart-2-2a3b76656f26a754bed6a6c63ad8beef.png"},98920:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/design-dashboard-6a34137ca4862561cc2f065ed55ae081.png"},28125:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/design-order-history-16fc808f70b63d91a37a3ea76baa232d.png"},87251:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/redis-microservices-arch-eae2fcbe4a554b92d455db7b60bfc859.png"}}]);