"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[5979],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,f=p["".concat(o,".").concat(m)]||p[m]||c[m]||s;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=p;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<s;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(67294),r=t(86010);const s="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),r=t(67294),s=t(86010),l=t(72389),i=t(67392),o=t(7094),d=t(12466);const u="tabList__CuJ",c="tabItem_LNqP";function p(e){var n;const{lazy:t,block:l,defaultValue:p,values:m,groupId:f,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),T=m??y.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),h=(0,i.l)(T,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const E=null===p?p:p??(null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)??y[0].props.value;if(null!==E&&!T.some((e=>e.value===E)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${E}" but none of its children has the corresponding value. Available values are: ${T.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:S,setTabGroupChoices:x}=(0,o.U)(),[k,O]=(0,r.useState)(E),A=[],{blockElementScrollPositionUntilNextRender:N}=(0,d.o5)();if(null!=f){const e=S[f];null!=e&&e!==k&&T.some((n=>n.value===e))&&O(e)}const R=e=>{const n=e.currentTarget,t=A.indexOf(n),a=T[t].value;a!==k&&(N(n),O(a),null!=f&&x(f,String(a)))},F=e=>{var n;let t=null;switch(e.key){case"Enter":R(e);break;case"ArrowRight":{const n=A.indexOf(e.currentTarget)+1;t=A[n]??A[0];break}case"ArrowLeft":{const n=A.indexOf(e.currentTarget)-1;t=A[n]??A[A.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":l},g)},T.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>A.push(e),onKeyDown:F,onClick:R},l,{className:(0,s.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":k===n})}),t??n)}))),t?(0,r.cloneElement)(y.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function m(e){const n=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},74476:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var a=t(87462),r=(t(67294),t(3905)),s=t(65488),l=t(85162);const i={},o=void 0,d={unversionedId:"howtos/quick-start/cheat-sheets/search-and-query",id:"howtos/quick-start/cheat-sheets/search-and-query",title:"search-and-query",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/search-and-query.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/search-and-query",permalink:"/howtos/quick-start/cheat-sheets/search-and-query",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/search-and-query.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},u={},c=[],p={toc:c};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"CLI",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("strong",null,"Command")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Syntax")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Example")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Output"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"FT.CREATE"),(0,r.kt)("td",{class:"cst-large-code"},(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nFT.CREATE index\n  [ON HASH | JSON]\n  [PREFIX count prefix [prefix ...]]\n  [FILTER {filter}]\n  SCHEMA\n  field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE [ SORTABLE [UNF]]\n  [NOINDEX]\n   ...\n"))),(0,r.kt)("td",{class:"cst-large-code"},(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nFT.CREATE staff:index\n    ON JSON\n    PREFIX 1 staff:\n    SCHEMA\n    "$.name" AS name TEXT\n    "$.age" AS age NUMERIC\n    "$.isSingle"  AS isSingle TAG\n    \'$["skills"][*]\' AS skills TAG SEPARATOR "|"\n'))),(0,r.kt)("td",null,"OK")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Create an index with the given specification.",(0,r.kt)("em",null,"Time Complexity:")," O(K) where K is the number of fields in the document, O(N) for keys in the keySpace")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"FT.SEARCH"),(0,r.kt)("td",{class:"cst-large-code"},(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nFT.SEARCH index query\n  [FILTER numeric_field min max [ FILTER numeric_field min max ...]]\n  [RETURN count identifier [AS property] [ identifier [AS property] ...]]\n  [SORTBY sortby [ ASC | DESC] [WITHCOUNT]]\n  [LIMIT offset num]\n  [PARAMS nargs name value [ name value ...]]\n"))),(0,r.kt)("td",{class:"cst-large-code"},(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nJSON.SET "staff:1" "$" \'{"name":"Bob","age":22,"isSingle":true,"skills":["NodeJS","MongoDB","React"]}\' \n\nJSON.SET "staff:2" "$" \'{"name":"Alex","age":45,"isSingle":true,"skills":["Python","MySQL","Angular"]}\' \n\nFT.SEARCH staff:index\n  "(@name:\'alex\')"\n  RETURN 1 $ LIMIT 0 10 \n\nFT.SEARCH staff:index\n  "((@isSingle:{true}) (@age:[(18 +inf]))"\n  RETURN 1 $ LIMIT 0 10\n'))),(0,r.kt)("td",null,"Matching documents data")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Search the index with a query, returning either documents or just ids. ",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"FT.AGGREGATE"),(0,r.kt)("td",{class:"cst-large-code"},(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nFT.AGGREGATE index query\n  [LOAD count field [field ...]]\n  [ GROUPBY nargs property [property ...] [ REDUCE function nargs arg [arg ...] [AS name] ...\n  [ SORTBY nargs [ property ASC | DESC [ property ASC | DESC ...]] [MAX num] [WITHCOUNT]\n  [ APPLY expression AS name  ...\n  [ LIMIT offset num]\n  [FILTER filter]\n  [ PARAMS nargs name value [ name value ...]]\n"))),(0,r.kt)("td",{class:"cst-large-code"},(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nFT.AGGREGATE staff:index "(@age:[(18 +inf])"\n  GROUPBY 1 @age\n  \tREDUCE COUNT_DISTINCT 1 @name AS staff_count\n'))),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\n         | age | staff_count |\n         | ----| ------------|\n         | 22  | 1           |\n         | 45  | 1           |\n")))),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Run a search query on an index, and perform aggregate transformations on the results.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"FT.INFO"),(0,r.kt)("td",null,"FT.INFO index"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nFT.INFO staff:index\n"))),(0,r.kt)("td",null,"A list of configuration parameters and stats for the index.")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Return information and statistics on the index.",(0,r.kt)("em",null,"Time Complexity:")," O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"FT.DROPINDEX"),(0,r.kt)("td",null,"FT.DROPINDEX index [DD]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nFT.DROPINDEX staff:index\n"))),(0,r.kt)("td",null,"OK")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Dropping existing index.",(0,r.kt)("em",null,"Time Complexity:"),"O(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace"))))),(0,r.kt)(l.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const STAFF_INDEX_KEY = 'staff:index';\nconst STAFF_KEY_PREFIX = 'staff:';\n\ntry {\n  /*\n       FT.DROPINDEX index [DD]\n       Dropping existing index\n       O(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace\n      */\n  await client.ft.dropIndex(STAFF_INDEX_KEY);\n} catch (indexErr) {\n  console.error(indexErr);\n}\n\n/*\n   FT.CREATE index [ON HASH | JSON] [PREFIX n] SCHEMA [field type [field type ...]]\n   Create an index with the given specification\n   O(K) where K is the number of fields in the document, O(N) for keys in the keyspace\n */\nconst schema: RediSearchSchema = {\n  '$.name': {\n    type: SchemaFieldTypes.TEXT,\n    AS: 'name',\n  },\n  '$.age': {\n    type: SchemaFieldTypes.NUMERIC,\n    AS: 'age',\n  },\n  '$.isSingle': {\n    type: SchemaFieldTypes.TAG,\n    AS: 'isSingle',\n  },\n  '$[\"skills\"][*]': {\n    type: SchemaFieldTypes.TAG,\n    AS: 'skills',\n    SEPARATOR: '|',\n  },\n};\nawait client.ft.create(STAFF_INDEX_KEY, schema, {\n  ON: 'JSON',\n  PREFIX: STAFF_KEY_PREFIX,\n});\n\n//-------addStaffEntries for search\nawait client.json.set('staff:1', '.', {\n  name: 'Bob',\n  age: 22,\n  isSingle: true,\n  skills: ['NodeJS', 'MongoDB', 'React'],\n});\nawait client.json.set('staff:2', '.', {\n  name: 'Alex',\n  age: 45,\n  isSingle: true,\n  skills: ['Python', 'MySQL', 'Angular'],\n});\n//------\n\n/*\n    FT.SEARCH index query\n    Search the index with a query, returning either documents or just ids\n    O(N)\n    */\n\nconst query1 = '*'; //all records\nconst query2 = \"(@name:'alex')\"; // name == 'alex'\nconst query3 = '( (@isSingle:{true}) (@age:[(18 +inf]) )'; //isSingle == true && age > 18\nconst query4 = '(@skills:{NodeJS})';\nconst searchResult = await client.ft.search(\n  STAFF_INDEX_KEY,\n  query1, //query2, query3, query4\n  {\n    RETURN: ['name', 'age', 'isSingle'],\n    LIMIT: {\n      from: 0,\n      size: 10,\n    },\n  },\n);\nconsole.log(JSON.stringify(searchResult));\n//{\"total\":1,\"documents\":[{\"id\":\"staff:2\",\"value\":{\"name\":\"Alex\",\"age\":\"45\",\"isSingle\":\"1\"}}]}\n\n/*\n    FT.AGGREGATE index query\n    Run a search query on an index, and perform aggregate transformations on the results\n\n    FT.AGGREGATE staff:index \"(@age:[(10 +inf])\"\n      GROUPBY 1 @age\n        REDUCE COUNT 0 AS userCount\n      SORTBY 1 @age\n      LIMIT 0 10\n    */\nconst aggregateResult = await client.ft.aggregate(\n  STAFF_INDEX_KEY,\n  '(@age:[(10 +inf])',\n  {\n    STEPS: [\n      {\n        type: AggregateSteps.GROUPBY,\n        properties: ['@age'],\n        REDUCE: [\n          {\n            type: AggregateGroupByReducers.COUNT,\n            AS: 'userCount',\n          },\n        ],\n      },\n      {\n        type: AggregateSteps.SORTBY,\n        BY: '@age',\n      },\n      {\n        type: AggregateSteps.LIMIT,\n        from: 0,\n        size: 10,\n      },\n    ],\n  },\n);\nconsole.log(JSON.stringify(aggregateResult));\n//{\"total\":2,\"results\":[{\"age\":\"22\",\"userCount\":\"1\"},{\"age\":\"45\",\"userCount\":\"1\"}]}\n//----\n\n/*\n    FT.INFO index\n    Return information and statistics on the index\n    O(1)\n    */\nconst infoResult = await client.ft.info(STAFF_INDEX_KEY);\nconsole.log(infoResult);\n/**\n     {\n        indexName: 'staff:index',\n        numDocs: '2',\n        maxDocId: '4',\n        stopWords: 2\n        ...\n     }\n     */\n"))),(0,r.kt)(l.Z,{value:"PYTHON",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    r.ft('idx-employees').dropindex()\nexcept:\n    pass\n\n# FT.CREATE index [ON HASH | JSON] [PREFIX count prefix [prefix ...]] SCHEMA field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAP [SORTABLE [UNF]] [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]\n# O(K) where K is the number of fields in the document, O(N) for keys in the keyspace\n# Creates a new search index with the given specification.\nschema = (TextField('$.name', as_name='name', sortable=True), NumericField('$.age', as_name='age', sortable=True),\n          TagField('$.single', as_name='single'), TagField('$.skills[*]', as_name='skills'))\n\nr.ft('idx-employees').create_index(schema, definition=IndexDefinition(\n    prefix=['employee_profile:'], index_type=IndexType.JSON))\n\n# FT.INFO index\n# O(1)\n# Return information and statistics on the index.\nr.ft('idx-employees').info()\n\n# FT.SEARCH index query\n# O(N)\n# Search the index with a textual query, returning either documents or just ids\nr.ft('idx-employees').search('Nicol')\nr.ft('idx-employees').search(\"@single:{false}\")\nr.ft('idx-employees').search(\"@skills:{python}\")\nr.ft('idx-employees').search(Query(\"*\").add_filter(NumericFilter('age', 30, 40)))\nr.json().arrappend('employee_profile:karol', '$.skills', 'python', 'java', 'c#')\nr.ft('idx-employees').search(Query(\"@skills:{java}, @skills:{python}\"))\n\n# FT.AGGREGATE index query\n# O(1)\n# Run a search query on an index, and perform aggregate transformations on the results, extracting statistics etc from them\nr.ft('idx-employees').aggregate(aggregations.AggregateRequest(\"*\").group_by('@age',\n                                                                            reducers.count().alias('count')).sort_by(\"@age\")).rows\n\nr.ft('idx-employees').aggregate(aggregations.AggregateRequest(\"@skills:{python}\").group_by('@skills',\n                                                                                           reducers.tolist('@name').alias('names'))).rows\n"))),(0,r.kt)(l.Z,{value:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'try\n{\n    /*\n     * FT.DROPINDEX index [DD]\n     * O(1)\n     * Deletes an index and all the documents in it.\n     */\n    db.FT().DropIndex("idx-employees");\n}\ncatch\n{\n    // Index not found\n}\n\n/*\n * FT.CREATE index [ON HASH | JSON] [PREFIX count prefix [prefix ...]] SCHEMA\n * field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAP [SORTABLE\n * [UNF]] [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR\n * | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]\n * O(K) where K is the number of fields in the document, O(N) for keys in the\n * keyspace\n * Creates a new search index with the given specification.\n */\ndb.FT().Create("idx-employees", new FTCreateParams()\n                                    .On(IndexDataType.JSON)\n                                    .Prefix("employee_profile:"),\n                                new Schema()\n                                    .AddTextField(new FieldName("$.name", "name"), sortable: true)\n                                    .AddNumericField(new FieldName("$.age", "age"), sortable: true)\n                                    .AddTagField(new FieldName("$.single", "single"))\n                                    .AddTagField(new FieldName("$.skills[*]", "skills")));\n\n/*\n * FT.INFO index\n * O(1)\n * Returns information and statistics on the index.\n */\ndb.FT().Info("idx-employees");\n\n/*\n * FT._LIST\n * O(1)\n * Returns a list of all existing indexes.\n */\ndb.FT()._List();\n\n/*\n * FT.SEARCH index query\n * O(N)\n * Search the index with a textual query, returning either documents or just ids\n */\ndb.FT().Search("idx-employees", new Query("@name:{nicol}"));\ndb.FT().Search("idx-employees", new Query("@single:{false}"));\ndb.FT().Search("idx-employees", new Query("@skills:{python}"));\ndb.FT().Search("idx-employees", new Query().AddFilter(new NumericFilter("@age", 30, 40)));\ndb.JSON().ArrAppend("employee_profile:karol", "$.skills", "python", "java", "c#");\ndb.FT().Search("idx-employees", new Query("@skills:{java}, @skills:{python}"));\n\n/*\n * FT.AGGREGATE index query\n * O(1)\n * Run a search query on an index, and perform aggregate transformations on the\n * results, extracting statistics etc from them\n */\ndb.FT().Aggregate("idx-employees", new AggregationRequest("@age:[20 40]")\n                                    .GroupBy("@age", Reducers.Count().As("count"))\n                                    .SortBy(new SortedField("@age", SortedField.SortOrder.ASC)));\ndb.FT().Aggregate("idx-employees", new AggregationRequest("@skills:{python}")\n                                    .GroupBy("@skills", Reducers.ToList("@name").As("names")));\n'))),(0,r.kt)(l.Z,{value:"JAVA",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try {\n    jedis.ftDropIndex("idx-employees");\n} catch (Exception e) {\n    // Index not found\n}\n\n/*\n * FT.CREATE index [ON HASH | JSON] [PREFIX count prefix [prefix ...]] SCHEMA\n * field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAP [SORTABLE\n * [UNF]] [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR\n * | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]\n * O(K) where K is the number of fields in the document, O(N) for keys in the\n * keyspace\n * Creates a new search index with the given specification.\n */\nSchema schema = new Schema()\n        .addSortableTextField("$.name", 1.0).as("name")\n        .addSortableNumericField("$.age").as("age")\n        .addTagField("$.single").as("single")\n        .addTagField("$.skills[*]").as("skills");\n\nIndexDefinition def = new IndexDefinition(IndexDefinition.Type.JSON)\n        .setPrefixes("employee_profile:");\n\njedis.ftCreate("idx-employees", IndexOptions.defaultOptions().setDefinition(def), schema);\n\n/*\n * FT.INFO index\n * O(1)\n * Returns information and statistics on the index.\n */\njedis.ftInfo("idx-employees");\n\n/*\n * FT._LIST\n * O(1)\n * Returns a list of all existing indexes.\n */\njedis.ftList();\n\n/*\n * FT.SEARCH index query\n * O(N)\n * Search the index with a textual query, returning either documents or just ids\n */\njedis.ftSearch("idx-employees", "Nicol");\njedis.ftSearch("idx-employees", "@single:{false}");\njedis.ftSearch("idx-employees", "@skills:{python}");\njedis.ftSearch("idx-employees", "*",\n        FTSearchParams.searchParams().filter(new NumericFilter("age", 30, 40)));\njedis.jsonArrAppend("employee_profile:karol", Path2.of("$.skills"), "\\"python\\"", "\\"java\\"", "\\"c#\\"");\njedis.ftSearch("idx-employees", "@skills:{java}, @skills:{python}");\n\n/*\n * FT.AGGREGATE index query\n * O(1)\n * Run a search query on an index, and perform aggregate transformations on the\n * results, extracting statistics etc from them\n */\njedis.ftAggregate("idx-employees", new AggregationBuilder()\n        .groupBy("@age", Reducers.count().as("count")).sortBy(new SortedField("@age", SortOrder.ASC)))\n        .getRows();\njedis.ftAggregate("idx-employees", new AggregationBuilder("@skills:{python}")\n        .groupBy("@skills", Reducers.to_list("@name").as("names")))\n        .getRows();\n')))))}m.isMDXComponent=!0}}]);