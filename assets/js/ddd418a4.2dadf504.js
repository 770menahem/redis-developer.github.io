"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[7729],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=r.createContext({}),i=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=i(n),p=s,h=m["".concat(u,".").concat(p)]||m[p]||c[p]||a;return n?r.createElement(h,l(l({ref:t},d),{},{components:n})):r.createElement(h,l({ref:t},d))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),s=n(86010);const a="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.Z)(a,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(87462),s=n(67294),a=n(86010),l=n(72389),o=n(67392),u=n(7094),i=n(12466);const d="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:m,values:p,groupId:h,className:y}=e,b=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??b.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),k=(0,o.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===m?m:m??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:w}=(0,u.U)(),[O,E]=(0,s.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:N}=(0,i.o5)();if(null!=h){const e=g[h];null!=e&&e!==O&&f.some((t=>t.value===e))&&E(e)}const S=e=>{const t=e.currentTarget,n=T.indexOf(t),r=f[n].value;r!==O&&(N(t),E(r),null!=h&&w(h,String(r)))},Z=e=>{var t;let n=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return s.createElement("div",{className:(0,a.Z)("tabs-container",d)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":l},y)},f.map((e=>{let{value:t,label:n,attributes:l}=e;return s.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>T.push(e),onKeyDown:Z,onClick:S},l,{className:(0,a.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":O===t})}),n??t)}))),n?(0,s.cloneElement)(b.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function p(e){const t=(0,l.Z)();return s.createElement(m,(0,r.Z)({key:String(t)},e))}},53188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),s=(n(67294),n(3905)),a=n(65488),l=n(85162);const o={},u=void 0,i={unversionedId:"howtos/quick-start/cheat-sheets/sorted-sets",id:"howtos/quick-start/cheat-sheets/sorted-sets",title:"sorted-sets",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/sorted-sets.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/sorted-sets",permalink:"/howtos/quick-start/cheat-sheets/sorted-sets",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/sorted-sets.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},c=[],m={toc:c};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"ZADD"),(0,s.kt)("td",null,"ZADD key score member [score member ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nZADD myZSet 1 "one" 2 "two"\n'))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Adds all the specified members with the specified scores to the sorted set stored at key. ",(0,s.kt)("em",null,"Time Complexity: "),"O(log(N))")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"ZRANGE"),(0,s.kt)("td",null,"ZRANGE key start stop [WITHSCORES]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nZRANGE myZSet 0 -1\n"))),(0,s.kt)("td",null,'1) "one" 2)"two" ')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the specified range of elements in the sorted set stored at key.",(0,s.kt)("em",null,"Time Complexity: "),"O(log(N)+M) where M is the number of elements returned"))))),(0,s.kt)(l.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    ZADD key score member [score member ...]\n    Adds all the specified members with the specified scores to the sorted set stored at key.\n    Time Complexity: O(log(N))\n    */\nconst zAddResult = await client.zAdd('myZSet', [\n  {\n    score: 1,\n    value: 'one',\n  },\n  {\n    score: 2,\n    value: 'two',\n  },\n]);\nconsole.log(zAddResult); // 2\n\n/*\n    ZRANGE key start stop [WITHSCORES]\n    Returns the specified range of elements in the sorted set stored at key.\n    Time Complexity: O(log(N)+M) where M is the number of elements returned\n    */\nconst zRangeResult = await client.zRange('myZSet', 0, -1);\nconsole.log(zRangeResult); // [\"one\", \"two\"]\n"))),(0,s.kt)(l.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# ZADD key score member [score member ...]\n# O(log(N))\n# Adds all the specified members with the specified scores to the sorted set stored at key.\nr.zadd('myzset', {'one': 1, 'two': 2, 'three': 3})\n\n# ZRANGE key start stop [WITHSCORES]\n# O(log(N)+M)\n# Returns the specified range of elements in the sorted set stored at key.\nr.zrange('myzset', 0, -1, withscores=True)\nr.zrange('myzset', 0, -1)\n"))),(0,s.kt)(l.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * ZADD key score member [score member ...]\n * O(log(N))\n * Adds all the specified members with the specified scores to the sorted set\n * stored at key.\n */\ndb.KeyDelete("myzset");\ndb.SortedSetAdd("myzset", new SortedSetEntry[] {\n                            new SortedSetEntry("one", 1.0),\n                            new SortedSetEntry("two", 2.0),\n                            new SortedSetEntry("three", 3.0)\n                          });\n\n/*\n * ZRANGE key start stop [WITHSCORES]\n * O(log(N)+M)\n * Returns the specified range of elements in the sorted set stored at key.\n */\ndb.SortedSetRangeByRank("myzset", 0, -1);\ndb.SortedSetRangeByRankWithScores("myzset", 0, -1);\n'))),(0,s.kt)(l.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * ZADD key score member [score member ...]\n * O(log(N))\n * Adds all the specified members with the specified scores to the sorted set\n * stored at key.\n */\njedis.del("myzset");\njedis.zadd("myzset", Map.of(\n                            "one", 1.0,\n                            "two", 2.0,\n                            "three", 3.0\n                            ));\n\n/*\n * ZRANGE key start stop [WITHSCORES]\n * O(log(N)+M)\n * Returns the specified range of elements in the sorted set stored at key.\n */\njedis.zrange("myzset", 0, -1);\njedis.zrangeWithScores("myzset", 0, -1);\n')))))}p.isMDXComponent=!0}}]);