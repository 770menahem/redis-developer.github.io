"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[9461],{85162:(e,t,a)=>{a.d(t,{Z:()=>o});var r=a(67294),n=a(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(s,o),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var r=a(87462),n=a(67294),s=a(86010),o=a(72389),i=a(67392),l=a(7094),d=a(12466);const p="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:a,block:o,defaultValue:c,values:m,groupId:h,className:k}=e,v=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??v.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),g=(0,i.l)(b,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===c?c:c??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==f&&!b.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,l.U)(),[T,R]=(0,n.useState)(f),S=[],{blockElementScrollPositionUntilNextRender:I}=(0,d.o5)();if(null!=h){const e=y[h];null!=e&&e!==T&&b.some((t=>t.value===e))&&R(e)}const w=e=>{const t=e.currentTarget,a=S.indexOf(t),r=b[a].value;r!==T&&(I(t),R(r),null!=h&&N(h,String(r)))},E=e=>{var t;let a=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;a=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;a=S[t]??S[S.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,s.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},k)},b.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>S.push(e),onKeyDown:E,onClick:w},o,{className:(0,s.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,n.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,o.Z)();return n.createElement(c,(0,r.Z)({key:String(t)},e))}},71131:(e,t,a)=>{a.d(t,{Z:()=>h});var r=a(67294),n=a(3905),s=a(52195);const o="riContainer_bco2",i="riDescriptionShort_E27B",l="riDetail_wzFs",d="riIcon_yDou",p="riTitle_x6vI",u="riDescription_RDnu",c="riMore_apRP";var m=a(86010);const h=e=>{const[t,a]=r.useState(!1);return r.createElement("a",{href:e.page,className:o},r.createElement("div",{className:i},r.createElement("div",{className:d},r.createElement("span",{className:"fe fe-zap"})),r.createElement("div",{className:l},r.createElement("div",{className:p},r.createElement("a",{href:e.page},e.title)),r.createElement("div",{className:u},e.description,r.Children.count(e.children)>0&&r.createElement("span",{className:(0,m.Z)(c,"fe","fe-more-horizontal"),onClick:()=>a(!t)})))),t&&r.createElement("div",{className:"ri-description-long"},r.createElement(n.Zo,{components:s.Z},e.children)))}},62179:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var r=a(87462),n=(a(67294),a(3905)),s=a(65488),o=a(85162);a(44996),a(71131);const i={id:"index-riot",title:"RIOT",sidebar_label:"RIOT",slug:"/tools/riot"},l=void 0,d={unversionedId:"tools/riot/index-riot",id:"tools/riot/index-riot",title:"RIOT",description:"Redis Input/Output Tools (RIOT) is a set of import/export command line utilities for Redis:",source:"@site/docs/tools/riot/index-riot.mdx",sourceDirName:"tools/riot",slug:"/tools/riot",permalink:"/tools/riot",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/tools/riot/index-riot.mdx",tags:[],version:"current",lastUpdatedAt:1655485542,formattedLastUpdatedAt:"Jun 17, 2022",frontMatter:{id:"index-riot",title:"RIOT",sidebar_label:"RIOT",slug:"/tools/riot"}},p={},u=[{value:"1. Getting Started",id:"1-getting-started",level:3},{value:"2. Build and Run",id:"2-build-and-run",level:3},{value:"3. Install via Homebrew (macOS)",id:"3-install-via-homebrew-macos",level:3},{value:"Usage",id:"usage",level:3},{value:"4. Example",id:"4-example",level:3},{value:"5. Verification",id:"5-verification",level:3},{value:"6. Architecture",id:"6-architecture",level:3},{value:"1. Getting Started",id:"1-getting-started-1",level:3},{value:"2. Build and Run",id:"2-build-and-run-1",level:3},{value:"3. Install via Homebrew (macOS)",id:"3-install-via-homebrew-macos-1",level:3},{value:"4. Usage",id:"4-usage",level:3},{value:"5. Drivers",id:"5-drivers",level:3},{value:"Oracle",id:"oracle",level:4},{value:"IBM Db2",id:"ibm-db2",level:4},{value:"MS SQL Server",id:"ms-sql-server",level:4},{value:"MySQL",id:"mysql",level:4},{value:"PostgreSQL",id:"postgresql",level:4},{value:"SQLite",id:"sqlite",level:4},{value:"6. Import",id:"6-import",level:3},{value:"Import from PostgreSQL",id:"import-from-postgresql",level:4},{value:"Import into hashes",id:"import-into-hashes",level:4},{value:"Import into hashes and set TTL on the key",id:"import-into-hashes-and-set-ttl-on-the-key",level:4},{value:"Import into hashes and set TTL and add to a set named myset",id:"import-into-hashes-and-set-ttl-and-add-to-a-set-named-myset",level:4},{value:"7. Export",id:"7-export",level:3},{value:"Export to PostgreSQL",id:"export-to-postgresql",level:4},{value:"Import from PostgreSQL to JSON strings",id:"import-from-postgresql-to-json-strings",level:4}],c={toc:u};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Redis Input/Output Tools (RIOT) is a set of import/export command line utilities for Redis:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"RIOT Redis: live replication from any Redis database (including AWS Elasticache) to another Redis database."),(0,n.kt)("li",{parentName:"ul"},"RIOT DB: migrate from an RDBMS to Redis, RediSearch, RedisJSON, ...")),(0,n.kt)(s.Z,{defaultValue:"RIOT Redis",values:[{label:"RIOT Redis",value:"RIOT Redis"},{label:"RIOT DB",value:"RIOT DB"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"RIOT Redis",mdxType:"TabItem"},(0,n.kt)("p",null,"Most database migration tools available today are offline in nature. Migrating data from AWS ElastiCache to Redis Enterprise Cloud for example means backing up your Elasticache data to an AWS S3 bucket and importing it into Redis Enterprise Cloud using its UI.This implies some downtime and might result in data loss.\nOther available techniques include creating point-in-time snapshots of the source Redis server & applying the changes to the destination servers to keep both servers in sync.\nIt might sound like a good approach but can be challenging when you have to maintain dozens of scripts to implement the migration strategy."),(0,n.kt)("p",null,"RIOT Redis is a migration tool that allows for seamless live replication between two Redis databases."),(0,n.kt)("h3",{id:"1-getting-started"},"1. Getting Started"),(0,n.kt)("p",null,"Download the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/riot/releases/latest"},"latest release")," and unzip the archive."),(0,n.kt)("p",null,"Launch the ",(0,n.kt)("inlineCode",{parentName:"p"},"bin/riot-redis")," script and follow the usage information provided."),(0,n.kt)("h3",{id:"2-build-and-run"},"2. Build and Run"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git clone https://github.com/redis-developer/riot.git\ncd riot/riot-redis\n./riot-redis\n")),(0,n.kt)("h3",{id:"3-install-via-homebrew-macos"},"3. Install via Homebrew (macOS)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"brew install jruaux/tap/riot-redis`\n")),(0,n.kt)("h3",{id:"usage"},"Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-redis\nUsage: {app} [OPTIONS] [COMMAND]\n      --help                Show this help message and exit.\n  -V, --version             Print version information and exit.\n  -q, --quiet               Log errors only\n  -d, --debug               Log in debug mode (includes normal stacktrace)\n  -i, --info                Set log level to info\n")),(0,n.kt)("p",null,"You can use --help on any subcommand:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-redis --help\n\n\u276f riot-redis import --help\n\n\u276f riot-redis import ..  hset --help\n")),(0,n.kt)("p",null,"Redis connection options are the same as redis-cli:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"  -h, --hostname=<host>     Server hostname (default: 127.0.0.1)\n  -p, --port=<port>         Server port (default: 6379)\n  -s, --socket=<socket>     Server socket (overrides hostname and port)\n      --user=<username>     Used to send ACL style 'AUTH username pass'. Needs password.\n  -a, --pass[=<password>]   Password to use when connecting to the server\n  -u, --uri=<uri>           Server URI\n  -o, --timeout=<sec>       Redis command timeout (default: 60)\n  -n, --db=<int>            Database number (default: 0)\n  -c, --cluster             Enable cluster mode\n  -t, --tls                 Establish a secure TLS connection\n  -l, --latency             Show latency metrics\n  -m, --pool=<int>          Max pool connections (default: 8)\n")),(0,n.kt)("p",null,"Redis URI syntax is described here."),(0,n.kt)("h3",{id:"4-example"},"4. Example"),(0,n.kt)("p",null,"Here is an example of a live replication from a source Redis running on localhost and port 6379, to a target Redis running on localhost and port 6380:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-redis -h source -p 6379 replicate --idle-timeout 500 -h target -p 6380 --live\n")),(0,n.kt)("h3",{id:"5-verification"},"5. Verification"),(0,n.kt)("p",null,"Once replication is complete RIOT Redis will perform a verification step to compare values and TTLs between source and target databases. The output looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"OK:1000 V:0 >:0 <:0 T:0\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"OK: # identical values")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"V: # mismatched values")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},": # keys only present in source database"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"<: # keys only present in target database")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"T: # keys with TTL difference greater than tolerance"))),(0,n.kt)("h3",{id:"6-architecture"},"6. Architecture"),(0,n.kt)("p",null,"RIOT Redis implements client-side replication using a producer/consumer approach:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"the producer is connected to the source Redis (e.g. ElastiCache) and iterates over keys to read their corresponding values")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"the consumer is connected to the target Redis (e.g. Redis Enterprise Cloud) and writes the key/value tuples previously created"))),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Key reader: initiates a SCAN and optionally calls SUBSCRIBE to listen for keyspace notifications (live replication)."),(0,n.kt)("li",{parentName:"ol"},"Value reader: takes the keys and calls DUMP and TTL."),(0,n.kt)("li",{parentName:"ol"},"Key/Value writer: takes key/value/ttl tuples and calls RESTORE and EXPIRE.")),(0,n.kt)("p",null,"Note: Live replication makes use of keyspace notifications. Make sure the source Redis database has keyspace notifications enabled using notify-keyspace-events = KA in redis.conf or via CONFIG SET."),(0,n.kt)("p",null,"Note: The live replication mechanism does not guarantee data consistency. Redis sends keyspace notifications over pub/sub which does not provide guaranteed delivery. It is possible that RIOT Redis can miss some notifications in case of network failures for example.")),(0,n.kt)(o.Z,{value:"RIOT DB",mdxType:"TabItem"},(0,n.kt)("p",null,"RIOT DB lets you import/export data from relational databases."),(0,n.kt)("h3",{id:"1-getting-started-1"},"1. Getting Started"),(0,n.kt)("p",null,"Download the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/riot/releases/latest"},"latest release")," and unzip the archive."),(0,n.kt)("p",null,"Launch the bin/riot-db script and follow the usage information provided."),(0,n.kt)("h3",{id:"2-build-and-run-1"},"2. Build and Run"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f git clone https://github.com/redis-developer/riot.git\n\u276f cd riot/riot-db\n\u276f ./riot-db\n")),(0,n.kt)("h3",{id:"3-install-via-homebrew-macos-1"},"3. Install via Homebrew (macOS)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"brew install jruaux/tap/riot-db\n")),(0,n.kt)("h3",{id:"4-usage"},"4. Usage"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-db\nUsage: riot-db [OPTIONS] [COMMAND]\n      --help                Show this help message and exit.\n  -V, --version             Print version information and exit.\n  -q, --quiet               Log errors only\n  -d, --debug               Log in debug mode (includes normal stacktrace)\n  -i, --info                Set log level to info\n")),(0,n.kt)("p",null,"You can use --help on any subcommand:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-db --help\n\u276f riot-db import --help\n\u276f riot-db import \u2026 hset --help\n")),(0,n.kt)("p",null,"Redis connection options are the same as redis-cli:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"  -h, --hostname=<host>     Server hostname (default: 127.0.0.1)\n  -p, --port=<port>         Server port (default: 6379)\n  -s, --socket=<socket>     Server socket (overrides hostname and port)\n      --user=<username>     Used to send ACL style 'AUTH username pass'. Needs password.\n  -a, --pass[=<password>]   Password to use when connecting to the server\n  -u, --uri=<uri>           Server URI\n  -o, --timeout=<sec>       Redis command timeout (default: 60)\n  -n, --db=<int>            Database number (default: 0)\n  -c, --cluster             Enable cluster mode\n  -t, --tls                 Establish a secure TLS connection\n  -l, --latency             Show latency metrics\n  -m, --pool=<int>          Max pool connections (default: 8)\n\n")),(0,n.kt)("h3",{id:"5-drivers"},"5. Drivers"),(0,n.kt)("p",null,"RIOT DB includes drivers for the most common RDBMSs:"),(0,n.kt)("h4",{id:"oracle"},"Oracle"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"jdbc:oracle:thin:@myhost:1521:orcl\n")),(0,n.kt)("h4",{id:"ibm-db2"},"IBM Db2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"jdbc:db2://host:port/database\n")),(0,n.kt)("h4",{id:"ms-sql-server"},"MS SQL Server"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"jdbc:sqlserver://[serverName[\\instanceName][:portNumber]][;property=value[;property=value]]\n")),(0,n.kt)("h4",{id:"mysql"},"MySQL"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"jdbc:mysql://[host]:[port][/database][?properties]\n")),(0,n.kt)("h4",{id:"postgresql"},"PostgreSQL"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"jdbc:postgresql://host:port/database\n")),(0,n.kt)("h4",{id:"sqlite"},"SQLite"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"jdbc:sqlite:sqlite_database_file_path\n")),(0,n.kt)("p",null,"For non-included databases you must install the corresponding JDBC driver under the lib directory and modify the RIOT DB CLASSPATH:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"*nix: bin/riot-db \u2192 CLASSPATH=$APP_HOME/lib/myjdbc.jar:$APP_HOME/lib/\u2026\nWindows: bin{app}.bat \u2192 set CLASSPATH=%APP_HOME%\\lib\\myjdbc.jar;%APP_HOME%\\lib\\\u2026\n")),(0,n.kt)("h3",{id:"6-import"},"6. Import"),(0,n.kt)("p",null,"Use the import command to import the result set of a SQL statement."),(0,n.kt)("h4",{id:"import-from-postgresql"},"Import from PostgreSQL"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'\u276f riot-db -h localhost -p 6379 import "SELECT * FROM orders" --url jdbc:postgresql://host:port/database --username appuser --password passwd hset --keyspace order --keys order_id\n')),(0,n.kt)("p",null,"You can specify one or many Redis commands as targets of the import:"),(0,n.kt)("h4",{id:"import-into-hashes"},"Import into hashes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-db import .. set --keyspace blah --keys id\n")),(0,n.kt)("h4",{id:"import-into-hashes-and-set-ttl-on-the-key"},"Import into hashes and set TTL on the key"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-db import .. hset --keyspace blah --keys id expire --keyspace blah --keys id\n")),(0,n.kt)("h4",{id:"import-into-hashes-and-set-ttl-and-add-to-a-set-named-myset"},"Import into hashes and set TTL and add to a set named myset"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f riot-db import .. hset --keyspace blah --keys id expire --keyspace blah --keys id sadd --keyspace myset --members id\n")),(0,n.kt)("h3",{id:"7-export"},"7. Export"),(0,n.kt)("h4",{id:"export-to-postgresql"},"Export to PostgreSQL"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'\u276f riot-db export "INSERT INTO mytable (id, field1, field2) VALUES (CAST(:id AS SMALLINT), :field1, :field2)" --url jdbc:postgresql://host:port/database --username appuser --password passwd --scan-match "hash:*" --key-regex "hash:(?<id>.*)"\n')),(0,n.kt)("h4",{id:"import-from-postgresql-to-json-strings"},"Import from PostgreSQL to JSON strings"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'\u276f riot-db -h localhost -p 6379 import "SELECT * FROM orders" --url jdbc:postgresql://host:port/database --username appuser --password passwd set --keyspace order --keys order_id\n')),(0,n.kt)("p",null,"This will produce Redis strings that look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n        "order_id": 10248,\n        "customer_id": "VINET",\n        "employee_id": 5,\n        "order_date": "1996-07-04",\n        "required_date": "1996-08-01",\n        "shipped_date": "1996-07-16",\n        "ship_via": 3,\n        "freight": 32.38,\n        "ship_name": "Vins et alcools Chevalier",\n        "ship_address": "59 rue de l\'Abbaye",\n        "ship_city": "Reims",\n        "ship_postal_code": "51100",\n        "ship_country": "France"\n}\n')))))}m.isMDXComponent=!0}}]);