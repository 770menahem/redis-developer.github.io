"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[464],{85162:(e,a,n)=>{n.d(a,{Z:()=>o});var t=n(67294),i=n(86010);const r="tabItem_Ymn6";function o(e){let{children:a,hidden:n,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:n},a)}},65488:(e,a,n)=>{n.d(a,{Z:()=>u});var t=n(87462),i=n(67294),r=n(86010),o=n(72389),s=n(67392),l=n(7094),d=n(12466);const p="tabList__CuJ",m="tabItem_LNqP";function c(e){var a;const{lazy:n,block:o,defaultValue:c,values:u,groupId:h,className:g}=e,k=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=u??k.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),f=(0,s.l)(N,((e,a)=>e.value===a.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(a=k.find((e=>e.props.default)))?void 0:a.props.value)??k[0].props.value;if(null!==v&&!N.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,l.U)(),[w,C]=(0,i.useState)(v),R=[],{blockElementScrollPositionUntilNextRender:S}=(0,d.o5)();if(null!=h){const e=b[h];null!=e&&e!==w&&N.some((a=>a.value===e))&&C(e)}const T=e=>{const a=e.currentTarget,n=R.indexOf(a),t=N[n].value;t!==w&&(S(a),C(t),null!=h&&y(h,String(t)))},A=e=>{var a;let n=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const a=R.indexOf(e.currentTarget)+1;n=R[a]??R[0];break}case"ArrowLeft":{const a=R.indexOf(e.currentTarget)-1;n=R[a]??R[R.length-1];break}}null==(a=n)||a.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},g)},N.map((e=>{let{value:a,label:n,attributes:o}=e;return i.createElement("li",(0,t.Z)({role:"tab",tabIndex:w===a?0:-1,"aria-selected":w===a,key:a,ref:e=>R.push(e),onKeyDown:A,onClick:T},o,{className:(0,r.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":w===a})}),n??a)}))),n?(0,i.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map(((e,a)=>(0,i.cloneElement)(e,{key:a,hidden:e.props.value!==w})))))}function u(e){const a=(0,o.Z)();return i.createElement(c,(0,t.Z)({key:String(a)},e))}},71131:(e,a,n)=>{n.d(a,{Z:()=>h});var t=n(67294),i=n(3905),r=n(52195);const o="riContainer_bco2",s="riDescriptionShort_E27B",l="riDetail_wzFs",d="riIcon_yDou",p="riTitle_x6vI",m="riDescription_RDnu",c="riMore_apRP";var u=n(86010);const h=e=>{const[a,n]=t.useState(!1);return t.createElement("a",{href:e.page,className:o},t.createElement("div",{className:s},t.createElement("div",{className:d},t.createElement("span",{className:"fe fe-zap"})),t.createElement("div",{className:l},t.createElement("div",{className:p},t.createElement("a",{href:e.page},e.title)),t.createElement("div",{className:m},e.description,t.Children.count(e.children)>0&&t.createElement("span",{className:(0,u.Z)(c,"fe","fe-more-horizontal"),onClick:()=>n(!a)})))),a&&t.createElement("div",{className:"ri-description-long"},t.createElement(i.Zo,{components:r.Z},e.children)))}},87253:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var t=n(87462),i=(n(67294),n(3905));n(65488),n(85162),n(44996),n(71131);const r={id:"redis-om-spring-hash",title:"Enhanced Mapping of Java Objects to Hashes",sidebar_label:"Working with Hashes",slug:"/develop/java/spring/redis-om/redis-om-spring-hash"},o=void 0,s={unversionedId:"develop/java/spring/redis-om/redis-om-spring-hash",id:"develop/java/spring/redis-om/redis-om-spring-hash",title:"Enhanced Mapping of Java Objects to Hashes",description:"Introduction",source:"@site/docs/develop/java/spring/redis-om/index-redis-om-spring-hash.mdx",sourceDirName:"develop/java/spring/redis-om",slug:"/develop/java/spring/redis-om/redis-om-spring-hash",permalink:"/develop/java/spring/redis-om/redis-om-spring-hash",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/java/spring/redis-om/index-redis-om-spring-hash.mdx",tags:[],version:"current",lastUpdatedAt:1655485542,formattedLastUpdatedAt:"Jun 17, 2022",frontMatter:{id:"redis-om-spring-hash",title:"Enhanced Mapping of Java Objects to Hashes",sidebar_label:"Working with Hashes",slug:"/develop/java/spring/redis-om/redis-om-spring-hash"},sidebar:"docs",previous:{title:"Working with JSON",permalink:"/develop/java/spring/redis-om/redis-om-spring-json"},next:{title:"Overview",permalink:"/develop/java/redis-and-spring-course"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"What You Will build",id:"what-you-will-build",level:2},{value:"What You need",id:"what-you-need",level:2},{value:"Starting with Spring Initializr",id:"starting-with-spring-initializr",level:2},{value:"Adding Redis OM Spring",id:"adding-redis-om-spring",level:2},{value:"Maven",id:"maven",level:3},{value:"Gradle",id:"gradle",level:3},{value:"Enabling Redis Repositories",id:"enabling-redis-repositories",level:2},{value:"\ud83d\ude80 Launch Redis",id:"-launch-redis",level:2},{value:"Domain Entity",id:"domain-entity",level:2},{value:"Creating a Repository",id:"creating-a-repository",level:2},{value:"Pre-populating the Database",id:"pre-populating-the-database",level:2},{value:"Where&#39;s our data?",id:"wheres-our-data",level:2},{value:"RediSearch Indices",id:"redisearch-indices",level:3},{value:"Querying",id:"querying",level:3},{value:"Testing Controller",id:"testing-controller",level:3}],p={toc:d};function m(e){let{components:a,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The Spring Data Redis (SDR) framework makes it easy to write Spring applications that use the Redis as a store\nfor Java objects (POJOs) by eliminating the redundant tasks and boilerplate code required for interacting with\nthe store through Spring\u2019s excellent infrastructure support."),(0,i.kt)("p",null,"Redis OM Spring, builds on top of SDR to improve and optimize the interaction with Redis by leveraging\nRedis' rich module ecosystem. For Java objects mapped with SDR's ",(0,i.kt)("inlineCode",{parentName:"p"},"@RedisHash")," annotation we enhance the\nobject-mapping by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Eliminating the need for client-side maintained secondary indices and instead using Redis' native search engine: RediSearch."),(0,i.kt)("li",{parentName:"ul"},"Implementing dynamic repository finders using RediSearch fast and flexible querying"),(0,i.kt)("li",{parentName:"ul"},"Using ULIDs instead of traditional UUIDs for performance, readability and interoperability")),(0,i.kt)("h2",{id:"what-you-will-build"},"What You Will build"),(0,i.kt)("p",null,"You will build an application that stores ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," POJOs (Plain Old Java Objects) as Redis Hashes."),(0,i.kt)("h2",{id:"what-you-need"},"What You need"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"About 15 minutes"),(0,i.kt)("li",{parentName:"ul"},"A favorite text editor or IDE"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.oracle.com/technetwork/java/javase/downloads/index.html"},"JDK 11")," or later"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.gradle.org/downloads"},"Gradle 4+")," or ",(0,i.kt)("a",{parentName:"li",href:"http://maven.apache.org/download.cgi"},"Maven 3.2+")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.docker.com"},"Docker")," / ",(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/"},"Docker Compose"))),(0,i.kt)("h2",{id:"starting-with-spring-initializr"},"Starting with Spring Initializr"),(0,i.kt)("p",null,"We'll start by creating a base SpringBoot application using the ",(0,i.kt)("a",{parentName:"p",href:"https://start.spring.io"},"Spring Initializr"),". You can use this\n",(0,i.kt)("a",{parentName:"p",href:"https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.6.0&packaging=jar&jvmVersion=11&groupId=com.redis.om&artifactId=roms-hashes&name=roms-hashes&description=Redis%20OM%20Spring%20Enhanced%20RedisHash%20Demo&packageName=com.redis.om.roms-hashes&dependencies=web,lombok,devtools"},"pre-initialized project"),"\nand click Generate to download a ZIP file. This project is configured to fit the examples in this tutorial."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Spring Initializr",src:n(16594).Z,width:"2572",height:"1782"})),(0,i.kt)("p",null,"To configure the project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Navigate to ",(0,i.kt)("a",{parentName:"li",href:"https://start.spring.io."},"https://start.spring.io.")," This service pulls in all the dependencies you need for an application and does most of the setup for you."),(0,i.kt)("li",{parentName:"ul"},"Choose either Gradle or Maven and the language you want to use. This guide assumes that you chose Java."),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("em",{parentName:"li"},"Dependencies")," and select ",(0,i.kt)("em",{parentName:"li"},"Spring Web"),", ",(0,i.kt)("em",{parentName:"li"},"Lombok")," and ",(0,i.kt)("em",{parentName:"li"},"Spring Boot DevTools"),"."),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("em",{parentName:"li"},"Generate"),"."),(0,i.kt)("li",{parentName:"ul"},"Download the resulting ZIP file (",(0,i.kt)("inlineCode",{parentName:"li"},"roms-hashes.zip"),"), which is an archive of a web application that is configured with your choices.")),(0,i.kt)("p",null,"The dependencies included are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Spring Web"),": Build web/RESTful applications using Spring MVC. It will allow us to expose our app as a web service."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Lombok"),": Java annotation library which helps to reduce boilerplate code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Spring Boot DevTools"),": Provides fast application restarts, LiveReload, and configurations for enhanced development experience.")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"NOTE:")," If your IDE has the Spring Initializr integration, you can complete this process from your IDE."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"NOTE:")," You can also fork the project from Github and open it in your IDE or other editor."),(0,i.kt)("h2",{id:"adding-redis-om-spring"},"Adding Redis OM Spring"),(0,i.kt)("h3",{id:"maven"},"Maven"),(0,i.kt)("p",null,"To use Redis OM Spring, open the ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml")," file and add the Redis OM Spring Maven dependency to the pom.xml file ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n  <groupId>com.redis.om.spring</groupId>\n  <artifactId>redis-om-spring</artifactId>\n  <version>0.1.0-SNAPSHOT</version>\n</dependency>\n")),(0,i.kt)("h3",{id:"gradle"},"Gradle"),(0,i.kt)("p",null,"If using gradle add the dependency as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},"dependencies {\n  implementation 'com.redis.om.spring:redis-om-spring:0.1.0-SNAPSHOT'\n}\n")),(0,i.kt)("h2",{id:"enabling-redis-repositories"},"Enabling Redis Repositories"),(0,i.kt)("p",null,"The generated application contains a single Java file, the ",(0,i.kt)("inlineCode",{parentName:"p"},"@SpringBootApplication")," annotated main application.\nTo enable Spring Data Redis repositories, we also need to annotate the main or the configuration class with\n",(0,i.kt)("inlineCode",{parentName:"p"},"@EnableRedisEnhancedRepositories")," as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Configuration")," annotation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.redis.om;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport com.redis.om.spring.annotations.EnableRedisEnhancedRepositories;\n\n@SpringBootApplication\n@EnableRedisEnhancedRepositories(basePackages = "com.redis.om.hashes.*")\npublic class RomsHashesApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RomsHashesApplication.class, args);\n    }\n\n}\n')),(0,i.kt)("h2",{id:"-launch-redis"},"\ud83d\ude80 Launch Redis"),(0,i.kt)("p",null,"Redis OM Spring relies on the power of the ",(0,i.kt)("a",{parentName:"p",href:"https://oss.redis.com/redisearch/"},"RediSearch")," and ",(0,i.kt)("a",{parentName:"p",href:"https://oss.redis.com/redisjson/"},"RedisJSON")," modules.\nThe docker compose YAML file below can get started quickly. You can place at the root folder of your project and name it\n",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.9'\nservices:\n  redis:\n    image: 'redislabs/redismod:edge'\n    ports:\n      - '6379:6379'\n    volumes:\n      - ./data:/data\n    entrypoint: >\n      redis-server\n        --loadmodule /usr/lib/redis/modules/redisai.so\n        --loadmodule /usr/lib/redis/modules/redisearch.so\n        --loadmodule /usr/lib/redis/modules/redisgraph.so\n        --loadmodule /usr/lib/redis/modules/redistimeseries.so\n        --loadmodule /usr/lib/redis/modules/rejson.so\n        --loadmodule /usr/lib/redis/modules/redisbloom.so\n        --loadmodule /var/opt/redislabs/lib/modules/redisgears.so\n        --appendonly yes\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n")),(0,i.kt)("p",null,"To launch the docker compose application, on the command line (or via Docker Desktop), clone this repository\nand run (from the root folder):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up\n")),(0,i.kt)("p",null,"Let's also launch an instance of the Redis CLI so that we can spy on what ROMS is doing. To do so we'll\nlaunch Redis in monitor mode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"redis-cli MONITOR\n")),(0,i.kt)("h2",{id:"domain-entity"},"Domain Entity"),(0,i.kt)("p",null,"We'll have a single class in our application, the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," class. We'll use lombok to avoid having to\ncreate getters and setters. We'll use the lombok annotations ",(0,i.kt)("inlineCode",{parentName:"p"},"@Data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@RequiredArgsConstructor")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"@AllArgsConstructor"),"."),(0,i.kt)("p",null,"Finally, to mark the class as a JSON document, we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Document")," annotation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.redis.om.hashes.domain;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.annotation.Reference;\nimport org.springframework.data.redis.core.RedisHash;\nimport org.springframework.data.redis.core.index.Indexed;\n\nimport com.redis.om.spring.annotations.Bloom;\n\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\n\n@Data\n@RequiredArgsConstructor(staticName = "of")\n@AllArgsConstructor(access = AccessLevel.PROTECTED)\n@NoArgsConstructor\n@RedisHash\npublic class User {\n  @Id\n  private String id;\n\n  @Indexed @NonNull\n  private String firstName;\n\n  @Indexed\n  private String middleName;\n\n  @Indexed @NonNull\n  private String lastName;\n\n  @NonNull\n  @Indexed\n  String email;\n}\n')),(0,i.kt)("p",null,"We use Spring Data Redis ",(0,i.kt)("inlineCode",{parentName:"p"},"@RedisHash")," annotation. The property named ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," is annotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"org.springframework.data.annotation.Id"),".\nThose two items are responsible for creating the actual key used to persist the Hash in Redis."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," class has a ",(0,i.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"middleName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName"),", as well as an ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," property."),(0,i.kt)("h2",{id:"creating-a-repository"},"Creating a Repository"),(0,i.kt)("p",null,"As with other Spring Data projects, Spring Data Redis provides the most common methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"save"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"delete"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"findById")," when you extend ",(0,i.kt)("inlineCode",{parentName:"p"},"CrudRepository")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"PagingAndSortingRepository"),"."),(0,i.kt)("p",null,"Let's create a basic repository under ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/java/com/redis/om/hashes/repositories")," with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"package com.redis.om.hashes.repositories;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.redis.om.hashes.domain.User;\n\n@Repository\npublic interface UserRepository extends CrudRepository<User, String> {\n}\n")),(0,i.kt)("h2",{id:"pre-populating-the-database"},"Pre-populating the Database"),(0,i.kt)("p",null,"Let's add a few ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," POJOs to Redis on application start-up by modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"RomsHashesApplication")," class\nto include the newly created ",(0,i.kt)("inlineCode",{parentName:"p"},"UserRepository")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Autowired"),"\nannotation. Then we'll use a ",(0,i.kt)("inlineCode",{parentName:"p"},"CommandLineRunner")," ",(0,i.kt)("inlineCode",{parentName:"p"},"@Bean")," annotated method to create four ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," POJOs and\nsave them to the database."),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"CommandLineRunner")," we take the following steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the repository ",(0,i.kt)("inlineCode",{parentName:"li"},"deleteAll")," method to clear the database (be careful with this is production! \ud83d\ude40)"),(0,i.kt)("li",{parentName:"ul"},"Create four ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," instances; we'll use the four band members of Rage Against the Machine."),(0,i.kt)("li",{parentName:"ul"},"Use the repository ",(0,i.kt)("inlineCode",{parentName:"li"},"saveAll")," method to save all ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," POJOs in bulk.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.redis.om.hashes;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.redis.om.hashes.domain.User;\nimport com.redis.om.hashes.repositories.UserRepository;\nimport com.redis.om.spring.annotations.EnableRedisEnhancedRepositories;\n\n@SpringBootApplication\n@Configuration\n@EnableRedisEnhancedRepositories(basePackages = "com.redis.om.hashes.*")\npublic class RomsHashesApplication {\n\n  @Autowired\n  private UserRepository userRepo;\n\n  @Bean\n  CommandLineRunner loadTestData() {\n    return args -> {\n      userRepo.deleteAll();\n\n      User john = User.of("Zack", "de la Rocha", "zack@ratm.com");\n      User tim = User.of("Tim", "Commerford", "tim@ratm.com");\n      User tom = User.of("Tom", "Morello", "tom@ratm.com");\n      User brad = User.of("Brad", "Wilk", "brad@ratm.com");\n\n      userRepo.saveAll(List.of(john, tim, tom, brad));\n    };\n  }\n\n    public static void main(String[] args) {\n        SpringApplication.run(RomsHashesApplication.class, args);\n    }\n\n}\n')),(0,i.kt)("p",null,"Since we are using Spring Boot DevTools, if you already had the application running, it should have restarted/reloaded. If\nnot, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn")," command to launch the application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./mvnw spring-boot:run\n")),(0,i.kt)("p",null,"If every goes as expected, you should see the familiar Spring Boot banner fly by:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"[INFO] --- spring-boot-maven-plugin:2.6.0-M1:run (default-cli) @ roms-documents ---\n[INFO] Attaching agents: []\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::             (v2.6.0-M1)\n\n2021-11-30 09:45:58.094  INFO 36380 --- [  restartedMain] c.r.o.d.RomsDocumentsApplication         : Starting RomsDocumentsApplication using Java 11.0.9 on BSB.lan with PID 36380 (/Users/bsb/Code/module-clients/java/high-level/redis-om/redis-om-spring/demos/roms-documents/target/classes started by briansam-bodden in /Users/bsb/Code/module-clients/java/high-level/redis-om/redis-om-spring/demos/roms-documents)\n")),(0,i.kt)("h2",{id:"wheres-our-data"},"Where's our data?"),(0,i.kt)("p",null,"If you were watching the Redis CLI monitor you should have seen a barrage of output fly by. Let's break it down\nand inspect it using another Redis CLI so as to understand the inner workings of the system."),(0,i.kt)("h3",{id:"redisearch-indices"},"RediSearch Indices"),(0,i.kt)("p",null,"At the top you should have seen the ",(0,i.kt)("inlineCode",{parentName:"p"},"FT.CREATE")," command which using the annotations in our POJO determined a RediSearch\nindex recipe. Since our POJO is annotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Document")," we get a RediSearch index ",(0,i.kt)("inlineCode",{parentName:"p"},"ON JSON")," against any keys starting\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company:")," (which is the default key prefix for Spring Data Redis and also for ROMS):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'1638336613.156351 [0 172.19.0.1:63396] "FT.CREATE" "UserIdx" "ON" "HASH" "PREFIX" "1" "com.redis.om.hashes.domain.User:" "SCHEMA" "firstName" "AS" "firstName" "TAG" "middleName" "AS" "middleName" "TAG" "lastName" "AS" "lastName" "TAG" "email" "AS" "email" "TAG"\n')),(0,i.kt)("p",null,"ROMS uses the POJO fields annotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Indexed")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@Searchable")," to build the index schema. In the case of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," POJO\nwe have the fields ",(0,i.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"middleName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),' are all annotated as "indexable",\nmeaning that we can do exact searches over these fields.'),(0,i.kt)("p",null,"Spring Data Redis creates a SET to maintain primary keys for our entities, ROMS inherits this functionality from SDR. The ",(0,i.kt)("inlineCode",{parentName:"p"},"DEL"),"\ncommand following the index creation is triggered because of the call to ",(0,i.kt)("inlineCode",{parentName:"p"},"userRepo.deleteAll();")," in our data loading method. If we\nhad any saved objects already we would also see calls to delete those individual instances."),(0,i.kt)("p",null,"For each of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," POJO we should see a sequence of REDIS commands like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'1638340447.180533 [0 172.19.0.1:63398] "SISMEMBER" "com.redis.om.hashes.domain.User" "01FNTB6JWTQHMK7NTEYA8725MP"\n1638340447.198702 [0 172.19.0.1:63398] "DEL" "com.redis.om.hashes.domain.User:01FNTB6JWTQHMK7NTEYA8725MP"\n1638340447.200874 [0 172.19.0.1:63398] "HMSET" "com.redis.om.hashes.domain.User:01FNTB6JWTQHMK7NTEYA8725MP" "_class" "com.redis.om.hashes.domain.User" "email" "zack@ratm.com" "firstName" "Zack" "id" "01FNTB6JWTQHMK7NTEYA8725MP" "lastName" "de la Rocha"\n1638340447.203121 [0 172.19.0.1:63398] "SADD" "com.redis.om.hashes.domain.User" "01FNTB6JWTQHMK7NTEYA8725MP"\n')),(0,i.kt)("p",null,"First SDR checks whether the object already exists in the Redis SET of primary keys using the ",(0,i.kt)("inlineCode",{parentName:"p"},"SISMEMBER")," command. Then,\na ",(0,i.kt)("inlineCode",{parentName:"p"},"DEL")," is issued to remove the Hash, following by a ",(0,i.kt)("inlineCode",{parentName:"p"},"HMSET")," to write the new or udpated Hash. Finally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," property\nof the object is addded to the primary keys set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"SADD")," command."),(0,i.kt)("p",null,"Let's inspect the data using the Redis CLI. We'll start by listing the keys prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"com.redis.om.hashes.domain.User"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> SCAN 0 MATCH com.redis.om.hashes.domain.User*\n1) "0"\n2) 1) "com.redis.om.hashes.domain.User:01FNTB6JWTQHMK7NTEYA8725MP"\n   2) "com.redis.om.hashes.domain.User:01FNTB6JZ2NSQNST3BBH1J1039"\n   3) "com.redis.om.hashes.domain.User:01FNTB6JYP4X15EAF08YBK55WR"\n   4) "com.redis.om.hashes.domain.User:01FNTB6JYXAZ6H7AJ9ZWHHW73H"\n   5) "com.redis.om.hashes.domain.User"\n')),(0,i.kt)("p",null,"We have 5 matches, one for each of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," POJOs created plus the Redis SET for the primary keys.\nLet's inspect some of the values."),(0,i.kt)("p",null,"Let's check what type of data structure is stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company")," key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> TYPE "com.redis.om.hashes.domain.User"\nset\n')),(0,i.kt)("p",null,"Knowing that it is a Redis SET, let inspect it's contents using the ",(0,i.kt)("inlineCode",{parentName:"p"},"SMEMBERS")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> SMEMBERS "com.redis.om.hashes.domain.User"\n1) "01FNTB6JZ2NSQNST3BBH1J1039"\n2) "01FNTB6JWTQHMK7NTEYA8725MP"\n3) "01FNTB6JYXAZ6H7AJ9ZWHHW73H"\n4) "01FNTB6JYP4X15EAF08YBK55WR"\n')),(0,i.kt)("p",null,"The set contains all the Ids of our Users. Now, let's investigate the ",(0,i.kt)("inlineCode",{parentName:"p"},"com.redis.om.documents.domain.Company:01FNRW9V98CYQMV2YAB7M4KFGQ")," key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> TYPE "com.redis.om.hashes.domain.User:01FNTB6JWTQHMK7NTEYA8725MP"\nhash\n')),(0,i.kt)("p",null,"The Redis datatype stored is a ",(0,i.kt)("inlineCode",{parentName:"p"},"hash")," (a Redis Hash). Let's check its contents using the ",(0,i.kt)("inlineCode",{parentName:"p"},"HGETALL")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> HGETALL "com.redis.om.hashes.domain.User:01FNTB6JWTQHMK7NTEYA8725MP"\n 1) "_class"\n 2) "com.redis.om.hashes.domain.User"\n 3) "email"\n 4) "zack@ratm.com"\n 5) "firstName"\n 6) "Zack"\n 7) "id"\n 8) "01FNTB6JWTQHMK7NTEYA8725MP"\n 9) "lastName"\n10) "de la Rocha"\n')),(0,i.kt)("h3",{id:"querying"},"Querying"),(0,i.kt)("p",null,"ROMS most compelling feature is the ability to create repository implementations automatically, at runtime,\nfrom a repository interface."),(0,i.kt)("p",null,"Let's start with a simple method declaration in ",(0,i.kt)("inlineCode",{parentName:"p"},"UserRepository")," that will find a unique instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," given\ntheir lastname."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"package com.redis.om.hashes.repositories;\n\nimport java.util.Optional;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.redis.om.hashes.domain.User;\n\n@Repository\npublic interface UserRepository extends CrudRepository<User, String> {\n  Optional<User> findOneByLastName(String lastName);\n}\n")),(0,i.kt)("p",null,"ROMS uses the method name, parameters and return type to determine the correct query to generate and how to\npackage and return a result."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"findOneByLastName")," return an ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," this tells ROMS to return a null payload if the entity is not found. The ",(0,i.kt)("inlineCode",{parentName:"p"},"findOne")," part\nalso reinforces that even if there are multiple results we are only interested in getting one. ROMS parses the method name\nto detemined the number of expected parameters, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ByLastName")," portion of the method tell us we expect 1 single parameter named ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,i.kt)("h3",{id:"testing-controller"},"Testing Controller"),(0,i.kt)("p",null,"Let's create a REST controller to test the ",(0,i.kt)("inlineCode",{parentName:"p"},"findOneByLastName")," method. Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"UserController")," under the package\n",(0,i.kt)("inlineCode",{parentName:"p"},"com.redis.om.hashes.controllers")," as shown:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.redis.om.hashes.controllers;\n\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.redis.om.hashes.domain.User;\nimport com.redis.om.hashes.repositories.UserRepository;\n\n@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @GetMapping("name/{lastName}")\n  Optional<User> byName(@PathVariable("lastName") String lastName) {\n    return userRepository.findOneByLastName(lastName);\n  }\n\n}\n')),(0,i.kt)("p",null,"In our controller, we include our ",(0,i.kt)("inlineCode",{parentName:"p"},"UserRepository")," and create simple method to respond to a GET request at\n",(0,i.kt)("inlineCode",{parentName:"p"},"/api/users/name/{lastName}")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"{lastName}")," would be the string parameter we are passing as the ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName")," to find."),(0,i.kt)("p",null,"Let's test the endpoint using CURL and passing the exact company name ",(0,i.kt)("inlineCode",{parentName:"p"},"Redis"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\u279c curl --location --request GET \'http://localhost:8080/api/users/name/Morello\'\n{"id":"01FNTB6JYXAZ6H7AJ9ZWHHW73H","firstName":"Tom","middleName":null,"lastName":"Morello","email":"tom@ratm.com"}\n')),(0,i.kt)("p",null,"Let's format the resulting JSON:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "01FNTB6JYXAZ6H7AJ9ZWHHW73H",\n  "firstName": "Tom",\n  "middleName": null,\n  "lastName": "Morello",\n  "email": "tom@ratm.com"\n}\n')),(0,i.kt)("p",null,"Inspecting the Redis CLI MONITOR we should see the RediSearch query issued:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'1638342334.137327 [0 172.19.0.1:63402] "FT.SEARCH" "UserIdx" "@lastName:{Morello} "\n')),(0,i.kt)("p",null,"Let say that we wanted to find ",(0,i.kt)("inlineCode",{parentName:"p"},"Users")," by the combination of ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"firstName"),", we could add\na query declaration to the repository interface like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"List<User> findByFirstNameAndLastName(String firstName, String lastName);\n")),(0,i.kt)("p",null,"In this case method ",(0,i.kt)("inlineCode",{parentName:"p"},"findByFirstNameAndLastName")," is parsed and the ",(0,i.kt)("inlineCode",{parentName:"p"},"And")," keyword is used to determine that\nthe method is expecting 2 parameters; ",(0,i.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,i.kt)("p",null,"To test it we could add the following to our controller:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@GetMapping("/q")\npublic List<User> findByName(@RequestParam String firstName, @RequestParam String lastName) {\n  return userRepository.findByFirstNameAndLastName(firstName, lastName);\n}\n')),(0,i.kt)("p",null,"Using CURL to test we"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\u279c curl --location --request GET \'http://localhost:8080/api/users/q?firstName=Brad&lastName=Wilk\'\n[{"id":"01FNTE5KWCZ5H438JGB4AZWE85","firstName":"Brad","middleName":null,"lastName":"Wilk","email":"brad@ratm.com"}]\n')),(0,i.kt)("p",null,"Formatting the resulting JSON we can see the record for ",(0,i.kt)("inlineCode",{parentName:"p"},"Brad Wilk")," is returned as the only element of the JSON Array result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "01FNTE5KWCZ5H438JGB4AZWE85",\n    "firstName": "Brad",\n    "middleName": null,\n    "lastName": "Wilk",\n    "email": "brad@ratm.com"\n  }\n]\n')),(0,i.kt)("p",null,"Back on the Redis CLI monitor we can see the RediSearch query generated by our repository method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'1638343589.454213 [0 172.19.0.1:63406] "FT.SEARCH" "UserIdx" "@firstName:{Brad} @lastName:{Wilk} "\n')),(0,i.kt)("p",null,"Redis OM Spring, extends Spring Data Redis with search capabilities that rival the flexibility of JPA\nqueries by using Redis' native search engine; RediSearch."))}m.isMDXComponent=!0},16594:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/redis-om-spring-tut-002-d1b6cf01dd7a2b8690a3fe52b0c07d13.png"}}]);