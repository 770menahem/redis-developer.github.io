"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[3878],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var l=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},s=Object.keys(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=l.createContext({}),i=function(e){var t=l.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=i(e.components);return l.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=i(n),p=r,k=d["".concat(u,".").concat(p)]||d[p]||m[p]||s;return n?l.createElement(k,o(o({ref:t},c),{},{components:n})):l.createElement(k,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var i=2;i<s;i++)o[i]=n[i];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var l=n(67294),r=n(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return l.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>p});var l=n(87462),r=n(67294),s=n(86010),o=n(72389),a=n(67392),u=n(7094),i=n(12466);const c="tabList__CuJ",m="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:p,groupId:k,className:y}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??h.map((e=>{let{props:{value:t,label:n,attributes:l}}=e;return{value:t,label:n,attributes:l}})),b=(0,a.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:T}=(0,u.U)(),[O,E]=(0,r.useState)(v),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,i.o5)();if(null!=k){const e=g[k];null!=e&&e!==O&&f.some((t=>t.value===e))&&E(e)}const w=e=>{const t=e.currentTarget,n=x.indexOf(t),l=f[n].value;l!==O&&(C(t),E(l),null!=k&&T(k,String(l)))},R=e=>{var t;let n=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},y)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,l.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>x.push(e),onKeyDown:R,onClick:w},o,{className:(0,s.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":O===t})}),n??t)}))),n?(0,r.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function p(e){const t=(0,o.Z)();return r.createElement(d,(0,l.Z)({key:String(t)},e))}},53742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var l=n(87462),r=(n(67294),n(3905)),s=n(65488),o=n(85162);const a={},u=void 0,i={unversionedId:"howtos/quick-start/cheat-sheets/generic",id:"howtos/quick-start/cheat-sheets/generic",title:"generic",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/generic.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/generic",permalink:"/howtos/quick-start/cheat-sheets/generic",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/generic.mdx",tags:[],version:"current",lastUpdatedAt:1694812977,formattedLastUpdatedAt:"Sep 15, 2023",frontMatter:{}},c={},m=[],d={toc:m};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"NodeRedis",value:"NODE_JS"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"CLI",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("strong",null,"Command")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Syntax")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Example")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Output"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"KEYS"),(0,r.kt)("td",null,"KEYS pattern"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nKEYS my*\n"))),(0,r.kt)("td",null,'1) "myKey" 2) "myCounter"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns all keys matching pattern.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"EXISTS"),(0,r.kt)("td",null,"EXISTS key [key ...]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nEXISTS myKey\n"))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Checks if one or more keys exist.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"EXPIRE"),(0,r.kt)("td",null,"EXPIRE key seconds"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nEXPIRE myKey 120\n"))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Set a timeout on a key.After the timeout has expired, the key will automatically be deleted.",(0,r.kt)("em",null,"Time Complexity:"),"O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"TTL"),(0,r.kt)("td",null,"TTL key"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nTTL myKey\n"))),(0,r.kt)("td",null,"(integer) 113")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns the remaining time to live of a key that has a timeout.",(0,r.kt)("em",null,"Time Complexity:")," O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"PERSIST"),(0,r.kt)("td",null,"PERSIST key"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nPERSIST myKey\n"))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Removes the expiration from a key.",(0,r.kt)("em",null,"Time Complexity:"),"O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SCAN"),(0,r.kt)("td",null,"SCAN cursor [MATCH pattern] [COUNT count]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nSCAN 0 MATCH my* COUNT 2\n"))),(0,r.kt)("td",null,'1) "3" 2) 1) "myCounter" 2) "myKey"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Iterates the set of keys in the currently selected Redis database.",(0,r.kt)("em",null,"Time Complexity:")," O(1) for every call. O(N) for a complete iteration.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"DEL"),(0,r.kt)("td",null,"DEL key [key ...]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nDEL myKey\n"))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Removes the specified keys.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"INFO"),(0,r.kt)("td",null,"INFO [section]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nINFO server\nINFO keyspace\n"))),(0,r.kt)("td",null,"# Server",(0,r.kt)("br",null),"redis_version:6.2.5",(0,r.kt)("br",null),"redis_git_sha1:00000000",(0,r.kt)("br",null),"redis_build_id:9893b2a-dirty",(0,r.kt)("br",null),"redis_mode:standalone",(0,r.kt)("br",null),"os:Linux 5.4.72-microsoft-standard-WSL2 x86_64",(0,r.kt)("br",null),"arch_bits:64",(0,r.kt)("br",null),"... ",(0,r.kt)("br",null),"# Keyspace db0:keys=2,expires=0,avg_ttl=0")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:"),"Returns information and statistics about the server, with the different sections like - server, clients, memory, persistence, stats, replication, cpu, commandstats, latencystats, sentinel, cluster, modules, keyspace, errorstats.",(0,r.kt)("em",null,"Time Complexity:")," O(1)"))))),(0,r.kt)(o.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    KEYS pattern\n    Returns all keys matching pattern.\n    Time Complexity: O(N)\n    */\nconst keysResult = await client.keys('my*');\nconsole.log(keysResult); // [\"myKey\", \"myCounter\"]\n\n/*\n    EXISTS key [key ...]\n    Checks if one or more keys exist.\n    Time Complexity: O(N)\n    */\nconst existsResult = await client.exists('myKey');\nconsole.log(existsResult); // 1\n\n/*\n    EXPIRE key seconds\n    Set a timeout on a key. After the timeout has expired, the key will automatically be deleted.\n    Time Complexity: O(1)\n    */\nconst expireResult = await client.expire('myKey', 120);\nconsole.log(expireResult); // true\n\n/*\n    TTL key\n    Returns the remaining time to live of a key that has a timeout.\n    Time Complexity: O(1)\n    */\nconst ttlResult = await client.ttl('myKey');\nconsole.log(ttlResult); // 113\n\n/*\n    PERSIST key\n    Removes the expiration from a key.\n    Time Complexity: O(1)\n    */\nconst persistResult = await client.persist('myKey');\nconsole.log(persistResult); // true\n\n/*\n    SCAN cursor [MATCH pattern] [COUNT count]\n    Iterates the set of keys in the currently selected Redis database.\n    Time Complexity: O(1) for every call. O(N) for a complete iteration.\n    */\nconst scanOptions = {\n  TYPE: 'string',\n  MATCH: 'my*',\n  COUNT: 2,\n};\nlet cursor = 0;\n\n// scan 1\nlet scanResult = await client.scan(cursor, scanOptions);\nconsole.log(scanResult); // { cursor: 4, keys: [ 'myCounter', 'myKey' ] }\n\n// scan 2\ncursor = scanResult.cursor;\nscanResult = await client.scan(cursor, scanOptions);\nconsole.log(scanResult); //{ cursor: 12, keys: [ 'myOtherkey' ] }\n\n// ... scan n\n\nconsole.log('OR use any loop to continue the scan by cursor value');\ncursor = 0;\ndo {\n  scanResult = await client.scan(cursor, scanOptions);\n  console.log(scanResult);\n  cursor = scanResult.cursor;\n} while (cursor != 0);\n\n/*\n    DEL key [key ...]\n    Removes the specified keys.\n    Time Complexity: O(N)\n    */\nconst delResult = await client.del('myKey');\nconsole.log(delResult); // 1\n\n/*\n    INFO [section]\n    Returns information and statistics about the server, with the different sections\n        like - server, clients, memory, persistence, stats, replication, cpu, commandstats,\n        latencystats, sentinel, cluster, modules, keyspace, errorstats.\n    Time Complexity: O(1)\n    */\nlet infoResult = await client.info('keyspace');\nconsole.log(infoResult); //# Keyspace \\n db0:keys=2,expires=0,avg_ttl=0\"\n")))))}p.isMDXComponent=!0}}]);