"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[8338,5653,7644,6045,8454],{3905:(e,t,i)=>{i.d(t,{Zo:()=>l,kt:()=>h});var a=i(67294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function n(e,t){if(null==e)return{};var i,a,o=function(e,t){if(null==e)return{};var i,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var i=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=n(e,["components","mdxType","originalType","parentName"]),p=d(i),h=o,u=p["".concat(c,".").concat(h)]||p[h]||m[h]||r;return i?a.createElement(u,s(s({ref:t},l),{},{components:i})):a.createElement(u,s({ref:t},l))}));function h(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=i.length,s=new Array(r);s[0]=p;var n={};for(var c in t)hasOwnProperty.call(t,c)&&(n[c]=t[c]);n.originalType=e,n.mdxType="string"==typeof e?e:o,s[1]=n;for(var d=2;d<r;d++)s[d]=i[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,i)}p.displayName="MDXCreateElement"},50358:(e,t,i)=>{i.d(t,{Z:()=>c});var a=i(67294),o=i(52263);const r="authorByline_VoxI",s="authorLabel_a70t",n="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:i}=(0,o.Z)(),c=i.customFields.authors;return a.createElement(a.Fragment,null,t.authors&&a.createElement("div",{className:"docAuthors"},a.createElement("hr",null),t.authors.map((e=>a.createElement("div",{key:e,className:r},a.createElement("img",{className:n,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),a.createElement("div",null,a.createElement("div",{className:s},"Author:"),a.createElement("div",null,a.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),a.createElement("hr",null)))}},12538:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>v,frontMatter:()=>m,metadata:()=>h,toc:()=>g});var a=i(87462),o=(i(67294),i(3905)),r=i(50358),s=i(4975),n=i(34045),c=i(31788);i(71673);const d=i.p+"assets/images/redis-cache-aside-cache-miss-4fa819fee471e563d97bbd1ff2f92c28.png",l=i.p+"assets/images/redis-cache-aside-cache-hit-b1ddb8878048d38e56a8369632257e2d.png",m={id:"index-solutions-caching",title:"How to use Redis for Query Caching",sidebar_label:"How to use Redis for Query Caching",slug:"/howtos/solutions/microservices/caching",authors:["prasan","will"]},p=void 0,h={unversionedId:"howtos/solutions/microservices/caching/index-solutions-caching",id:"howtos/solutions/microservices/caching/index-solutions-caching",title:"How to use Redis for Query Caching",description:"What is Query Caching?",source:"@site/docs/howtos/solutions/microservices/caching/index-caching.mdx",sourceDirName:"howtos/solutions/microservices/caching",slug:"/howtos/solutions/microservices/caching",permalink:"/howtos/solutions/microservices/caching",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/caching/index-caching.mdx",tags:[],version:"current",lastUpdatedAt:1679343780,formattedLastUpdatedAt:"Mar 20, 2023",frontMatter:{id:"index-solutions-caching",title:"How to use Redis for Query Caching",sidebar_label:"How to use Redis for Query Caching",slug:"/howtos/solutions/microservices/caching",authors:["prasan","will"]},sidebar:"docs",previous:{title:"Microservices Communication with Redis streams",permalink:"/howtos/solutions/microservices/interservice-communication"},next:{title:"How to use Redis for API Gateway Caching",permalink:"/howtos/solutions/microservices/api-gateway-caching"}},u={},g=[{value:"What is Query Caching?",id:"what-is-query-caching",level:2},{value:"Why You Should Use Redis for Query Caching",id:"why-you-should-use-redis-for-query-caching",level:2},{value:"Cache-aside with Redis (cache miss)",id:"cache-aside-with-redis-cache-miss",level:3},{value:"Cache-aside with Redis (cache hit)",id:"cache-aside-with-redis-cache-hit",level:3},{value:"Microservices Architecture for an E-commerce Application",id:"microservices-architecture-for-an-e-commerce-application",level:2},{value:"E-commerce Application Frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"Caching in a Microservices Application with Redis and MongoDB",id:"caching-in-a-microservices-application-with-redis-and-mongodb",level:2},{value:"Get Products by Filter Request",id:"get-products-by-filter-request",level:3},{value:"Get Products by Filter Response (Cache Miss)",id:"get-products-by-filter-response-cache-miss",level:3},{value:"Get Products by Filter Response (Cache Hit)",id:"get-products-by-filter-response-cache-hit",level:3},{value:"Implementing Cache-aside with Redis and MongoDB",id:"implementing-cache-aside-with-redis-and-mongodb",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Resources",id:"additional-resources",level:3}],f={toc:g};function v(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},f,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{frontMatter:m,mdxType:"Authors"}),(0,o.kt)(c.default,{mdxType:"SourceCode"}),(0,o.kt)("h2",{id:"what-is-query-caching"},"What is Query Caching?"),(0,o.kt)("p",null,"Have you ever been in a situation where your database queries are slowing down, and you need to speed them up while keeping costs down? Imagine that you've built an e-commerce application that started small and is growing fast."),(0,o.kt)("p",null,"You're at the point where you have an extensive product catalog and millions of customers. Your queries to MongoDB are beginning to slow down, and you've already attempted to optimize them. Even though you were able to squeak out a little extra performance, it wasn't enough to satisfy your customers."),(0,o.kt)("h2",{id:"why-you-should-use-redis-for-query-caching"},"Why You Should Use Redis for Query Caching"),(0,o.kt)("p",null,"Redis is an in-memory datastore, making it perfect for caching. It allows you to reduce the load on your primary database while speeding up database reads."),(0,o.kt)("p",null,"For example, in an e-commerce application you might be able to guess what query is requested most often... If you guessed the query for searching products you would be correct!"),(0,o.kt)("p",null,"To improve product search in ecommerce app, we can implement one of following caching patterns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cache prefetching"),": An entire product catalog can be pre-cached in Redis and the application can perform any product query on Redis similar to the primary database"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cache-aside")," pattern: Redis is filled on-demand based on whatever search parameters are requested by the frontend.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you're using ",(0,o.kt)("strong",{parentName:"p"},"Redis Enterprise")," cache prefetching is made easier with support for JSON and search. You also get additional features such as real-time performance, infinite scalability, resiliency and fault tolerance, and high-availability features such as Active-Active geo-redundancy.")),(0,o.kt)("p",null,"This tutorial focuses on the ",(0,o.kt)("strong",{parentName:"p"},"cache-aside")," pattern. The goal of this design pattern is to set up ",(0,o.kt)("strong",{parentName:"p"},"optimal"),' caching (load as you go) for better read operations. With caching, you might be familiar with "cache miss," where you do not find data in the cache, and a "cache hit," where you are able to find data in the cache. Let\'s look at how the cache aside pattern works with Redis for both a "cache miss" and a "cache hit."'),(0,o.kt)("h3",{id:"cache-aside-with-redis-cache-miss"},"Cache-aside with Redis (cache miss)"),(0,o.kt)("img",{src:d,alt:"Cache miss when using the cache-aside pattern with Redis",width:"500",className:"margin-bottom--md"}),(0,o.kt)("p",null,'The image above depicts the steps taken in the cache-aside pattern when there is a "cache miss." To understand how this functions, consider the following process:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"An application requests data from the backend"),(0,o.kt)("li",{parentName:"ol"},"The backend checks to find out if the data is available in Redis"),(0,o.kt)("li",{parentName:"ol"},"Data is not found (a cache miss), so the data is fetched from the database"),(0,o.kt)("li",{parentName:"ol"},"The data returned from the database is subsequently stored in Redis"),(0,o.kt)("li",{parentName:"ol"},"The data is then returned to the application")),(0,o.kt)("h3",{id:"cache-aside-with-redis-cache-hit"},"Cache-aside with Redis (cache hit)"),(0,o.kt)("p",null,'Now that you have seen what a "cache miss" looks like, let\'s cover a "cache hit." Below is the same diagram, with the "cache hit" steps highlighted in green.'),(0,o.kt)("img",{src:l,alt:"Cache hit when using the cache-aside pattern with Redis",width:"500",className:"margin-bottom--md"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"An application requests data from the backend"),(0,o.kt)("li",{parentName:"ol"},"The backend checks to find out if the data is available in Redis"),(0,o.kt)("li",{parentName:"ol"},"The data is then returned to the application")),(0,o.kt)("p",null,"The cache-aside pattern is useful when you need to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Query data frequently")," - When you have a large volume of reads (as is the case in an e-commerce app), the cache-aside pattern will give you an immediate performance gain for subsequent data requests."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Fill the cache on-demand")," - The cache-aside pattern will fill the cache as data is requested rather than pre-caching, thus saving on space and cost. Useful when it isn't clear what data will need to be cached."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Be cost conscious")," - Since cache size is directly related to the cost of cache storage in the cloud, the smaller the size, the less you pay.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you're using ",(0,o.kt)("strong",{parentName:"p"},"Redis Enterprise")," and a database that uses a JDBC driver, you can take advantage of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redis-field-engineering/redis-smart-cache"},(0,o.kt)("strong",{parentName:"a"},"Redis Smart Cache")),", which let's you add caching to your application without changing the code. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redis-field-engineering/redis-smart-cache"},(0,o.kt)("strong",{parentName:"a"},"Click here to learn more!")))),(0,o.kt)("h2",{id:"microservices-architecture-for-an-e-commerce-application"},"Microservices Architecture for an E-commerce Application"),(0,o.kt)(n.default,{mdxType:"MicroservicesArchitectureWithRedis"}),(0,o.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce Application Frontend using Next.js and Tailwind"),(0,o.kt)(s.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,o.kt)("h2",{id:"caching-in-a-microservices-application-with-redis-and-mongodb"},"Caching in a Microservices Application with Redis and MongoDB"),(0,o.kt)("p",null,"In our sample application, the products service publishes an API for filtering products. Here is what a call to the API looks like:"),(0,o.kt)("h3",{id:"get-products-by-filter-request"},"Get Products by Filter Request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// POST http://localhost:3000/products/getProductsByFilter\n{\n  "productDisplayName": "puma"\n}\n')),(0,o.kt)("h3",{id:"get-products-by-filter-response-cache-miss"},"Get Products by Filter Response (Cache Miss)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{30}","{30}":!0},'{\n  "data": [\n    {\n      "_id": 11000,\n      "data": {\n        "id": 11000,\n        "price": 3995,\n        "productDisplayName": "Puma Men Slick 3HD Yellow Black Watches",\n        "variantName": "Slick 3HD Yellow",\n        "brandName": "Puma",\n        "ageGroup": "Adults-Men",\n        "gender": "Men",\n        "displayCategories": "Accessories",\n        "styleImages": {\n          "default": {\n            "imageURL": "http://host.docker.internal:8080/images/11000.jpg"\n          }\n        },\n        "productDescriptors": {\n          "description": {\n            "value": "Stylish and comfortable, this motor sport inspired wrist watch from puma is designed with a plastic case and ..."\n          }\n        }\n      },\n      "productId": 11000\n    }\n    //...\n  ],\n  "error": null,\n  "isFromCache": false\n}\n')),(0,o.kt)("h3",{id:"get-products-by-filter-response-cache-hit"},"Get Products by Filter Response (Cache Hit)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6}","{6}":!0},'{\n  "data": [\n    //...same data as above\n  ],\n  "error": null,\n  "isFromCache": true // now the data comes from the cache rather DB\n}\n')),(0,o.kt)("h3",{id:"implementing-cache-aside-with-redis-and-mongodb"},"Implementing Cache-aside with Redis and MongoDB"),(0,o.kt)("p",null,"Below you will find the function used to search for products in MongoDB."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"async function getProductsByFilter(productFilter: IProductFilter) {\n  const mongo = getMongodb();\n  const filter: Document = {\n    statusCode: {\n      $eq: DB_ROW_STATUS.ACTIVE,\n    },\n  };\n\n  if (productFilter && productFilter.productDisplayName) {\n    filter['data.productDisplayName'] = {\n      $regex: productFilter.productDisplayName,\n      $options: 'i',\n    };\n  }\n\n  const projection: IProduct = {\n    productId: 1,\n    data: {\n      id: 1,\n      price: 1,\n      productDisplayName: 1,\n      variantName: 1,\n      brandName: 1,\n      ageGroup: 1,\n      gender: 1,\n      displayCategories: 1,\n      styleImages: {\n        default: {\n          imageURL: 1,\n        },\n      },\n      productDescriptors: {\n        description: {\n          value: 1,\n        },\n      },\n    },\n  };\n\n  const limit = 100;\n  const sort = {};\n  const products = await mongo.find(\n    COLLECTIONS.PRODUCTS.collectionName,\n    filter,\n    projection,\n    limit,\n    sort,\n  );\n  return products;\n}\n")),(0,o.kt)("p",null,"If you're familiar with MongoDB, the code above should be pretty straightforward. We simply make a call to MongoDB to find products based on a filter on the ",(0,o.kt)("inlineCode",{parentName:"p"},"displayName")," property of the product. We also define a projection object to specify which properties to get out of MongoDB. You can set up multiple columns for better fuzzy searching, but for the purposes of this tutorial it is simplified."),(0,o.kt)("p",null,"Now, using MongoDB directly without Redis will work for a while, and eventually start to slow down. That's why Redis is brought in to speed things up. The cache-aside pattern was chosen in order to balance performance with cost. The basic decision tree for cache-aside is as follows."),(0,o.kt)("p",null,"When the frontend requests products:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Form a hash with the contents of the request (i.e. the search parameters)"),(0,o.kt)("li",{parentName:"ol"},"Check Redis to see if a value exists for the hash"),(0,o.kt)("li",{parentName:"ol"},"Is there a cache hit? If data is found for the hash it is returned; the process stops here."),(0,o.kt)("li",{parentName:"ol"},"Is there a cache miss? When data is not found, it is read out of MongoDB and subsequently stored in Redis prior to being returned.")),(0,o.kt)("p",null,"Below you will find the code used to implement the decision tree."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const getHashKey = (_filter: Document) => {\n  let retKey = '';\n  if (_filter) {\n    const text = JSON.stringify(_filter);\n    retKey = crypto.createHash('sha256').update(text).digest('hex');\n  }\n  return 'CACHE_ASIDE_' + retKey;\n};\n\nrouter.post(API.GET_PRODUCTS_BY_FILTER, async (req: Request, res: Response) => {\n  const body = req.body;\n  // using node-redis\n  const redis = getNodeRedisClient();\n\n  //get data from redis\n  const hashKey = getHashKey(req.body);\n  const cachedData = await redis.get(hashKey);\n  const docArr = cachedData ? JSON.parse(cachedData) : [];\n\n  if (docArr && docArr.length) {\n    result.data = docArr;\n    result.isFromCache = true;\n  } else {\n    // get data from mongodb\n    const dbData = await getProductsByFilter(body); //method shown earlier\n\n    if (body && body.productDisplayName && dbData.length) {\n      // set data in redis (no need to wait)\n      redis.set(hashKey, JSON.stringify(dbData), {\n        EX: 60, // cache expiration in seconds\n      });\n    }\n\n    result.data = dbData;\n  }\n\n  res.send(result);\n});\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You will need to decide what expiry or time to live (TTL) works best for your particular use-case.")),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"That's all there is to it! You've now seen how to use Redis for caching with one of the most common caching patterns (cache-aside). It's possible to incrementally adopt Redis wherever needed with different strategies/ patterns. See below for some additional resources around microservices topic."),(0,o.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/cqrs"},"CQRS")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/interservice-communication"},"Interservice communication")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/api-gateway-caching"},"API gateway caching")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/c/Redisinc"},"Redis YouTube channel")),(0,o.kt)("li",{parentName:"ul"},"Clients like ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/redis/node-redis"},"Node Redis")," and ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-node"},"Redis om Node")," help you to use Redis in Node.js applications."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," : To view your Redis data or to play with raw Redis commands in the workbench")))}v.isMDXComponent=!0},34045:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var a=i(87462),o=(i(67294),i(3905));const r={},s=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-arch-with-redis",id:"howtos/solutions/microservices/common-data/microservices-arch-with-redis",title:"microservices-arch-with-redis",description:"The e-commerce microservices application discussed in the rest of this tutorial uses the following architecture:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-arch-with-redis.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-arch-with-redis",permalink:"/howtos/solutions/microservices/common-data/microservices-arch-with-redis",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-arch-with-redis.mdx",tags:[],version:"current",lastUpdatedAt:1679564122,formattedLastUpdatedAt:"Mar 23, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The e-commerce microservices application discussed in the rest of this tutorial uses the following architecture:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"products service")," - handles querying products from the database and returning them to the frontend"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"orders service")," - handles validating and creating orders"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"order history service")," - handles querying a customer's order history"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"payments service")," - handles processing orders for payment"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"digital identity service")," - handles storing identity and calculating identity score"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"api gateway")," - unifies your services under a single endpoint"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"mongodb")," - serves as the primary database, storing orders, order history, products, etc."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"redis")," - serves as the stream processor and caching database")))}m.isMDXComponent=!0},4975:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=i(87462),o=(i(67294),i(3905)),r=i(31788);const s={},n=void 0,c={unversionedId:"howtos/solutions/microservices/common-data/microservices-ecommerce",id:"howtos/solutions/microservices/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in MongoDB and Redis. Below you will find screenshots of the frontend of the e-commerce app:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-ecommerce",permalink:"/howtos/solutions/microservices/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1679585474,formattedLastUpdatedAt:"Mar 23, 2023",frontMatter:{}},d={},l=[],m={toc:l};function p(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,o.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,o.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in ",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB")," and ",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis"),". Below you will find screenshots of the frontend of the e-commerce app:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Dashboard"),": Shows the list of products with search functionality"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"redis microservices e-commerce app frontend products page",src:i(89628).Z,width:"2475",height:"1873"}))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Shopping Cart"),': Add products to the cart, then check out using the "Buy Now" button\n',(0,o.kt)("img",{alt:"redis microservices e-commerce app frontend shopping cart",src:i(70114).Z,width:"2772",height:"1942"}))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Order history"),": Once an order is placed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Orders")," link in the top navigation bar shows the order status and history"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"redis microservices e-commerce app frontend order history page",src:i(61032).Z,width:"2511",height:"1351"})))),(0,o.kt)(r.default,{mdxType:"SourceCode"}))}p.isMDXComponent=!0},31788:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var a=i(87462),o=(i(67294),i(3905));const r={},s=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-source-code-tip",id:"howtos/solutions/microservices/common-data/microservices-source-code-tip",title:"microservices-source-code-tip",description:"Below is a command to the clone the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",permalink:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",tags:[],version:"current",lastUpdatedAt:1679343780,formattedLastUpdatedAt:"Mar 20, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Below is a command to the clone the source code for the application used in this tutorial"),(0,o.kt)("p",{parentName:"admonition"},"git clone --branch v1.0.0 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}m.isMDXComponent=!0},71673:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});var a=i(87462),o=(i(67294),i(3905));const r={},s=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/redis-enterprise",id:"howtos/solutions/microservices/common-data/redis-enterprise",title:"redis-enterprise",description:"You can use Redis Enterprise as a multi-model primary database. Redis Enterprise is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or Flash. It also supports Active-Active (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes.",source:"@site/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/redis-enterprise",permalink:"/howtos/solutions/microservices/common-data/redis-enterprise",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",tags:[],version:"current",lastUpdatedAt:1679343780,formattedLastUpdatedAt:"Mar 20, 2023",frontMatter:{}},c={},d=[],l={toc:d};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can use ",(0,o.kt)("strong",{parentName:"p"},"Redis Enterprise")," as a multi-model primary database. Redis Enterprise is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or ",(0,o.kt)("strong",{parentName:"p"},"Flash"),". It also supports ",(0,o.kt)("strong",{parentName:"p"},"Active-Active")," (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes."),(0,o.kt)("p",null,"Redis Enterprise has many built-in modular capabilities, making it a unified, real-time data platform. Redis Enterprise is far more than a document database."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RedisJSON"),": Persists JSON documents"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RediSearch"),": Indexes and searches JSON documents"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RedisGraph"),": A fast and easy-to-use graph database"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RedisBloom:")," Provides bloom filters and other probabilistic data structures"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RedisTimeSeries"),": Supports time series data structures"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RedisGears"),": Syncs data to external databases via different pattern (write-behind/ write-through) or executes custom logic.")),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," to view your Redis data or to play with raw Redis commands in the workbench."),(0,o.kt)("p",null,"If you're interested in diving deeper, try ",(0,o.kt)("a",{parentName:"p",href:"https://redis.com/try-free"},"Redis Enterprise")," today for free!"))}m.isMDXComponent=!0},70114:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/design-cart-2-2a3b76656f26a754bed6a6c63ad8beef.png"},89628:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/design-dashboard-6a34137ca4862561cc2f065ed55ae081.png"},61032:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/design-order-history-16fc808f70b63d91a37a3ea76baa232d.png"}}]);