"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[9045],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>p});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=u(n),p=a,y=c["".concat(o,".").concat(p)]||c[p]||d[p]||l;return n?r.createElement(y,s(s({ref:t},m),{},{components:n})):r.createElement(y,s({ref:t},m))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),a=n(86010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(87462),a=n(67294),l=n(86010),s=n(72389),i=n(67392),o=n(7094),u=n(12466);const m="tabList__CuJ",d="tabItem_LNqP";function c(e){var t;const{lazy:n,block:s,defaultValue:c,values:p,groupId:y,className:h}=e,k=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??k.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),b=(0,i.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===c?c:c??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,o.U)(),[D,E]=(0,a.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=y){const e=v[y];null!=e&&e!==D&&f.some((t=>t.value===e))&&E(e)}const T=e=>{const t=e.currentTarget,n=w.indexOf(t),r=f[n].value;r!==D&&(O(t),E(r),null!=y&&N(y,String(r)))},R=e=>{var t;let n=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",m)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},h)},f.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:D===t?0:-1,"aria-selected":D===t,key:t,ref:e=>w.push(e),onKeyDown:R,onClick:T},s,{className:(0,l.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":D===t})}),n??t)}))),n?(0,a.cloneElement)(k.filter((e=>e.props.value===D))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==D})))))}function p(e){const t=(0,s.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=n(87462),a=(n(67294),n(3905)),l=n(65488),s=n(85162);const i={},o=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/streams",id:"howtos/quick-start/cheat-sheets/streams",title:"streams",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/streams.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/streams",permalink:"/howtos/quick-start/cheat-sheets/streams",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/streams.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},m={},d=[],c={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(l.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"CLI",mdxType:"TabItem"},(0,a.kt)("table",null,(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("strong",null,"Command")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Syntax")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Example")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Output"))),(0,a.kt)("tr",null,(0,a.kt)("td",null,"XADD"),(0,a.kt)("td",null,"XADD key field value [field value ...]"),(0,a.kt)("td",null,(0,a.kt)("pre",null,(0,a.kt)("code",null,'\nXADD myStream * sensorId "1234" temperature "19.8"\n'))),(0,a.kt)("td",null,"1518951480106-0")),(0,a.kt)("tr",null,(0,a.kt)("td",{colspan:"4"},(0,a.kt)("em",null,"Description:")," Appends the specified stream entry to the stream at the specified key. ",(0,a.kt)("em",null,"Time Complexity:")," O(1) when adding a new entry.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"XREAD"),(0,a.kt)("td",null,"XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]"),(0,a.kt)("td",null,(0,a.kt)("pre",null,(0,a.kt)("code",null,"\nXREAD COUNT 2 STREAMS myStream 0\n"))),(0,a.kt)("td",null,'1) 1) "myStream" 2) 1) 1) "1518951480106-0" 2) 1) "sensorId" 2) "1234" 3) "temperature" 4) "19.8"')),(0,a.kt)("tr",null,(0,a.kt)("td",{colspan:"4"},(0,a.kt)("em",null,"Description:")," Read data from one or multiple streams, only returning entries with an ",(0,a.kt)("b",null,"ID greater")," than the last received ID reported by the caller.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"XRANGE"),(0,a.kt)("td",null,"XRANGE key start end [COUNT count]"),(0,a.kt)("td",null,(0,a.kt)("pre",null,(0,a.kt)("code",null,"\nXRANGE myStream 1518951480106-0 1518951480106-0\n"))),(0,a.kt)("td",null,'1) 1) 1) "1518951480106-0" 2) 1) "sensorId" 2) "1234" 3) "temperature" 4) "19.8"')),(0,a.kt)("tr",null,(0,a.kt)("td",{colspan:"4"},(0,a.kt)("em",null,"Description:")," Returns the entries matching a range of IDs in a stream. ",(0,a.kt)("em",null,"Time Complexity:")," O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"XLEN"),(0,a.kt)("td",null,"XLEN key"),(0,a.kt)("td",null,(0,a.kt)("pre",null,(0,a.kt)("code",null,"\nXLEN myStream\n"))),(0,a.kt)("td",null,"(integer) 1")),(0,a.kt)("tr",null,(0,a.kt)("td",{colspan:"4"},(0,a.kt)("em",null,"Description:")," Returns the number of entries of a stream."," ",(0,a.kt)("em",null,"Time Complexity:")," O(1)")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"XDEL"),(0,a.kt)("td",null,"XDEL key ID [ID ...]"),(0,a.kt)("td",null,(0,a.kt)("pre",null,(0,a.kt)("code",null,"\nXDEL myStream 1518951480106-0\n"))),(0,a.kt)("td",null,"(integer) 1")),(0,a.kt)("tr",null,(0,a.kt)("td",{colspan:"4"},(0,a.kt)("em",null,"Description:")," Removes the specified entries from a stream."," ",(0,a.kt)("em",null,"Time Complexity:")," O(1) for each single item to delete in the stream")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"XTRIM"),(0,a.kt)("td",null,"XTRIM key MAXLEN [~] count"),(0,a.kt)("td",null,(0,a.kt)("pre",null,(0,a.kt)("code",null,"\nXTRIM myStream MAXLEN 0\n"))),(0,a.kt)("td",null,"(integer) 0")),(0,a.kt)("tr",null,(0,a.kt)("td",{colspan:"4"},(0,a.kt)("em",null,"Description:")," Trims the stream to a different length."," ",(0,a.kt)("em",null,"Time Complexity:")," O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation."))))),(0,a.kt)(s.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/*\nXADD key field value [field value ...]\nAppends the specified stream entry to the stream at the specified key.\nO(1) when adding a new entry.\n*/\n\nconst xAddResult = await client.xAdd(\n  \'myStream\',\n  \'*\', //dynamic id\n  {\n    sensorId: \'1234\',\n    temperature: \'19.8\',\n  },\n);\nconsole.log(xAddResult); // "1518951480106-0"\n\n/*\n    XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n    Read data from one or multiple streams, only returning entries with an ID greater than the last received ID reported by the caller.\n    */\nconst xReadResult = await client.xRead(\n  commandOptions({\n    isolated: true,\n  }),\n  [\n    {\n      // XREAD can read from multiple streams, starting at a different ID for each.\n      key: \'myStream\',\n      id: \'0\', //entries greater than id\n    },\n  ],\n  {\n    // Read 2 entries at a time, block for 5 seconds if there are none.\n    COUNT: 2,\n    BLOCK: 5000,\n  },\n);\n\nconsole.log(JSON.stringify(xReadResult)); // [{"name":"myStream","messages":[{"id":"1518951480106-0","message":{"sensorId":"1234","temperature":"19.8"}}]}]\n\n/*\n    XRANGE key start end [COUNT count]\n    Returns the entries matching a range of IDs in a stream.\n    O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\n    */\nconst xRangeResult = await client.xRange(\'myStream\', xAddResult, xAddResult);\nconsole.log(JSON.stringify(xRangeResult)); // [{"id":"1518951480106-0","message":{"sensorId":"1234","temperature":"19.8"}}]\n\n/*\n    XLEN key\n    Returns the number of entries of a stream.\n    O(1)\n    */\nconst xLenResult = await client.xLen(\'myStream\');\nconsole.log(xLenResult); // 1\n\n/*\n    XDEL key ID [ID ...]\n    Removes the specified entries from a stream.\n    O(1) for each single item to delete in the stream\n    */\nconst xDelResult = await client.xDel(\'myStream\', xAddResult);\nconsole.log(xDelResult); // 1\n\n/*\n    XTRIM key MAXLEN [~] count\n    Trims the stream to a different length.\n    O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.\n    */\nconst xTrimResult = await client.xTrim(\'myStream\', \'MAXLEN\', 0);\nconsole.log(xTrimResult); // 0\n'))),(0,a.kt)(s.Z,{value:"PYTHON",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# XADD key field value [field value ...]\n# O(1) for new entries, O(N) when trimming where N is the number of evicted values\n# Appends the specified stream entry to the stream at the specified key.\nr.xadd('temperatures:us-ny:10007',\n       {'temp_f': 87.2, 'pressure': 29.69, 'humidity': 46})\nr.xadd('temperatures:us-ny:10007',\n       {'temp_f': 83.1, 'pressure': 29.21, 'humidity': 46.5})\nr.xadd('temperatures:us-ny:10007',\n       {'temp_f': 81.9, 'pressure': 28.37, 'humidity': 43.7})\n\n# XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n# Read data from one or multiple streams, only returning entries with an ID greater than the last received ID reported by the caller.\nr.xread({'temperatures:us-ny:10007': '0-0'})\n"))),(0,a.kt)(s.Z,{value:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * XADD key ID field value [field value ...]\n * O(1) for new entries, O(N) when trimming where N is the number of evicted\n * values\n * Appends the specified stream entry to the stream at the specified key.\n */\ndb.StreamAdd("temperatures:us-ny:10007", new NameValueEntry[] { new NameValueEntry("temp_f", "87.2"), new NameValueEntry("pressure", "29.69"), new NameValueEntry("humidity", "46.0") });\ndb.StreamAdd("temperatures:us-ny:10007", new NameValueEntry[] { new NameValueEntry("temp_f", "83.1"), new NameValueEntry("pressure", "29.21"), new NameValueEntry("humidity", "46.5") });\ndb.StreamAdd("temperatures:us-ny:10007", new NameValueEntry[] { new NameValueEntry("temp_f", "81.9"), new NameValueEntry("pressure", "28.37"), new NameValueEntry("humidity", "43.7") });\n\n/*\n * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n * Read data from one or multiple streams, only returning entries with an ID\n * greater than the last received ID reported by the caller.\n */\ndb.StreamRead("temperatures:us-ny:10007", "0-0");\n'))),(0,a.kt)(s.Z,{value:"JAVA",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * XADD key ID field value [field value ...]\n * O(1) for new entries, O(N) when trimming where N is the number of evicted\n * values\n * Appends the specified stream entry to the stream at the specified key.\n */\njedis.xadd("temperatures:us-ny:10007", StreamEntryID.NEW_ENTRY,\n        Map.of("temp_f", "87.2", "pressure", "29.69", "humidity", "46.0"));\njedis.xadd("temperatures:us-ny:10007", StreamEntryID.NEW_ENTRY,\n        Map.of("temp_f", "83.1", "pressure", "29.21", "humidity", "46.5"));\njedis.xadd("temperatures:us-ny:10007", StreamEntryID.NEW_ENTRY,\n        Map.of("temp_f", "81.9", "pressure", "28.37", "humidity", "43.7"));\n\n/*\n * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n * Read data from one or multiple streams, only returning entries with an ID\n * greater than the last received ID reported by the caller.\n */\njedis.xread(XReadParams.xReadParams().count(5).block(1000),\n        singletonMap("temperatures:us-ny:10007", new StreamEntryID(0, 0)));\n')))))}p.isMDXComponent=!0}}]);