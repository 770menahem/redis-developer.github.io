"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[6657],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return m}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),u=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(l.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?n.createElement(g,o(o({ref:r},p),{},{components:t})):n.createElement(g,o({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},39149:function(e,r,t){t.r(r),t.d(r,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var n=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={id:"numeric-queries",title:"Numeric Queries",sidebar_label:"Numeric Queries",slug:"/develop/dotnet/redis-om-dotnet/searching/numeric-queries",authors:["steve"]},l=void 0,u={unversionedId:"develop/dotnet/redis-om-dotnet/searching/numeric-queries/numeric-queries",id:"develop/dotnet/redis-om-dotnet/searching/numeric-queries/numeric-queries",title:"Numeric Queries",description:"In addition to providing capabilities for text queries, Redis OM also provides you the ability to perform numeric equality and numeric range queries. Let us assume a model of:",source:"@site/docs/develop/dotnet/redis-om-dotnet/searching/numeric-queries/numeric-queries.md",sourceDirName:"develop/dotnet/redis-om-dotnet/searching/numeric-queries",slug:"/develop/dotnet/redis-om-dotnet/searching/numeric-queries",permalink:"/develop/dotnet/redis-om-dotnet/searching/numeric-queries",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/dotnet/redis-om-dotnet/searching/numeric-queries/numeric-queries.md",tags:[],version:"current",lastUpdatedAt:1655485542,formattedLastUpdatedAt:"6/17/2022",frontMatter:{id:"numeric-queries",title:"Numeric Queries",sidebar_label:"Numeric Queries",slug:"/develop/dotnet/redis-om-dotnet/searching/numeric-queries",authors:["steve"]},sidebar:"docs",previous:{title:"Simple Text Queries",permalink:"/develop/dotnet/redis-om-dotnet/simple-text-queries"},next:{title:"Geo Filters",permalink:"/develop/dotnet/redis-om-dotnet/searching/geo-filters"}},p={},c=[{value:"Sorting",id:"sorting",level:2}],d={toc:c};function m(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In addition to providing capabilities for text queries, Redis OM also provides you the ability to perform numeric equality and numeric range queries. Let us assume a model of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"[Document]\npublic class Employee\n{\n    [Indexed]\n    public string Name { get; set; }\n\n    [Indexed(Aggregatable = true)]\n    public int Age { get; set; }\n\n    [Indexed(Aggregatable = true)]\n    public double Sales { get; set; }\n\n    [Searchable(Aggregatable = true)]\n    public string Department { get; set; }\n}\n")),(0,i.kt)("p",null,"Assume that we've connected to Redis already and retrieved a ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisCollection")," and seeded some data as such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var employees = provider.RedisCollection<Employee>();\nvar e1 = new Employee {Name = "Bob", Age = 35, Sales = 100000, Department = "EMEA Sales"};\nvar e2 = new Employee {Name = "Alice", Age = 52, Sales = 300000, Department = "Partner Sales"};\nvar e3 = new Employee {Name = "Marcus", Age = 42, Sales = 250000, Department = "NA Sales"};\nvar e4 = new Employee {Name = "Susan", Age = 27, Sales = 200000, Department = "EMEA Sales"};\nvar e5 = new Employee {Name = "John", Age = 38, Sales = 275000, Department = "APAC Sales"};\nvar e6 = new Employee {Name = "Theresa", Age = 30, Department = "EMEA Ops"};\nemployees.Insert(e1);\nemployees.Insert(e2);\nemployees.Insert(e3);\nemployees.Insert(e4);\nemployees.Insert(e5);\nemployees.Insert(e6);\n')),(0,i.kt)("p",null,"We can now perform queries against the numeric values in our data as you would with any other collection using LINQ expressions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var underThirty = employees.Where(x=>x.Age < 30);\nvar middleTierSales = employees.Where(x=>x.Sales > 100000 && x.Sales < 300000);\n")),(0,i.kt)("p",null,"You can of course also pair numeric queries with Text Queries:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var emeaMidTier = employees.Where(x=>x.Sales>100000 & x.Sales <300000 && x.Department == "EMEA");\n')),(0,i.kt)("h2",{id:"sorting"},"Sorting"),(0,i.kt)("p",null,"If an ",(0,i.kt)("inlineCode",{parentName:"p"},"Indexed")," field is marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"Sortable"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"Aggregatable"),", you can order by that field using ",(0,i.kt)("inlineCode",{parentName:"p"},"OrderBy")," predicates."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var employeesBySales = employees.OrderBy(x=>x.Sales);\nvar employeesBySalesDescending = employees.OrderByDescending(x=>x.Sales);\n")))}m.isMDXComponent=!0}}]);