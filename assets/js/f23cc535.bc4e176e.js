"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[3820,370,5815,1380,5979,5426,7826,1309,9045,7269,3878,7729],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var l=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,s=function(e,t){if(null==e)return{};var n,l,s={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=l.createContext({}),u=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return l.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(n),k=s,p=c["".concat(i,".").concat(k)]||c[k]||m[k]||a;return n?l.createElement(p,r(r({ref:t},d),{},{components:n})):l.createElement(p,r({ref:t},d))}));function k(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,r=new Array(a);r[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var u=2;u<a;u++)r[u]=n[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var l=n(67294),s=n(86010);const a="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return l.createElement("div",{role:"tabpanel",className:(0,s.Z)(a,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>k});var l=n(87462),s=n(67294),a=n(86010),r=n(72389),o=n(67392),i=n(7094),u=n(12466);const d="tabList__CuJ",m="tabItem_LNqP";function c(e){var t;const{lazy:n,block:r,defaultValue:c,values:k,groupId:p,className:h}=e,y=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=k??y.map((e=>{let{props:{value:t,label:n,attributes:l}}=e;return{value:t,label:n,attributes:l}})),g=(0,o.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===c?c:c??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:T,setTabGroupChoices:S}=(0,i.U)(),[v,O]=(0,s.useState)(N),R=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=p){const e=T[p];null!=e&&e!==v&&f.some((t=>t.value===e))&&O(e)}const b=e=>{const t=e.currentTarget,n=R.indexOf(t),l=f[n].value;l!==v&&(E(t),O(l),null!=p&&S(p,String(l)))},x=e=>{var t;let n=null;switch(e.key){case"Enter":b(e);break;case"ArrowRight":{const t=R.indexOf(e.currentTarget)+1;n=R[t]??R[0];break}case"ArrowLeft":{const t=R.indexOf(e.currentTarget)-1;n=R[t]??R[R.length-1];break}}null==(t=n)||t.focus()};return s.createElement("div",{className:(0,a.Z)("tabs-container",d)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},h)},f.map((e=>{let{value:t,label:n,attributes:r}=e;return s.createElement("li",(0,l.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>R.push(e),onKeyDown:x,onClick:b},r,{className:(0,a.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":v===t})}),n??t)}))),n?(0,s.cloneElement)(y.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function k(e){const t=(0,r.Z)();return s.createElement(c,(0,l.Z)({key:String(t)},e))}},50358:(e,t,n)=>{n.d(t,{Z:()=>i});var l=n(67294),s=n(52263);const a="authorByline_VoxI",r="authorLabel_a70t",o="authorProfileImage_URwT";const i=function(e){let{frontMatter:t}=e;const{siteConfig:n}=(0,s.Z)(),i=n.customFields.authors;return l.createElement(l.Fragment,null,t.authors&&l.createElement("div",{className:"docAuthors"},l.createElement("hr",null),t.authors.map((e=>l.createElement("div",{key:e,className:a},l.createElement("img",{className:o,src:`/img/${i[e].image?i[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${i[e].name}`}),l.createElement("div",null,l.createElement("div",{className:r},"Author:"),l.createElement("div",null,l.createElement("a",{href:i[e].link,target:"_blank"},i[e].name),", ",i[e].title))))),l.createElement("hr",null)))}},84078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>N,contentTitle:()=>f,default:()=>v,frontMatter:()=>y,metadata:()=>g,toc:()=>T});var l=n(87462),s=(n(67294),n(3905)),a=n(50358),r=n(64500),o=n(32936),i=n(53742),u=n(82749),d=n(93880),m=n(53188),c=n(36622),k=n(135),p=n(86299),h=n(74476);n(67509);const y={id:"index-quick-start-cheat-sheet",title:"Redis Commands Cheat sheet",sidebar_label:"Cheat sheet",slug:"/howtos/quick-start/cheat-sheet",authors:["prasan","will"]},f=void 0,g={unversionedId:"howtos/quick-start/cheat-sheets/index-quick-start-cheat-sheet",id:"howtos/quick-start/cheat-sheets/index-quick-start-cheat-sheet",title:"Redis Commands Cheat sheet",description:"Connect",source:"@site/docs/howtos/quick-start/cheat-sheets/cheat-sheet.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheet",permalink:"/howtos/quick-start/cheat-sheet",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/cheat-sheet.mdx",tags:[],version:"current",lastUpdatedAt:1694640549,formattedLastUpdatedAt:"Sep 13, 2023",frontMatter:{id:"index-quick-start-cheat-sheet",title:"Redis Commands Cheat sheet",sidebar_label:"Cheat sheet",slug:"/howtos/quick-start/cheat-sheet",authors:["prasan","will"]},sidebar:"docs",previous:{title:"Kubernetes Operator: What It Is and Why You Should Really Care About It",permalink:"/operate/orchestration/kubernetes-operator"},next:{title:"Overview",permalink:"/howtos/solutions"}},N={},T=[{value:"Connect",id:"connect",level:2},{value:"Strings/Numbers",id:"stringsnumbers",level:2},{value:"Generic",id:"generic",level:2},{value:"Hashes",id:"hashes",level:2},{value:"Sets",id:"sets",level:2},{value:"Sorted sets",id:"sorted-sets",level:2},{value:"Lists",id:"lists",level:2},{value:"Streams",id:"streams",level:2},{value:"\xa0",id:"",level:3},{value:"JSON",id:"json",level:2},{value:"Search and Query",id:"search-and-query",level:2}],S={toc:T};function v(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{frontMatter:y,mdxType:"Authors"}),(0,s.kt)("h2",{id:"connect"},"Connect"),(0,s.kt)(r.default,{mdxType:"CheatSheetConnect"}),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"To setup Redis either locally or in the cloud, refer to the ",(0,s.kt)("a",{parentName:"p",href:"/howtos/quick-start#setup-redis"},(0,s.kt)("u",null,"tutorial")))),(0,s.kt)("h2",{id:"stringsnumbers"},"Strings/Numbers"),(0,s.kt)(o.default,{mdxType:"CheatSheetStrings"}),(0,s.kt)("h2",{id:"generic"},"Generic"),(0,s.kt)(i.default,{mdxType:"CheatSheetGeneric"}),(0,s.kt)("h2",{id:"hashes"},"Hashes"),(0,s.kt)(u.default,{mdxType:"CheatSheetHashes"}),(0,s.kt)("h2",{id:"sets"},"Sets"),(0,s.kt)(d.default,{mdxType:"CheatSheetSets"}),(0,s.kt)("h2",{id:"sorted-sets"},"Sorted sets"),(0,s.kt)(m.default,{mdxType:"CheatSheetSortedSets"}),(0,s.kt)("h2",{id:"lists"},"Lists"),(0,s.kt)(c.default,{mdxType:"CheatSheetLists"}),(0,s.kt)("h2",{id:"streams"},"Streams"),(0,s.kt)(k.default,{mdxType:"CheatSheetStreams"}),(0,s.kt)("h3",{id:""},"\xa0"),(0,s.kt)("hr",null),(0,s.kt)("admonition",{title:"Redis stack commands",type:"info"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{parentName:"p",href:"https://redis.io/docs/about/about-stack/"},(0,s.kt)("u",null,"Redis stack"))," extends the core features\nof Redis OSS like querying across hashes and JSON documents, time series data support,\nfull-text search ..etc")),(0,s.kt)("h2",{id:"json"},"JSON"),(0,s.kt)(p.default,{mdxType:"CheatSheetJSON"}),(0,s.kt)("h2",{id:"search-and-query"},"Search and Query"),(0,s.kt)(h.default,{mdxType:"CheatSheetSearchAndQuery"}))}v.isMDXComponent=!0},64500:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/connect",id:"howtos/quick-start/cheat-sheets/connect",title:"connect",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/connect.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/connect",permalink:"/howtos/quick-start/cheat-sheets/connect",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/connect.mdx",tags:[],version:"current",lastUpdatedAt:1698353241,formattedLastUpdatedAt:"Oct 26, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"RedisInsight",value:"REDIS_INSIGHT"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"# Syntax\nredis-cli -u redis://host:port\nredis-cli -u redis://username:password@host:port\n\n# Examples\nredis-cli\nredis-cli -u redis://localhost:6379\nredis-cli -u redis://myuser:mypassword@localhost:6379\n\n# If you run Redis through Docker\ndocker exec -it <container-id-or-name> redis-cli\n\n"))),(0,s.kt)(r.Z,{value:"REDIS_INSIGHT",mdxType:"TabItem"},(0,s.kt)("p",null,"Download ",(0,s.kt)("u",null,(0,s.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight"))," to visually explore your Redis data or to engage with raw Redis commands in the workbench."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"redis-insight-connect",src:n(40083).Z,width:"1896",height:"954"}))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { createClient } from 'redis';\n\nlet client = createClient({ url: 'redis://localhost:6379' });\n\nawait client.connect();\n\n//await client.set('key', 'value');\n\nawait client.disconnect();\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import redis\n\nr = redis.Redis(host='localhost', port=6379, db=0)\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using StackExchange.Redis;\n\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect("localhost");\nIDatabase db = redis.GetDatabase();\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import redis.clients.jedis.JedisPooled;\n\nJedisPooled jedis = new JedisPooled("localhost", 6379);\n')))))}k.isMDXComponent=!0},53742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/generic",id:"howtos/quick-start/cheat-sheets/generic",title:"generic",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/generic.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/generic",permalink:"/howtos/quick-start/cheat-sheets/generic",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/generic.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"KEYS"),(0,s.kt)("td",null,"KEYS pattern"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nKEYS my*\n"))),(0,s.kt)("td",null,'1) "myKey" 2) "myCounter"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns all keys matching pattern.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"EXISTS"),(0,s.kt)("td",null,"EXISTS key [key ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nEXISTS myKey\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Checks if one or more keys exist.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"EXPIRE"),(0,s.kt)("td",null,"EXPIRE key seconds"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nEXPIRE myKey 120\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Set a timeout on a key.After the timeout has expired, the key will automatically be deleted.",(0,s.kt)("em",null,"Time Complexity:"),"O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"TTL"),(0,s.kt)("td",null,"TTL key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nTTL myKey\n"))),(0,s.kt)("td",null,"(integer) 113")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the remaining time to live of a key that has a timeout.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"PERSIST"),(0,s.kt)("td",null,"PERSIST key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nPERSIST myKey\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Removes the expiration from a key.",(0,s.kt)("em",null,"Time Complexity:"),"O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SCAN"),(0,s.kt)("td",null,"SCAN cursor [MATCH pattern] [COUNT count]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nSCAN 0 MATCH my* COUNT 2\n"))),(0,s.kt)("td",null,'1) "3" 2) 1) "myCounter" 2) "myKey"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Iterates the set of keys in the currently selected Redis database.",(0,s.kt)("em",null,"Time Complexity:")," O(1) for every call. O(N) for a complete iteration.")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"DEL"),(0,s.kt)("td",null,"DEL key [key ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nDEL myKey\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Removes the specified keys.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"INFO"),(0,s.kt)("td",null,"INFO [section]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nINFO server\nINFO keyspace\n"))),(0,s.kt)("td",null,"# Server",(0,s.kt)("br",null),"redis_version:6.2.5",(0,s.kt)("br",null),"redis_git_sha1:00000000",(0,s.kt)("br",null),"redis_build_id:9893b2a-dirty",(0,s.kt)("br",null),"redis_mode:standalone",(0,s.kt)("br",null),"os:Linux 5.4.72-microsoft-standard-WSL2 x86_64",(0,s.kt)("br",null),"arch_bits:64",(0,s.kt)("br",null),"... ",(0,s.kt)("br",null),"# Keyspace db0:keys=2,expires=0,avg_ttl=0")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:"),"Returns information and statistics about the server, with the different sections like - server, clients, memory, persistence, stats, replication, cpu, commandstats, latencystats, sentinel, cluster, modules, keyspace, errorstats.",(0,s.kt)("em",null,"Time Complexity:")," O(1)"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    KEYS pattern\n    Returns all keys matching pattern.\n    Time Complexity: O(N)\n    */\nconst keysResult = await client.keys('my*');\nconsole.log(keysResult); // [\"myKey\", \"myCounter\"]\n\n/*\n    EXISTS key [key ...]\n    Checks if one or more keys exist.\n    Time Complexity: O(N)\n    */\nconst existsResult = await client.exists('myKey');\nconsole.log(existsResult); // 1\n\n/*\n    EXPIRE key seconds\n    Set a timeout on a key. After the timeout has expired, the key will automatically be deleted.\n    Time Complexity: O(1)\n    */\nconst expireResult = await client.expire('myKey', 120);\nconsole.log(expireResult); // true\n\n/*\n    TTL key\n    Returns the remaining time to live of a key that has a timeout.\n    Time Complexity: O(1)\n    */\nconst ttlResult = await client.ttl('myKey');\nconsole.log(ttlResult); // 113\n\n/*\n    PERSIST key\n    Removes the expiration from a key.\n    Time Complexity: O(1)\n    */\nconst persistResult = await client.persist('myKey');\nconsole.log(persistResult); // true\n\n/*\n    SCAN cursor [MATCH pattern] [COUNT count]\n    Iterates the set of keys in the currently selected Redis database.\n    Time Complexity: O(1) for every call. O(N) for a complete iteration.\n    */\nconst scanOptions = {\n  TYPE: 'string',\n  MATCH: 'my*',\n  COUNT: 2,\n};\nlet cursor = 0;\n\n// scan 1\nlet scanResult = await client.scan(cursor, scanOptions);\nconsole.log(scanResult); // { cursor: 4, keys: [ 'myCounter', 'myKey' ] }\n\n// scan 2\ncursor = scanResult.cursor;\nscanResult = await client.scan(cursor, scanOptions);\nconsole.log(scanResult); //{ cursor: 12, keys: [ 'myOtherkey' ] }\n\n// ... scan n\n\nconsole.log('OR use any loop to continue the scan by cursor value');\ncursor = 0;\ndo {\n  scanResult = await client.scan(cursor, scanOptions);\n  console.log(scanResult);\n  cursor = scanResult.cursor;\n} while (cursor != 0);\n\n/*\n    DEL key [key ...]\n    Removes the specified keys.\n    Time Complexity: O(N)\n    */\nconst delResult = await client.del('myKey');\nconsole.log(delResult); // 1\n\n/*\n    INFO [section]\n    Returns information and statistics about the server, with the different sections\n        like - server, clients, memory, persistence, stats, replication, cpu, commandstats,\n        latencystats, sentinel, cluster, modules, keyspace, errorstats.\n    Time Complexity: O(1)\n    */\nlet infoResult = await client.info('keyspace');\nconsole.log(infoResult); //# Keyspace \\n db0:keys=2,expires=0,avg_ttl=0\"\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# KEYS pattern\n# O(N)\n# Returns all keys matching pattern.\nr.keys('*')\n\n# EXPIRE key seconds\n# O(1)\n# Set a timeout on key. After the timeout has expired, the key will automatically be deleted.\nr.expire('mykey', 10)\n\n# SCAN cursor [MATCH pattern] [COUNT count]\n# O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0.\n# Iterates the set of keys in the currently selected Redis database.\nr.delete('mykey', 'mykey2')\nscanResult = r.scan(0, match='employee_profile:*')\nr.scan(scanResult[0], match='employee_profile:*')\n\n# DEL key [key ...]\n# O(N)\n# Removes the specified keys.\nr.delete('employee_profile:viraj', 'employee_profile:terry',\n         'employee_profile:sheera')\n\n# TTL key\n# O(1)\n# Returns the remaining time to live of a key that has a timeout.\nr.ttl('employee_profile:nicol')\n\n# INFO [section ...]\n# O(1)\n# Returns information and statistics about the server, with the following sections: server, clients, memory, persistence, stats, replication, cpu, commandstats, latencystats, sentinel, cluster, modules, keyspace, errorstats\nr.info('keyspace')\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * KEYS pattern\n * O(N)\n * Returns all keys matching pattern.\n */\nredis.GetServer("localhost:6379").Keys();\n\n/*\n * EXPIRE key seconds\n * O(1)\n * Set a timeout on key. After the timeout has expired, the key will be\n * automatically deleted.\n */\ndb.KeyExpire("mykey", TimeSpan.FromSeconds(10));\n\n/*\n * SCAN cursor [MATCH pattern] [COUNT count]\n * O(1) for every call. O(N) for a complete iteration, including enough command\n * calls for the cursor to return back to 0.\n * Iterates the set of keys in the currently selected Redis database.\n */\ndb.KeyDelete(new RedisKey[] { "mykey", "mykey2" });\nredis.GetServer("localhost:6379").Keys(-1, "employee_profile:*", 10);\n\n/*\n * DEL key [key ...]\n * O(N)\n * Removes the specified keys.\n */\ndb.KeyDelete(new RedisKey[] { "employee_profile:viraj", "employee_profile:terry", "employee_profile:sheera" });\n\n/*\n * TTL key\n * O(1)\n * Returns the remaining time to live of a key that has a timeout.\n */\ndb.KeyTimeToLive("employee_profile:nicol");\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * KEYS pattern\n * O(N)\n * Returns all keys matching pattern.\n */\njedis.keys("*");\n\n/*\n * EXPIRE key seconds\n * O(1)\n * Set a timeout on key. After the timeout has expired, the key will be\n * automatically deleted.\n */\njedis.expire("mykey", 10);\n\n/*\n * SCAN cursor [MATCH pattern] [COUNT count]\n * O(1) for every call. O(N) for a complete iteration, including enough command\n * calls for the cursor to return back to 0.\n * Iterates the set of keys in the currently selected Redis database.\n */\njedis.del("mykey", "mykey2");\nScanResult<String> scan = jedis.scan("0", new ScanParams() {\n    {\n        match("employee_profile:*");\n    }\n});\nscan = jedis.scan(scan.getCursor(), new ScanParams() {\n    {\n        match("employee_profile:*");\n    }\n});\n\n/*\n * DEL key [key ...]\n * O(N)\n * Removes the specified keys.\n */\njedis.del("employee_profile:viraj", "employee_profile:terry""employee_profile:sheera");\n\n/*\n * TTL key\n * O(1)\n * Returns the remaining time to live of a key that has a timeout.\n */\njedis.ttl("employee_profile:nicol");\n')))))}k.isMDXComponent=!0},82749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/hashes",id:"howtos/quick-start/cheat-sheets/hashes",title:"hashes",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/hashes.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/hashes",permalink:"/howtos/quick-start/cheat-sheets/hashes",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/hashes.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"HSET"),(0,s.kt)("td",null,"HSET key field value [field value ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nHSET h_employee_profile:101 name "Nicol" age 33\n'))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Sets the specified fields to their respective values in the hash stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"HGET"),(0,s.kt)("td",null,"HGET key field"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nHGET h_employee_profile:101 name\n"))),(0,s.kt)("td",null,'"Nicol"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the value associated with field in the hash stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"HGETALL"),(0,s.kt)("td",null,"HGETALL key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nHGETALL h_employee_profile:101\n"))),(0,s.kt)("td",null,'1) "name" 2) "Nicol" 3) "age" 4) "33"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns all fields and values of the hash stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"HMGET"),(0,s.kt)("td",null,"HMGET key field1 [field2]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nHMGET h_employee_profile:101 name age\n"))),(0,s.kt)("td",null,'1) "Nicol" 2) "33"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the values associated with the specified fields in the hash stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    HSET key field value [field value ...]\n    Sets the specified fields to their respective values in the hash stored at key.\n    Time Complexity: O(N)\n    */\n\nconst hSetResult = await client.hSet('h_employee_profile:101', {\n  name: 'Nicol',\n  age: 33,\n});\nconsole.log(hSetResult); // 2\n\n/*\n    HGET key field\n    Returns the value associated with field in the hash stored at key.\n    Time Complexity: O(1)\n    */\nconst hGetResult = await client.hGet('h_employee_profile:101', 'name');\nconsole.log(hGetResult); // \"Nicol\"\n\n/*\n    HGETALL key\n    Returns all fields and values of the hash stored at key.\n    Time Complexity: O(N)\n    */\nconst hGetAllResult = await client.hGetAll('h_employee_profile:101');\nconsole.log(hGetAllResult); // {name: \"Nicol\", age: \"33\"}\n\n/*\n    HMGET key field1 [field2]\n    Returns the values associated with the specified fields in the hash stored at key.\n    Time Complexity: O(N)\n    */\nconst hmGetResult = await client.hmGet('h_employee_profile:101', [\n  'name',\n  'age',\n]);\nconsole.log(hmGetResult); // [\"Nicol\", \"33\"]\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# HSET key field value [field value ...]\n# O(N)\n# Sets the specified fields to their respective values in the hash stored at key.\nr.hset('h_employee_profile:nicol', 'name', 'Nicol')\n\n# HGETALL key\n# O(N)\n# Returns all fields and values of the hash stored at key.\nr.hgetall('h_employee_profile:nicol')\n\n# HGET key field\n# O(1)\n# Returns the value associated with field in the hash stored at key.\nr.hget('h_employee_profile:nicol', 'name')\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * HSET key field value [field value ...]\n * O(N)\n * Sets the specified fields to their respective values in the hash stored at\n * key.\n */\ndb.HashSet("h_employee_profile:nicol", new HashEntry[] { new HashEntry("name"Nicol") });\n\n/*\n * HGETALL key\n * O(N)\n * Returns all fields and values of the hash stored at key.\n */\ndb.HashGetAll("h_employee_profile:nicol");\n\n/*\n * HGET key field\n * O(1)\n * Returns the value associated with field in the hash stored at key.\n */\ndb.HashGet("h_employee_profile:nicol", "name");\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * HSET key field value [field value ...]\n * O(N)\n * Sets the specified fields to their respective values in the hash stored at\n * key.\n */\njedis.hset("h_employee_profile:nicol", "name", "Nicol");\n\n/*\n * HGETALL key\n * O(N)\n * Returns all fields and values of the hash stored at key.\n */\njedis.hgetAll("h_employee_profile:nicol");\n\n/*\n * HGET key field\n * O(1)\n * Returns the value associated with field in the hash stored at key.\n */\njedis.hget("h_employee_profile:nicol", "name");\n')))))}k.isMDXComponent=!0},86299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/json",id:"howtos/quick-start/cheat-sheets/json",title:"json",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/json.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/json",permalink:"/howtos/quick-start/cheat-sheets/json",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/json.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.SET"),(0,s.kt)("td",null,"JSON.SET key path value"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nJSON.SET employee_profile:1 . \'{"name":"Alice"}\'\n'))),(0,s.kt)("td",null,"OK")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Sets JSON value at path in key.",(0,s.kt)("em",null,"Time Complexity:")," O(M+N) where M is the original size and N is the new size")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.GET"),(0,s.kt)("td",null,"JSON.GET key [path [path ...]]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nJSON.GET employee_profile:1\n"))),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\n        { \"name\": 'Alice' }\n")))),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the JSON value at path in key.",(0,s.kt)("em",null,"Time Complexity:")," O(N) when path is evaluated to a single value where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.NUMINCRBY"),(0,s.kt)("td",null,"JSON.NUMINCRBY key path number"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nJSON.SET employee_profile:1 .age 30\nJSON.NUMINCRBY employee_profile:1 .age 5\n"))),(0,s.kt)("td",null,"35")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Increments a number inside a JSON document.",(0,s.kt)("em",null,"Time Complexity:")," O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.OBJKEYS"),(0,s.kt)("td",null,"JSON.OBJKEYS key [path]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nJSON.OBJKEYS employee_profile:1\n"))),(0,s.kt)("td",null,'1) "name" 2) "age"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Return the keys in the object that's referenced by path. ",(0,s.kt)("em",null,"Time Complexity:")," O(N) when path is evaluated to a single value, where N is the number of keys in the object, O(N) when path is evaluated to multiple values, where N is the size of the key")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.OBJLEN"),(0,s.kt)("td",null,"JSON.OBJLEN key [path]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nJSON.OBJLEN employee_profile:1\n"))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Report the number of keys in the JSON object at path in key. ",(0,s.kt)("em",null,"Time Complexity:")," O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.ARRAPPEND"),(0,s.kt)("td",null,"JSON.ARRAPPEND key [path] value [value ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nJSON.SET employee_profile:1 .colors \'["red", "green", "blue"]\'\nJSON.ARRAPPEND employee_profile:1 .colors \'"yellow"\'\n'))),(0,s.kt)("td",null,"(integer) 4")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Append the json values into the array at path after the last element in it. ",(0,s.kt)("em",null,"Time Complexity:")," O(1) for each value added, O(N) for multiple values added where N is the size of the key")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.ARRINSERT"),(0,s.kt)("td",null,"JSON.ARRINSERT key path index value [value ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nJSON.ARRINSERT employee_profile:1 .colors 2 '\"purple\"'\n"))),(0,s.kt)("td",null,"(integer) 5")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Insert the json values into the array at path before the index (shifts to the right). ",(0,s.kt)("em",null,"Time Complexity:")," O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"JSON.ARRINDEX"),(0,s.kt)("td",null,"JSON.ARRINDEX key path value [start [stop]]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nJSON.ARRINDEX employee_profile:1 .colors '\"purple\"'\n"))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Searches for the first occurrence of a JSON value in an array. ",(0,s.kt)("em",null,"Time Complexity:")," O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n      JSON.SET key path value\n      Sets JSON value at path in key.\n      O(M+N) where M is the original size and N is the new size\n    */\nconst setResult = await client.json.set('employee_profile:1', '.', {\n  name: 'Alice',\n});\nconsole.log(setResult); // OK\n\n/*\n       JSON.GET key [path [path ...]]\n       Returns the JSON value at path in key.\n       O(N) when path is evaluated to a single value where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key\n    */\nconst getResult = await client.json.get('employee_profile:1');\nconsole.log(getResult); // { name: 'Alice' }\n\n/*\n      JSON.NUMINCRBY key path number\n      Increments a number inside a JSON document.\n      O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n    */\nawait client.json.set('employee_profile:1', '.age', 30);\nconst incrementResult = await client.json.numIncrBy(\n  'employee_profile:1',\n  '.age',\n  5,\n);\nconsole.log(incrementResult); // 35\n\n/*\n      JSON.OBJKEYS key [path]\n      Return the keys in the object that's referenced by path\n      O(N) when path is evaluated to a single value, where N is the number of keys in the object, O(N) when path is evaluated to multiple values, where N is the size of the key\n    */\nconst objKeysResult = await client.json.objKeys('employee_profile:1');\nconsole.log(objKeysResult); // [ 'name', 'age' ]\n\n/*\n      JSON.OBJLEN key [path]\n      Report the number of keys in the JSON object at path in key\n      O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n    */\nconst objLenResult = await client.json.objLen('employee_profile:1');\nconsole.log(objLenResult); // 2\n\n/*\n      JSON.ARRAPPEND key [path] value [value ...]\n      Append the json values into the array at path after the last element in it\n      O(1) for each value added, O(N) for multiple values added where N is the size of the key\n    */\nawait client.json.set('employee_profile:1', '.colors', [\n  'red',\n  'green',\n  'blue',\n]);\nconst arrAppendResult = await client.json.arrAppend(\n  'employee_profile:1',\n  '.colors',\n  'yellow',\n);\nconsole.log(arrAppendResult); // 4\n\n/*\n      JSON.ARRINSERT key path index value [value ...]\n      Insert the json values into the array at path before the index (shifts to the right)\n      O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key\n    */\nconst arrInsertResult = await client.json.arrInsert(\n  'employee_profile:1',\n  '.colors',\n  2,\n  'purple',\n);\nconsole.log(arrInsertResult); // 5\n\n/*\n      JSON.ARRINDEX key path json [start [stop]]\n      Searches for the first occurrence of a JSON value in an array.\n      O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key\n    */\nconst arrIndexResult = await client.json.arrIndex(\n  'employee_profile:1',\n  '.colors',\n  'purple',\n);\nconsole.log(arrIndexResult); // 2\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# JSON.SET key path value\n# O(M+N) where M is the original size and N is the new size\n# Set the JSON value at path in key.\nr.json().set('employee_profile:nicol', '.', {\n    'name': 'nicol', 'age': 24, 'single': True, 'skills': []})\nr.json().set('employee_profile:nicol', '$.name', 'Nicol')\n\n# JSON.GET key [path [path ...]]\n# O(N)\n# Return the value at path in JSON serialized form\nr.json().get('employee_profile:nicol', '.')\n\n# JSON.ARRAPPEND key [path] value [value ...]\n# O(1) for each value added, O(N) for multiple values added where N is the size of the key\n# Append the value(s) to the array at path in key after the last element in the array.\nr.json().set('employee_profile:nicol', '$.skills', [])\nr.json().arrappend('employee_profile:nicol', '$.skills', 'python')\nr.json().get('employee_profile:nicol', '$.skills')\n\n# JSON.ARRINDEX key path value [start [stop]]\n# O(N)\n# Search for the first occurrence of a JSON value in an array.\nr.json().arrindex('employee_profile:nicol', '$.skills', 'python')\nr.json().arrindex('employee_profile:nicol', '$.skills', 'java')\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * JSON.SET key path value\n * O(M+N) where M is the original size and N is the new size\n * Set the JSON value at path in key.\n */\ndb.JSON().Set("employee_profile:nicol", ".", new\n{\n    name = "Nicol",\n    age = 24,\n    single = true,\n    skills = new string[] { }\n});\ndb.JSON().Set("employee_profile:nicol", "$.name", "\\"Nicol\\"");\n\n/*\n * JSON.GET key [path [path ...]]\n * O(N)\n * Return the value at path in JSON serialized form\n */\ndb.JSON().Get("employee_profile:nicol", ".");\n\n/*\n * JSON.ARRAPPEND key [path] value [value ...]\n * O(1) for each value added, O(N) for multiple values added where N is the size\n * of the key\n * Append the value(s) to the array at path in key after the last element in the\n * array.\n */\ndb.JSON().Set("employee_profile:nicol", "$.skills", "[]");\ndb.JSON().ArrAppend("employee_profile:nicol", "$.skills", "python");\ndb.JSON().Get("employee_profile:nicol", "$.skills");\n\n/*\n * JSON.ARRINDEX key path value [start [stop]]\n * O(N)\n * Search for the first occurrence of a JSON value in an array.\n */\ndb.JSON().ArrIndex("employee_profile:nicol", "$.skills", "python");\ndb.JSON().ArrIndex("employee_profile:nicol", "$.skills", "java");\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * JSON.SET key path value\n * O(M+N) where M is the original size and N is the new size\n * Set the JSON value at path in key.\n */\njedis.jsonSet("employee_profile:nicol", Path2.ROOT_PATH,\n        "{\\"name\\":\\"nicol\\",\\"age\\":24,\\"single\\":true,\\"skills\\":[]}");\njedis.jsonSet("employee_profile:nicol", Path2.of("$.name"),\n        "\\"Nicol\\"");\n\n/*\n * JSON.GET key [path [path ...]]\n * O(N)\n * Return the value at path in JSON serialized form\n */\njedis.jsonGet("employee_profile:nicol", Path2.ROOT_PATH);\n\n/*\n * JSON.ARRAPPEND key [path] value [value ...]\n * O(1) for each value added, O(N) for multiple values added where N is the size\n * of the key\n * Append the value(s) to the array at path in key after the last element in the\n * array.\n */\njedis.jsonSet("employee_profile:nicol", Path2.of("$.skills"),\n        "[]");\njedis.jsonArrAppend("employee_profile:nicol", Path2.of("$.skills"), "\\"python\\"");\njedis.jsonGet("employee_profile:nicol", Path2.of("$.skills"));\n\n/*\n * JSON.ARRINDEX key path value [start [stop]]\n * O(N)\n * Search for the first occurrence of a JSON value in an array.\n */\njedis.jsonArrIndex("employee_profile:nicol", Path2.of("$.skills"), "\\"python\\"");\njedis.jsonArrIndex("employee_profile:nicol", Path2.of("$.skills"), "\\"java\\"");\n')))))}k.isMDXComponent=!0},36622:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/lists",id:"howtos/quick-start/cheat-sheets/lists",title:"lists",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/lists.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/lists",permalink:"/howtos/quick-start/cheat-sheets/lists",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/lists.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"LPUSH"),(0,s.kt)("td",null,"LPUSH key value [value ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nLPUSH myList "World"\n'))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Inserts the specified values at the head of the list stored at key. ",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"RPUSH"),(0,s.kt)("td",null,"RPUSH key value [value ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nRPUSH myList "Hello"\n'))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Inserts the specified values at the tail of the list stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"LRANGE"),(0,s.kt)("td",null,"LRANGE key start stop"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nLRANGE myList 0 -1\n"))),(0,s.kt)("td",null,'1) "World" 2) "Hello"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the specified elements of the list stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(S+N) where S is the distance of start and N is the number of elements in the specified range.")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"LLEN"),(0,s.kt)("td",null,"LLEN key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nLLEN myList\n"))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the length of the list stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"LPOP"),(0,s.kt)("td",null,"LPOP key [count]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nLPOP myList\n"))),(0,s.kt)("td",null,'"World"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Removes and returns the first element of the list stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"RPOP"),(0,s.kt)("td",null,"RPOP key [count]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nRPOP myList\n"))),(0,s.kt)("td",null,'"Hello"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Removes and returns the last element of the list stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    LPUSH key value [value ...]\n    Inserts the specified values at the head of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst lPushResult = await client.lPush('myList', 'World');\nconsole.log(lPushResult); // 1\n\n/*\n    RPUSH key value [value ...]\n    Inserts the specified values at the tail of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst rPushResult = await client.rPush('myList', 'Hello');\nconsole.log(rPushResult); // 2\n\n/*\n    LRANGE key start stop\n    Returns the specified elements of the list stored at key.\n    Time Complexity: O(S+N) where S is the distance of start and N is the number of elements in the specified range.\n    */\nconst lRangeResult = await client.lRange('myList', 0, -1);\nconsole.log(lRangeResult); // [\"World\", \"Hello\"]\n\n/*\n    LLEN key\n    Returns the length of the list stored at key.\n    Time Complexity: O(1)\n    */\nconst lLenResult = await client.lLen('myList');\nconsole.log(lLenResult); // 2\n\n/*\n    LPOP key [count]\n    Removes and returns the first element of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst lPopResult = await client.lPop('myList');\nconsole.log(lPopResult); // \"World\"\n\n/*\n    RPOP key [count]\n    Removes and returns the last element of the list stored at key.\n    Time Complexity: O(N)\n    */\nconst rPopResult = await client.rPop('myList');\nconsole.log(rPopResult); // \"Hello\"\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# LPOP key [count]\n# O(N)\n# Removes and returns the first element(s) of the list stored at key.\nr.rpush('mylist', 'one', 'two', 'three', 'four', 'five')\nr.lpop('mylist')\nr.lpop('mylist', 2)\n\n# LRANGE key start stop\n# O(S+N)\n# Returns the specified elements of the list stored at key.\nr.delete('mylist')\nr.rpush('mylist', 'one', 'two', 'three', 'four', 'five')\nr.lrange('mylist', 0, -1)\nr.lrange('mylist', -3, 2)\n\n# LPUSH key element [element ...]\n# O(N)\n# Inserts specified values at the head of the list stored at key.\nr.delete('mylist')\nr.lpush('mylist', 'world')\nr.lpush('mylist', 'hello')\nr.lrange('mylist', 0, -1)\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * LPOP key [count]\n * O(N)\n * Removes and returns the first elements of the list stored at key.\n */\ndb.ListLeftPush("mylist", new RedisValue[] { "one", "two", "three", "four", "five" });\ndb.ListLeftPop("mylist");\ndb.ListLeftPop("mylist", 2);\n\n/*\n * LRANGE key start stop\n * O(S+N)\n * Returns the specified elements of the list stored at key.\n */\ndb.KeyDelete("mylist");\ndb.ListRightPush("mylist", new RedisValue[] { "one", "two", "three", "four", "five" });\ndb.ListRange("mylist", 0, -1);\ndb.ListRange("mylist", -3, 2);\n\n/*\n * LPUSH key value [value ...]\n * O(N)\n * Insert all the specified values at the head of the list stored at key.\n */\ndb.KeyDelete("mylist");\ndb.ListLeftPush("mylist", new RedisValue[] { "world" });\ndb.ListLeftPush("mylist", new RedisValue[] { "hello" });\ndb.ListRange("mylist", 0, -1);\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * LPOP key [count]\n * O(N)\n * Removes and returns the first elements of the list stored at key.\n */\njedis.lpush("mylist", "one", "two", "three", "four", "five");\njedis.lpop("mylist");\njedis.lpop("mylist", 2);\n\n/*\n * LRANGE key start stop\n * O(S+N)\n * Returns the specified elements of the list stored at key.\n */\njedis.del("mylist");\njedis.rpush("mylist", "one", "two", "three", "four", "five");\njedis.lrange("mylist", 0, -1);\njedis.lrange("mylist", -3, 2);\n\n/*\n * LPUSH key value [value ...]\n * O(N)\n * Insert all the specified values at the head of the list stored at key.\n */\njedis.del("mylist");\njedis.lpush("mylist", "world");\njedis.lpush("mylist", "hello");\njedis.lrange("mylist", 0, -1);\n')))))}k.isMDXComponent=!0},74476:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/search-and-query",id:"howtos/quick-start/cheat-sheets/search-and-query",title:"search-and-query",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/search-and-query.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/search-and-query",permalink:"/howtos/quick-start/cheat-sheets/search-and-query",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/search-and-query.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"FT.CREATE"),(0,s.kt)("td",{class:"cst-large-code"},(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nFT.CREATE index\n  [ON HASH | JSON]\n  [PREFIX count prefix [prefix ...]]\n  [FILTER {filter}]\n  SCHEMA\n  field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE [ SORTABLE [UNF]]\n  [NOINDEX]\n   ...\n"))),(0,s.kt)("td",{class:"cst-large-code"},(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nFT.CREATE staff:index\n    ON JSON\n    PREFIX 1 staff:\n    SCHEMA\n    "$.name" AS name TEXT\n    "$.age" AS age NUMERIC\n    "$.isSingle"  AS isSingle TAG\n    \'$["skills"][*]\' AS skills TAG SEPARATOR "|"\n'))),(0,s.kt)("td",null,"OK")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Create an index with the given specification.",(0,s.kt)("em",null,"Time Complexity:")," O(K) where K is the number of fields in the document, O(N) for keys in the keySpace")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"FT.SEARCH"),(0,s.kt)("td",{class:"cst-large-code"},(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nFT.SEARCH index query\n  [FILTER numeric_field min max [ FILTER numeric_field min max ...]]\n  [RETURN count identifier [AS property] [ identifier [AS property] ...]]\n  [SORTBY sortby [ ASC | DESC] [WITHCOUNT]]\n  [LIMIT offset num]\n  [PARAMS nargs name value [ name value ...]]\n"))),(0,s.kt)("td",{class:"cst-large-code"},(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nJSON.SET "staff:1" "$" \'{"name":"Bob","age":22,"isSingle":true,"skills":["NodeJS","MongoDB","React"]}\' \n\nJSON.SET "staff:2" "$" \'{"name":"Alex","age":45,"isSingle":true,"skills":["Python","MySQL","Angular"]}\' \n\nFT.SEARCH staff:index\n  "(@name:\'alex\')"\n  RETURN 1 $ LIMIT 0 10 \n\nFT.SEARCH staff:index\n  "((@isSingle:{true}) (@age:[(18 +inf]))"\n  RETURN 1 $ LIMIT 0 10\n'))),(0,s.kt)("td",null,"Matching documents data")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Search the index with a query, returning either documents or just ids. ",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"FT.AGGREGATE"),(0,s.kt)("td",{class:"cst-large-code"},(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nFT.AGGREGATE index query\n  [LOAD count field [field ...]]\n  [ GROUPBY nargs property [property ...] [ REDUCE function nargs arg [arg ...] [AS name] ...\n  [ SORTBY nargs [ property ASC | DESC [ property ASC | DESC ...]] [MAX num] [WITHCOUNT]\n  [ APPLY expression AS name  ...\n  [ LIMIT offset num]\n  [FILTER filter]\n  [ PARAMS nargs name value [ name value ...]]\n"))),(0,s.kt)("td",{class:"cst-large-code"},(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nFT.AGGREGATE staff:index "(@age:[(18 +inf])"\n  GROUPBY 1 @age\n  \tREDUCE COUNT_DISTINCT 1 @name AS staff_count\n'))),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\n         | age | staff_count |\n         | ----| ------------|\n         | 22  | 1           |\n         | 45  | 1           |\n")))),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Run a search query on an index, and perform aggregate transformations on the results.")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"FT.INFO"),(0,s.kt)("td",null,"FT.INFO index"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nFT.INFO staff:index\n"))),(0,s.kt)("td",null,"A list of configuration parameters and stats for the index.")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Return information and statistics on the index.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"FT.DROPINDEX"),(0,s.kt)("td",null,"FT.DROPINDEX index [DD]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nFT.DROPINDEX staff:index\n"))),(0,s.kt)("td",null,"OK")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Dropping existing index.",(0,s.kt)("em",null,"Time Complexity:"),"O(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const STAFF_INDEX_KEY = 'staff:index';\nconst STAFF_KEY_PREFIX = 'staff:';\n\ntry {\n  /*\n       FT.DROPINDEX index [DD]\n       Dropping existing index\n       O(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace\n      */\n  await client.ft.dropIndex(STAFF_INDEX_KEY);\n} catch (indexErr) {\n  console.error(indexErr);\n}\n\n/*\n   FT.CREATE index [ON HASH | JSON] [PREFIX n] SCHEMA [field type [field type ...]]\n   Create an index with the given specification\n   O(K) where K is the number of fields in the document, O(N) for keys in the keyspace\n */\nconst schema: RediSearchSchema = {\n  '$.name': {\n    type: SchemaFieldTypes.TEXT,\n    AS: 'name',\n  },\n  '$.age': {\n    type: SchemaFieldTypes.NUMERIC,\n    AS: 'age',\n  },\n  '$.isSingle': {\n    type: SchemaFieldTypes.TAG,\n    AS: 'isSingle',\n  },\n  '$[\"skills\"][*]': {\n    type: SchemaFieldTypes.TAG,\n    AS: 'skills',\n    SEPARATOR: '|',\n  },\n};\nawait client.ft.create(STAFF_INDEX_KEY, schema, {\n  ON: 'JSON',\n  PREFIX: STAFF_KEY_PREFIX,\n});\n\n//-------addStaffEntries for search\nawait client.json.set('staff:1', '.', {\n  name: 'Bob',\n  age: 22,\n  isSingle: true,\n  skills: ['NodeJS', 'MongoDB', 'React'],\n});\nawait client.json.set('staff:2', '.', {\n  name: 'Alex',\n  age: 45,\n  isSingle: true,\n  skills: ['Python', 'MySQL', 'Angular'],\n});\n//------\n\n/*\n    FT.SEARCH index query\n    Search the index with a query, returning either documents or just ids\n    O(N)\n    */\n\nconst query1 = '*'; //all records\nconst query2 = \"(@name:'alex')\"; // name == 'alex'\nconst query3 = '( (@isSingle:{true}) (@age:[(18 +inf]) )'; //isSingle == true && age > 18\nconst query4 = '(@skills:{NodeJS})';\nconst searchResult = await client.ft.search(\n  STAFF_INDEX_KEY,\n  query1, //query2, query3, query4\n  {\n    RETURN: ['name', 'age', 'isSingle'],\n    LIMIT: {\n      from: 0,\n      size: 10,\n    },\n  },\n);\nconsole.log(JSON.stringify(searchResult));\n//{\"total\":1,\"documents\":[{\"id\":\"staff:2\",\"value\":{\"name\":\"Alex\",\"age\":\"45\",\"isSingle\":\"1\"}}]}\n\n/*\n    FT.AGGREGATE index query\n    Run a search query on an index, and perform aggregate transformations on the results\n\n    FT.AGGREGATE staff:index \"(@age:[(10 +inf])\"\n      GROUPBY 1 @age\n        REDUCE COUNT 0 AS userCount\n      SORTBY 1 @age\n      LIMIT 0 10\n    */\nconst aggregateResult = await client.ft.aggregate(\n  STAFF_INDEX_KEY,\n  '(@age:[(10 +inf])',\n  {\n    STEPS: [\n      {\n        type: AggregateSteps.GROUPBY,\n        properties: ['@age'],\n        REDUCE: [\n          {\n            type: AggregateGroupByReducers.COUNT,\n            AS: 'userCount',\n          },\n        ],\n      },\n      {\n        type: AggregateSteps.SORTBY,\n        BY: '@age',\n      },\n      {\n        type: AggregateSteps.LIMIT,\n        from: 0,\n        size: 10,\n      },\n    ],\n  },\n);\nconsole.log(JSON.stringify(aggregateResult));\n//{\"total\":2,\"results\":[{\"age\":\"22\",\"userCount\":\"1\"},{\"age\":\"45\",\"userCount\":\"1\"}]}\n//----\n\n/*\n    FT.INFO index\n    Return information and statistics on the index\n    O(1)\n    */\nconst infoResult = await client.ft.info(STAFF_INDEX_KEY);\nconsole.log(infoResult);\n/**\n     {\n        indexName: 'staff:index',\n        numDocs: '2',\n        maxDocId: '4',\n        stopWords: 2\n        ...\n     }\n     */\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    r.ft('idx-employees').dropindex()\nexcept:\n    pass\n\n# FT.CREATE index [ON HASH | JSON] [PREFIX count prefix [prefix ...]] SCHEMA field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAP [SORTABLE [UNF]] [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]\n# O(K) where K is the number of fields in the document, O(N) for keys in the keyspace\n# Creates a new search index with the given specification.\nschema = (TextField('$.name', as_name='name', sortable=True), NumericField('$.age', as_name='age', sortable=True),\n          TagField('$.single', as_name='single'), TagField('$.skills[*]', as_name='skills'))\n\nr.ft('idx-employees').create_index(schema, definition=IndexDefinition(\n    prefix=['employee_profile:'], index_type=IndexType.JSON))\n\n# FT.INFO index\n# O(1)\n# Return information and statistics on the index.\nr.ft('idx-employees').info()\n\n# FT.SEARCH index query\n# O(N)\n# Search the index with a textual query, returning either documents or just ids\nr.ft('idx-employees').search('Nicol')\nr.ft('idx-employees').search(\"@single:{false}\")\nr.ft('idx-employees').search(\"@skills:{python}\")\nr.ft('idx-employees').search(Query(\"*\").add_filter(NumericFilter('age', 30, 40)))\nr.json().arrappend('employee_profile:karol', '$.skills', 'python', 'java', 'c#')\nr.ft('idx-employees').search(Query(\"@skills:{java}, @skills:{python}\"))\n\n# FT.AGGREGATE index query\n# O(1)\n# Run a search query on an index, and perform aggregate transformations on the results, extracting statistics etc from them\nr.ft('idx-employees').aggregate(aggregations.AggregateRequest(\"*\").group_by('@age',\n                                                                            reducers.count().alias('count')).sort_by(\"@age\")).rows\n\nr.ft('idx-employees').aggregate(aggregations.AggregateRequest(\"@skills:{python}\").group_by('@skills',\n                                                                                           reducers.tolist('@name').alias('names'))).rows\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'try\n{\n    /*\n     * FT.DROPINDEX index [DD]\n     * O(1)\n     * Deletes an index and all the documents in it.\n     */\n    db.FT().DropIndex("idx-employees");\n}\ncatch\n{\n    // Index not found\n}\n\n/*\n * FT.CREATE index [ON HASH | JSON] [PREFIX count prefix [prefix ...]] SCHEMA\n * field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAP [SORTABLE\n * [UNF]] [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR\n * | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]\n * O(K) where K is the number of fields in the document, O(N) for keys in the\n * keyspace\n * Creates a new search index with the given specification.\n */\ndb.FT().Create("idx-employees", new FTCreateParams()\n                                    .On(IndexDataType.JSON)\n                                    .Prefix("employee_profile:"),\n                                new Schema()\n                                    .AddTextField(new FieldName("$.name", "name"), sortable: true)\n                                    .AddNumericField(new FieldName("$.age", "age"), sortable: true)\n                                    .AddTagField(new FieldName("$.single", "single"))\n                                    .AddTagField(new FieldName("$.skills[*]", "skills")));\n\n/*\n * FT.INFO index\n * O(1)\n * Returns information and statistics on the index.\n */\ndb.FT().Info("idx-employees");\n\n/*\n * FT._LIST\n * O(1)\n * Returns a list of all existing indexes.\n */\ndb.FT()._List();\n\n/*\n * FT.SEARCH index query\n * O(N)\n * Search the index with a textual query, returning either documents or just ids\n */\ndb.FT().Search("idx-employees", new Query("@name:{nicol}"));\ndb.FT().Search("idx-employees", new Query("@single:{false}"));\ndb.FT().Search("idx-employees", new Query("@skills:{python}"));\ndb.FT().Search("idx-employees", new Query().AddFilter(new NumericFilter("@age", 30, 40)));\ndb.JSON().ArrAppend("employee_profile:karol", "$.skills", "python", "java", "c#");\ndb.FT().Search("idx-employees", new Query("@skills:{java}, @skills:{python}"));\n\n/*\n * FT.AGGREGATE index query\n * O(1)\n * Run a search query on an index, and perform aggregate transformations on the\n * results, extracting statistics etc from them\n */\ndb.FT().Aggregate("idx-employees", new AggregationRequest("@age:[20 40]")\n                                    .GroupBy("@age", Reducers.Count().As("count"))\n                                    .SortBy(new SortedField("@age", SortedField.SortOrder.ASC)));\ndb.FT().Aggregate("idx-employees", new AggregationRequest("@skills:{python}")\n                                    .GroupBy("@skills", Reducers.ToList("@name").As("names")));\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'try {\n    jedis.ftDropIndex("idx-employees");\n} catch (Exception e) {\n    // Index not found\n}\n\n/*\n * FT.CREATE index [ON HASH | JSON] [PREFIX count prefix [prefix ...]] SCHEMA\n * field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR | GEOSHAP [SORTABLE\n * [UNF]] [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR\n * | GEOSHAPE [ SORTABLE [UNF]] [NOINDEX] ...]\n * O(K) where K is the number of fields in the document, O(N) for keys in the\n * keyspace\n * Creates a new search index with the given specification.\n */\nSchema schema = new Schema()\n        .addSortableTextField("$.name", 1.0).as("name")\n        .addSortableNumericField("$.age").as("age")\n        .addTagField("$.single").as("single")\n        .addTagField("$.skills[*]").as("skills");\n\nIndexDefinition def = new IndexDefinition(IndexDefinition.Type.JSON)\n        .setPrefixes("employee_profile:");\n\njedis.ftCreate("idx-employees", IndexOptions.defaultOptions().setDefinition(def), schema);\n\n/*\n * FT.INFO index\n * O(1)\n * Returns information and statistics on the index.\n */\njedis.ftInfo("idx-employees");\n\n/*\n * FT._LIST\n * O(1)\n * Returns a list of all existing indexes.\n */\njedis.ftList();\n\n/*\n * FT.SEARCH index query\n * O(N)\n * Search the index with a textual query, returning either documents or just ids\n */\njedis.ftSearch("idx-employees", "Nicol");\njedis.ftSearch("idx-employees", "@single:{false}");\njedis.ftSearch("idx-employees", "@skills:{python}");\njedis.ftSearch("idx-employees", "*",\n        FTSearchParams.searchParams().filter(new NumericFilter("age", 30, 40)));\njedis.jsonArrAppend("employee_profile:karol", Path2.of("$.skills"), "\\"python\\"", "\\"java\\"", "\\"c#\\"");\njedis.ftSearch("idx-employees", "@skills:{java}, @skills:{python}");\n\n/*\n * FT.AGGREGATE index query\n * O(1)\n * Run a search query on an index, and perform aggregate transformations on the\n * results, extracting statistics etc from them\n */\njedis.ftAggregate("idx-employees", new AggregationBuilder()\n        .groupBy("@age", Reducers.count().as("count")).sortBy(new SortedField("@age", SortOrder.ASC)))\n        .getRows();\njedis.ftAggregate("idx-employees", new AggregationBuilder("@skills:{python}")\n        .groupBy("@skills", Reducers.to_list("@name").as("names")))\n        .getRows();\n')))))}k.isMDXComponent=!0},93880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/sets",id:"howtos/quick-start/cheat-sheets/sets",title:"sets",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/sets.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/sets",permalink:"/howtos/quick-start/cheat-sheets/sets",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/sets.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SADD"),(0,s.kt)("td",null,"SADD key member [member ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nSADD mySet "Hello"\n'))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Adds the specified members to the set stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SMEMBERS"),(0,s.kt)("td",null,"SMEMBERS key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nSMEMBERS mySet\n"))),(0,s.kt)("td",null,'1) "Hello"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns all the members of the set value stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SCARD"),(0,s.kt)("td",null,"SCARD key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nSCARD mySet\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the set cardinality (number of elements) of the set stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SISMEMBER"),(0,s.kt)("td",null,"SISMEMBER key member"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nSISMEMBER mySet "Hello"\n'))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns if member is a member of the set stored at key.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SDIFF"),(0,s.kt)("td",null,"SDIFF key1 [key2]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nSDIFF mySet myOtherSet\n"))),(0,s.kt)("td",null,'1) "Hello"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the members of the set resulting from the difference between the first set and all the successive sets.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SDIFFSTORE"),(0,s.kt)("td",null,"SDIFFSTORE destination key1 [key2]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nSDIFFSTORE myNewSet mySet myOtherSet\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SREM"),(0,s.kt)("td",null,"SREM key member [member ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nSREM mySet "Hello"\n'))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Removes the specified members from the set stored at key."))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    SADD key member [member ...]\n    Adds the specified members to the set stored at key.\n    Time Complexity: O(N)\n    */\nconst sAddResult = await client.sAdd('mySet', 'Hello');\nconsole.log(sAddResult); // 1\n\n/*\n    SMEMBERS key\n    Returns all the members of the set value stored at key.\n    Time Complexity: O(N)\n    */\nconst sMembersResult = await client.sMembers('mySet');\nconsole.log(sMembersResult); // [\"Hello\"]\n\n/*\n    SCARD key\n    Returns the set cardinality (number of elements) of the set stored at key.\n    Time Complexity: O(1)\n    */\nconst sCardResult = await client.sCard('mySet');\nconsole.log(sCardResult); // 1\n\n/*\n    SISMEMBER key member\n    Returns if member is a member of the set stored at key.\n    Time Complexity: O(1)\n    */\nconst sIsMemberResult = await client.sIsMember('mySet', 'Hello');\nconsole.log(sIsMemberResult); // true\n\n/*\n    SDIFF key1 [key2]\n    Returns the members of the set resulting from the difference between the first set and all the successive sets.\n    Time Complexity: O(N)\n    */\nconst sDiffResult = await client.sDiff(['mySet', 'myOtherSet']);\nconsole.log(sDiffResult); // [\"Hello\"]\n\n/*\n    SDIFFSTORE destination key1 [key2]\n    This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.\n    Time Complexity: O(N)\n    */\nconst sDiffStoreResult = await client.sDiffStore('myNewSet', [\n  'mySet',\n  'myOtherSet',\n]);\nconsole.log(sDiffStoreResult); // 1\n\n/*\n    SREM key member [member ...]\n    Removes the specified members from the set stored at key.\n    */\nconst sRemResult = await client.sRem('mySet', 'Hello');\nconsole.log(sRemResult); // 1\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# SADD key member [member ...]\n# O(N)\n# Add the specified members to the set stored at key.\nr.sadd('myset', 'Hello')\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * SADD key member [member ...]\n * O(N)\n * Add the specified members to the set stored at key.\n */\ndb.SetAdd("myset", "Hello");\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * SADD key member [member ...]\n * O(N)\n * Add the specified members to the set stored at key.\n */\njedis.sadd("myset", "Hello");\n')))))}k.isMDXComponent=!0},53188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/sorted-sets",id:"howtos/quick-start/cheat-sheets/sorted-sets",title:"sorted-sets",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/sorted-sets.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/sorted-sets",permalink:"/howtos/quick-start/cheat-sheets/sorted-sets",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/sorted-sets.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"ZADD"),(0,s.kt)("td",null,"ZADD key score member [score member ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nZADD myZSet 1 "one" 2 "two"\n'))),(0,s.kt)("td",null,"(integer) 2")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Adds all the specified members with the specified scores to the sorted set stored at key. ",(0,s.kt)("em",null,"Time Complexity: "),"O(log(N))")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"ZRANGE"),(0,s.kt)("td",null,"ZRANGE key start stop [WITHSCORES]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nZRANGE myZSet 0 -1\n"))),(0,s.kt)("td",null,'1) "one" 2)"two" ')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the specified range of elements in the sorted set stored at key.",(0,s.kt)("em",null,"Time Complexity: "),"O(log(N)+M) where M is the number of elements returned"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    ZADD key score member [score member ...]\n    Adds all the specified members with the specified scores to the sorted set stored at key.\n    Time Complexity: O(log(N))\n    */\nconst zAddResult = await client.zAdd('myZSet', [\n  {\n    score: 1,\n    value: 'one',\n  },\n  {\n    score: 2,\n    value: 'two',\n  },\n]);\nconsole.log(zAddResult); // 2\n\n/*\n    ZRANGE key start stop [WITHSCORES]\n    Returns the specified range of elements in the sorted set stored at key.\n    Time Complexity: O(log(N)+M) where M is the number of elements returned\n    */\nconst zRangeResult = await client.zRange('myZSet', 0, -1);\nconsole.log(zRangeResult); // [\"one\", \"two\"]\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# ZADD key score member [score member ...]\n# O(log(N))\n# Adds all the specified members with the specified scores to the sorted set stored at key.\nr.zadd('myzset', {'one': 1, 'two': 2, 'three': 3})\n\n# ZRANGE key start stop [WITHSCORES]\n# O(log(N)+M)\n# Returns the specified range of elements in the sorted set stored at key.\nr.zrange('myzset', 0, -1, withscores=True)\nr.zrange('myzset', 0, -1)\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * ZADD key score member [score member ...]\n * O(log(N))\n * Adds all the specified members with the specified scores to the sorted set\n * stored at key.\n */\ndb.KeyDelete("myzset");\ndb.SortedSetAdd("myzset", new SortedSetEntry[] {\n                            new SortedSetEntry("one", 1.0),\n                            new SortedSetEntry("two", 2.0),\n                            new SortedSetEntry("three", 3.0)\n                          });\n\n/*\n * ZRANGE key start stop [WITHSCORES]\n * O(log(N)+M)\n * Returns the specified range of elements in the sorted set stored at key.\n */\ndb.SortedSetRangeByRank("myzset", 0, -1);\ndb.SortedSetRangeByRankWithScores("myzset", 0, -1);\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * ZADD key score member [score member ...]\n * O(log(N))\n * Adds all the specified members with the specified scores to the sorted set\n * stored at key.\n */\njedis.del("myzset");\njedis.zadd("myzset", Map.of(\n                            "one", 1.0,\n                            "two", 2.0,\n                            "three", 3.0\n                            ));\n\n/*\n * ZRANGE key start stop [WITHSCORES]\n * O(log(N)+M)\n * Returns the specified range of elements in the sorted set stored at key.\n */\njedis.zrange("myzset", 0, -1);\njedis.zrangeWithScores("myzset", 0, -1);\n')))))}k.isMDXComponent=!0},135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/streams",id:"howtos/quick-start/cheat-sheets/streams",title:"streams",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/streams.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/streams",permalink:"/howtos/quick-start/cheat-sheets/streams",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/streams.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"XADD"),(0,s.kt)("td",null,"XADD key field value [field value ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nXADD myStream * sensorId "1234" temperature "19.8"\n'))),(0,s.kt)("td",null,"1518951480106-0")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Appends the specified stream entry to the stream at the specified key. ",(0,s.kt)("em",null,"Time Complexity:")," O(1) when adding a new entry.")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"XREAD"),(0,s.kt)("td",null,"XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nXREAD COUNT 2 STREAMS myStream 0\n"))),(0,s.kt)("td",null,'1) 1) "myStream" 2) 1) 1) "1518951480106-0" 2) 1) "sensorId" 2) "1234" 3) "temperature" 4) "19.8"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Read data from one or multiple streams, only returning entries with an ",(0,s.kt)("b",null,"ID greater")," than the last received ID reported by the caller.")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"XRANGE"),(0,s.kt)("td",null,"XRANGE key start end [COUNT count]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nXRANGE myStream 1518951480106-0 1518951480106-0\n"))),(0,s.kt)("td",null,'1) 1) 1) "1518951480106-0" 2) 1) "sensorId" 2) "1234" 3) "temperature" 4) "19.8"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the entries matching a range of IDs in a stream. ",(0,s.kt)("em",null,"Time Complexity:")," O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"XLEN"),(0,s.kt)("td",null,"XLEN key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nXLEN myStream\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the number of entries of a stream."," ",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"XDEL"),(0,s.kt)("td",null,"XDEL key ID [ID ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nXDEL myStream 1518951480106-0\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Removes the specified entries from a stream."," ",(0,s.kt)("em",null,"Time Complexity:")," O(1) for each single item to delete in the stream")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"XTRIM"),(0,s.kt)("td",null,"XTRIM key MAXLEN [~] count"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nXTRIM myStream MAXLEN 0\n"))),(0,s.kt)("td",null,"(integer) 0")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Trims the stream to a different length."," ",(0,s.kt)("em",null,"Time Complexity:")," O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation."))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/*\nXADD key field value [field value ...]\nAppends the specified stream entry to the stream at the specified key.\nO(1) when adding a new entry.\n*/\n\nconst xAddResult = await client.xAdd(\n  \'myStream\',\n  \'*\', //dynamic id\n  {\n    sensorId: \'1234\',\n    temperature: \'19.8\',\n  },\n);\nconsole.log(xAddResult); // "1518951480106-0"\n\n/*\n    XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n    Read data from one or multiple streams, only returning entries with an ID greater than the last received ID reported by the caller.\n    */\nconst xReadResult = await client.xRead(\n  commandOptions({\n    isolated: true,\n  }),\n  [\n    {\n      // XREAD can read from multiple streams, starting at a different ID for each.\n      key: \'myStream\',\n      id: \'0\', //entries greater than id\n    },\n  ],\n  {\n    // Read 2 entries at a time, block for 5 seconds if there are none.\n    COUNT: 2,\n    BLOCK: 5000,\n  },\n);\n\nconsole.log(JSON.stringify(xReadResult)); // [{"name":"myStream","messages":[{"id":"1518951480106-0","message":{"sensorId":"1234","temperature":"19.8"}}]}]\n\n/*\n    XRANGE key start end [COUNT count]\n    Returns the entries matching a range of IDs in a stream.\n    O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\n    */\nconst xRangeResult = await client.xRange(\'myStream\', xAddResult, xAddResult);\nconsole.log(JSON.stringify(xRangeResult)); // [{"id":"1518951480106-0","message":{"sensorId":"1234","temperature":"19.8"}}]\n\n/*\n    XLEN key\n    Returns the number of entries of a stream.\n    O(1)\n    */\nconst xLenResult = await client.xLen(\'myStream\');\nconsole.log(xLenResult); // 1\n\n/*\n    XDEL key ID [ID ...]\n    Removes the specified entries from a stream.\n    O(1) for each single item to delete in the stream\n    */\nconst xDelResult = await client.xDel(\'myStream\', xAddResult);\nconsole.log(xDelResult); // 1\n\n/*\n    XTRIM key MAXLEN [~] count\n    Trims the stream to a different length.\n    O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.\n    */\nconst xTrimResult = await client.xTrim(\'myStream\', \'MAXLEN\', 0);\nconsole.log(xTrimResult); // 0\n'))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# XADD key field value [field value ...]\n# O(1) for new entries, O(N) when trimming where N is the number of evicted values\n# Appends the specified stream entry to the stream at the specified key.\nr.xadd('temperatures:us-ny:10007',\n       {'temp_f': 87.2, 'pressure': 29.69, 'humidity': 46})\nr.xadd('temperatures:us-ny:10007',\n       {'temp_f': 83.1, 'pressure': 29.21, 'humidity': 46.5})\nr.xadd('temperatures:us-ny:10007',\n       {'temp_f': 81.9, 'pressure': 28.37, 'humidity': 43.7})\n\n# XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n# Read data from one or multiple streams, only returning entries with an ID greater than the last received ID reported by the caller.\nr.xread({'temperatures:us-ny:10007': '0-0'})\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * XADD key ID field value [field value ...]\n * O(1) for new entries, O(N) when trimming where N is the number of evicted\n * values\n * Appends the specified stream entry to the stream at the specified key.\n */\ndb.StreamAdd("temperatures:us-ny:10007", new NameValueEntry[] { new NameValueEntry("temp_f", "87.2"), new NameValueEntry("pressure", "29.69"), new NameValueEntry("humidity", "46.0") });\ndb.StreamAdd("temperatures:us-ny:10007", new NameValueEntry[] { new NameValueEntry("temp_f", "83.1"), new NameValueEntry("pressure", "29.21"), new NameValueEntry("humidity", "46.5") });\ndb.StreamAdd("temperatures:us-ny:10007", new NameValueEntry[] { new NameValueEntry("temp_f", "81.9"), new NameValueEntry("pressure", "28.37"), new NameValueEntry("humidity", "43.7") });\n\n/*\n * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n * Read data from one or multiple streams, only returning entries with an ID\n * greater than the last received ID reported by the caller.\n */\ndb.StreamRead("temperatures:us-ny:10007", "0-0");\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * XADD key ID field value [field value ...]\n * O(1) for new entries, O(N) when trimming where N is the number of evicted\n * values\n * Appends the specified stream entry to the stream at the specified key.\n */\njedis.xadd("temperatures:us-ny:10007", StreamEntryID.NEW_ENTRY,\n        Map.of("temp_f", "87.2", "pressure", "29.69", "humidity", "46.0"));\njedis.xadd("temperatures:us-ny:10007", StreamEntryID.NEW_ENTRY,\n        Map.of("temp_f", "83.1", "pressure", "29.21", "humidity", "46.5"));\njedis.xadd("temperatures:us-ny:10007", StreamEntryID.NEW_ENTRY,\n        Map.of("temp_f", "81.9", "pressure", "28.37", "humidity", "43.7"));\n\n/*\n * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n * Read data from one or multiple streams, only returning entries with an ID\n * greater than the last received ID reported by the caller.\n */\njedis.xread(XReadParams.xReadParams().count(5).block(1000),\n        singletonMap("temperatures:us-ny:10007", new StreamEntryID(0, 0)));\n')))))}k.isMDXComponent=!0},32936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var l=n(87462),s=(n(67294),n(3905)),a=n(65488),r=n(85162);const o={},i=void 0,u={unversionedId:"howtos/quick-start/cheat-sheets/strings",id:"howtos/quick-start/cheat-sheets/strings",title:"strings",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/strings.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/strings",permalink:"/howtos/quick-start/cheat-sheets/strings",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/strings.mdx",tags:[],version:"current",lastUpdatedAt:1695078274,formattedLastUpdatedAt:"Sep 18, 2023",frontMatter:{}},d={},m=[],c={toc:m};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(a.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"node-redis",value:"NODE_JS"},{label:"redis-py",value:"PYTHON"},{label:"NRedisStack",value:"C#"},{label:"Jedis",value:"JAVA"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"CLI",mdxType:"TabItem"},(0,s.kt)("table",null,(0,s.kt)("tbody",null,(0,s.kt)("tr",null,(0,s.kt)("td",null,(0,s.kt)("strong",null,"Command")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Syntax")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Example")),(0,s.kt)("td",null,(0,s.kt)("strong",null,"Output"))),(0,s.kt)("tr",null,(0,s.kt)("td",null,"SET"),(0,s.kt)("td",null,"SET key value"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,'\nSET myKey "Hello"\n'))),(0,s.kt)("td",null,'"OK"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"GET"),(0,s.kt)("td",null,"GET key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nGET myKey\n"))),(0,s.kt)("td",null,'"Hello"')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Get the string value of key. If the key does not exist the special value nil is returned.",(0,s.kt)("em",null,"Time Complexity:")," O(1)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"MGET"),(0,s.kt)("td",null,"MGET key [key ...]"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nMGET myKey nonExistentKey\n"))),(0,s.kt)("td",null,'1) "Hello" 2) (nil)')),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Returns the values of all specified keys. For every key that does not hold a string value or does not exist, the special value nil is returned.",(0,s.kt)("em",null,"Time Complexity:")," O(N)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"INCR"),(0,s.kt)("td",null,"INCR key"),(0,s.kt)("td",null,(0,s.kt)("pre",null,(0,s.kt)("code",null,"\nINCR myCounter\n"))),(0,s.kt)("td",null,"(integer) 1")),(0,s.kt)("tr",null,(0,s.kt)("td",{colspan:"4"},(0,s.kt)("em",null,"Description:")," Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation.",(0,s.kt)("em",null,"Time Complexity:")," O(1)"))))),(0,s.kt)(r.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n  SET key value\n  Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.\n  Time Complexity: O(1)\n  */\nconst setResult = await client.set('myKey', 'Hello');\nconsole.log(setResult); // \"OK\"\n\n/*\n  GET key\n  Get the string value of key. If the key does not exist the special value nil is returned.\n  Time Complexity: O(1)\n  */\nconst getResult = await client.get('myKey');\nconsole.log(getResult); // \"Hello\"\n\n/*\n  MGET key [key ...]\n  Returns the values of all specified keys. For every key that does not hold a string value or does not exist, the special value nil is returned.\n  Time Complexity: O(N)\n  */\nconst mGetResult = await client.mGet(['myKey', 'nonExistentKey']);\nconsole.log(mGetResult); // [\"Hello\", null]\n\n/*\n  INCR key\n  Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation.\n  Time Complexity: O(1)\n  */\nconst incrResult = await client.incr('myCounter');\nconsole.log(incrResult); // 1\n"))),(0,s.kt)(r.Z,{value:"PYTHON",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# SET key value\n# O(1)\n# Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.\nr.set('mykey', 'Hello')\nr.set('mykey2', 'World')\n\n# GET key\n# O(1)\n# Get the string value of key. If the key does not exist the special value nil is returned.\nr.get('mykey')\n\n# MGET key [key ...]\n# O(N)\n# Returns the values of all specified keys. For every key that does not hold a string value or does not exist, the special value nil is returned.\nr.mget(['mykey', 'mykey2', 'nonexistantkey'])\n\n# INCR key\n# O(1)\n# Increments the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation.\nr.delete('mykey')\nr.incr('mykey', 1)\nr.get('mykey')\n"))),(0,s.kt)(r.Z,{value:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'/*\n * SET key value\n * O(1)\n * Set key to hold the string value. If key already holds a value, it is\n * overwritten, regardless of its type.\n */\ndb.StringSet("mykey", "Hello");\ndb.StringSet("mykey2", "World");\n\n/*\n * GET key\n * O(1)\n * Get the value of key. If the key does not exist the special value nil\n */\ndb.StringGet("mykey");\n\n/*\n * MGET key [key ...]\n * O(N)\n * Returns the values of all specified keys. For every key that does not hold a\n * string value or does not exist, the special value nil is returned.\n */\ndb.StringGet(new RedisKey[] { "mykey", "mykey2", "nonexistantkey" });\n\n/*\n * INCR key\n * O(1)\n * Increments the number stored at key by one. If the key does not exist, it is\n * set to 0 before performing the operation.\n */\ndb.KeyDelete("mykey");\ndb.StringIncrement("mykey");\ndb.StringGet("mykey");\n'))),(0,s.kt)(r.Z,{value:"JAVA",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * SET key value\n * O(1)\n * Set key to hold the string value. If key already holds a value, it is\n * overwritten, regardless of its type.\n */\njedis.set("mykey", "Hello");\njedis.set("mykey2", "World");\n\n/*\n * GET key\n * O(1)\n * Get the value of key. If the key does not exist the special value nil\n */\njedis.get("mykey");\n\n/*\n * MGET key [key ...]\n * O(N)\n * Returns the values of all specified keys. For every key that does not hold a\n * string value or does not exist, the special value nil is returned.\n */\njedis.mget("mykey", "mykey2", "nonexistantkey");\n\n/*\n * INCR key\n * O(1)\n * Increments the number stored at key by one. If the key does not exist, it is\n * set to 0 before performing the operation.\n */\njedis.del("mykey");\njedis.incr("mykey");\njedis.get("mykey");\n')))))}k.isMDXComponent=!0},67509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var l=n(87462),s=(n(67294),n(3905));const a={},r=void 0,o={unversionedId:"howtos/quick-start/cheat-sheets/triggers-and-functions",id:"howtos/quick-start/cheat-sheets/triggers-and-functions",title:"triggers-and-functions",description:"",source:"@site/docs/howtos/quick-start/cheat-sheets/triggers-and-functions.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/triggers-and-functions",permalink:"/howtos/quick-start/cheat-sheets/triggers-and-functions",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/triggers-and-functions.mdx",tags:[],version:"current",lastUpdatedAt:1694640549,formattedLastUpdatedAt:"Sep 13, 2023",frontMatter:{}},i={},u=[],d={toc:u};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}))}m.isMDXComponent=!0},40083:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/redis-insight-connect-ca60cd0282c3a317e5608da154f94867.png"}}]);