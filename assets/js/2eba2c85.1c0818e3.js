"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[4890,1144,9570],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var o=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,o,r=function(e,t){if(null==e)return{};var a,o,r={},n=Object.keys(e);for(o=0;o<n.length;o++)a=n[o],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)a=n[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(a),m=r,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||n;return a?o.createElement(h,i(i({ref:t},d),{},{components:a})):o.createElement(h,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<n;l++)i[l]=a[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}p.displayName="MDXCreateElement"},50358:(e,t,a)=>{a.d(t,{Z:()=>c});var o=a(67294),r=a(52263);const n="authorByline_VoxI",i="authorLabel_a70t",s="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:a}=(0,r.Z)(),c=a.customFields.authors;return o.createElement(o.Fragment,null,t.authors&&o.createElement("div",{className:"docAuthors"},o.createElement("hr",null),t.authors.map((e=>o.createElement("div",{key:e,className:n},o.createElement("img",{className:s,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),o.createElement("div",null,o.createElement("div",{className:i},"Author:"),o.createElement("div",null,o.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),o.createElement("hr",null)))}},29736:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var o=a(87462),r=(a(67294),a(3905)),n=a(50358),i=a(95995),s=a(30989);const c={id:"index-solutions-caching",title:"How to use Redis as a Query Caching",sidebar_label:"How to use Redis as a Query Caching",slug:"/howtos/solutions/caching",authors:["prasan","will"]},l=void 0,d={unversionedId:"howtos/solutions/caching/index-solutions-caching",id:"howtos/solutions/caching/index-solutions-caching",title:"How to use Redis as a Query Caching",description:"Source code for the application used in tutorial",source:"@site/docs/howtos/solutions/caching/index-caching.mdx",sourceDirName:"howtos/solutions/caching",slug:"/howtos/solutions/caching",permalink:"/howtos/solutions/caching",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/caching/index-caching.mdx",tags:[],version:"current",lastUpdatedAt:1678094580,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{id:"index-solutions-caching",title:"How to use Redis as a Query Caching",sidebar_label:"How to use Redis as a Query Caching",slug:"/howtos/solutions/caching",authors:["prasan","will"]}},u={},p=[{value:"Query caching",id:"query-caching",level:2},{value:"Why you should use Redis for Query Caching",id:"why-you-should-use-redis-for-query-caching",level:2},{value:"Ecommerce micro services architecture",id:"ecommerce-micro-services-architecture",level:2},{value:"Ecommerce product",id:"ecommerce-product",level:2},{value:"Sample Caching Application with Redis and MongoDB",id:"sample-caching-application-with-redis-and-mongodb",level:2},{value:"Get Products by Filter Request",id:"get-products-by-filter-request",level:3},{value:"Get Products by Filter Response",id:"get-products-by-filter-response",level:3},{value:"Get Products by Filter Response (subsequent times)",id:"get-products-by-filter-response-subsequent-times",level:3},{value:"Implementing Cache-aside with Redis and MongoDB",id:"implementing-cache-aside-with-redis-and-mongodb",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Resources",id:"additional-resources",level:3}],m={toc:p};function h(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(n.Z,{frontMatter:c,mdxType:"Authors"}),(0,r.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Source code for the application used in tutorial"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))),(0,r.kt)("h2",{id:"query-caching"},"Query caching"),(0,r.kt)("p",null,"Have you ever been in a situation where your database queries are slowing down, and you need to speed them up while keeping costs down? Imagine that you've built an e-commerce application that started small and is growing fast."),(0,r.kt)("p",null,"You're at the point where you have an extensive product catalog and millions of customers. Your queries to MongoDB are beginning to slow down, and you've already attempted to optimize them. Even though you were able to squeak out a little extra performance, it wasn't enough to satisfy your customers."),(0,r.kt)("h2",{id:"why-you-should-use-redis-for-query-caching"},"Why you should use Redis for Query Caching"),(0,r.kt)("p",null,"Redis is an in-memory datastore, making it perfect for caching. It allows you to reduce the load on your primary database while speeding up database reads.\nFor example, in an e-commerce application you might be able to guess what query is requested most often... If you guessed the query for searching products you would be correct!"),(0,r.kt)("p",null,"To improve product search in ecommerce app, we can implement one of following caching patterns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Lookup")," pattern : Entire products can be pre cached in redis and application can perform any product query on Redis similar to primary database"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cache aside")," pattern : Only searched/ frequent product queries need to be cached for faster results.")),(0,r.kt)("p",null,"This tutorial focuses on ",(0,r.kt)("strong",{parentName:"p"},"cache-aside")," pattern specifically :"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"cache-aside",src:a(91312).Z,width:"1163",height:"285"})),(0,r.kt)("p",null,"The goal of this design pattern is to set up ",(0,r.kt)("strong",{parentName:"p"},"optimal")," caching (load it as you go) for better read operations."),(0,r.kt)("p",null,"To see how the cache aside pattern functions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"An application requests data from the backend"),(0,r.kt)("li",{parentName:"ol"},"The backend checks to find out if the data is available in Redis",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If the data isn\u2019t available (a cache miss):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The MongoDB database fetches the data"),(0,r.kt)("li",{parentName:"ul"},"Redis stores a copy of the data"),(0,r.kt)("li",{parentName:"ul"},"The backend serves the data to the application"))),(0,r.kt)("li",{parentName:"ol"},"If the data is already available in Redis (a cache hit):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The backend serves the cached data directly to the application")))))),(0,r.kt)("p",null,"Consider using it when you need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Query data frequently")," - When you have a large volume of reads (as is the case in an e-commerce app), the cache-aside pattern will give you an immediate performance gain for subsequent data requests."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Fill the cache on-demand")," - The cache-aside pattern will fill the cache as data is requested rather pre caching,thus saving on space and cost. Useful when kind of data to be cached is unclear upfront."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Be cost conscious")," - Since cache size is directly related to the cost of cache in the cloud, the smaller the size, the less you pay.")),(0,r.kt)("h2",{id:"ecommerce-micro-services-architecture"},"Ecommerce micro services architecture"),(0,r.kt)(s.default,{mdxType:"MicroservicesArchitectureWithRedis"}),(0,r.kt)("h2",{id:"ecommerce-product"},"Ecommerce product"),(0,r.kt)(i.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,r.kt)("h2",{id:"sample-caching-application-with-redis-and-mongodb"},"Sample Caching Application with Redis and MongoDB"),(0,r.kt)("p",null,"In our sample application, the products service publishes an API for filtering products. Here is what a call to the API looks like:"),(0,r.kt)("h3",{id:"get-products-by-filter-request"},"Get Products by Filter Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// POST http://localhost:3000/products/getProductsByFilter\n{\n  "productDisplayName": "puma"\n}\n')),(0,r.kt)("h3",{id:"get-products-by-filter-response"},"Get Products by Filter Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "_id": 11000,\n      "data": {\n        "id": 11000,\n        "price": 3995,\n        "productDisplayName": "Puma Men Slick 3HD Yellow Black Watches",\n        "variantName": "Slick 3HD Yellow",\n        "brandName": "Puma",\n        "ageGroup": "Adults-Men",\n        "gender": "Men",\n        "displayCategories": "Accessories",\n        "styleImages": {\n          "default": {\n            "imageURL": "http://host.docker.internal:8080/images/11000.jpg"\n          }\n        },\n        "productDescriptors": {\n          "description": {\n            "value": "Stylish and comfortable, this motor sport inspired wrist watch from puma is designed with a plastic case and ..."\n          }\n        }\n      },\n      "productId": 11000\n    }\n    //...\n  ],\n  "error": null,\n  "isFromCache": false\n}\n')),(0,r.kt)("h3",{id:"get-products-by-filter-response-subsequent-times"},"Get Products by Filter Response (subsequent times)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    //...same data as above\n  ],\n  "error": null,\n  "isFromCache": true //now the data comes from cache rather DB\n}\n')),(0,r.kt)("h3",{id:"implementing-cache-aside-with-redis-and-mongodb"},"Implementing Cache-aside with Redis and MongoDB"),(0,r.kt)("p",null,"Below you will find the function used to search for products in MongoDB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"async function getProductsByFilter(productFilter: IProductFilter) {\n  const mongo = getMongodb();\n  const filter: Document = {\n    statusCode: {\n      $eq: DB_ROW_STATUS.ACTIVE,\n    },\n  };\n\n  if (productFilter && productFilter.productDisplayName) {\n    filter['data.productDisplayName'] = {\n      $regex: productFilter.productDisplayName,\n      $options: 'i',\n    };\n  }\n\n  const projection: IProduct = {\n    productId: 1,\n    data: {\n      id: 1,\n      price: 1,\n      productDisplayName: 1,\n      variantName: 1,\n      brandName: 1,\n      ageGroup: 1,\n      gender: 1,\n      displayCategories: 1,\n      styleImages: {\n        default: {\n          imageURL: 1,\n        },\n      },\n      productDescriptors: {\n        description: {\n          value: 1,\n        },\n      },\n    },\n  };\n\n  const limit = 100;\n  const sort = {};\n  const products = await mongo.find(\n    COLLECTIONS.PRODUCTS.collectionName,\n    filter,\n    projection,\n    limit,\n    sort,\n  );\n  return products;\n}\n")),(0,r.kt)("p",null,"If you're familiar with MongoDB, the code above should be pretty straightforward. We simply make a call to MongoDB to find products based on a filter on the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," property of the product. We also define a projection object to specify which properties to get out of MongoDB. You can setup multiple columns for better fuzzy searching, but for the purposes of this tutorial it is simplified."),(0,r.kt)("p",null,"Now, using MongoDB directly worked for awhile and eventually started to slow down. That's why Redis was brought in to speed things up. The cache-aside pattern was chosen in order to balance performance with cost. The basic decision tree for cache-aside is as follows."),(0,r.kt)("p",null,"When the frontend requests products:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Form a hash with the contents of the request (i.e. the search parameters)"),(0,r.kt)("li",{parentName:"ol"},"Check Redis to see if a value exists for the hash"),(0,r.kt)("li",{parentName:"ol"},"Is there a cache hit? If data is found for the hash it is returned; the process stops here."),(0,r.kt)("li",{parentName:"ol"},"Is there a cache miss? When data is not found, it is read out of MongoDB and subsequently stored in Redis prior to being returned.")),(0,r.kt)("p",null,"Below you will find the code used to implement the decision tree."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const getHashKey = (_filter: Document) => {\n  let retKey = '';\n  if (_filter) {\n    const text = JSON.stringify(_filter);\n    retKey = crypto.createHash('sha256').update(text).digest('hex');\n  }\n  return 'CACHE_ASIDE_' + retKey;\n};\n\nrouter.post(API.GET_PRODUCTS_BY_FILTER, async (req: Request, res: Response) => {\n  const body = req.body;\n  // using node-redis\n  const redis = getNodeRedisClient();\n\n  //get data from redis\n  const hashKey = getHashKey(req.body);\n  const cachedData = await redis.get(hashKey);\n  const docArr = cachedData ? JSON.parse(cachedData) : [];\n\n  if (docArr && docArr.length) {\n    result.data = docArr;\n    result.isFromCache = true;\n  } else {\n    //get data from mongodb\n    const dbData = await getProductsByFilter(body); //method shown earlier\n\n    if (body && body.productDisplayName && dbData.length) {\n      //set data to redis (async)\n      redis.set(hashKey, JSON.stringify(dbData), {\n        EX: 60, //cache expiry in seconds\n      });\n    }\n\n    result.data = dbData;\n  }\n\n  res.send(result);\n});\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You will need to decide what expiry or time to live (TTL) works best for your particular use-case.")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"That's all there is to it! You've now seen how to use Redis for caching with one of the pattern (cache-aside). It's possible to incrementally adopt Redis where ever needed with different strategies/ patterns. See below for some additional resources around microservices topic."),(0,r.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/howtos/solutions/cqrs"},"CQRS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/howtos/solutions/interservice-communication"},"Interservice communication")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/howtos/solutions/api-gateway-caching"},"API gateway caching"))))}h.isMDXComponent=!0},30989:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var o=a(87462),r=(a(67294),a(3905));const n={},i=void 0,s={unversionedId:"howtos/solutions/common-data/microservices-arch-with-redis",id:"howtos/solutions/common-data/microservices-arch-with-redis",title:"microservices-arch-with-redis",description:"Thinking about the e-commerce application, consider the following architecture:",source:"@site/docs/howtos/solutions/common-data/microservices-arch-with-redis.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-arch-with-redis",permalink:"/howtos/solutions/common-data/microservices-arch-with-redis",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-arch-with-redis.mdx",tags:[],version:"current",lastUpdatedAt:1678094580,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},l=[],d={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Thinking about the e-commerce application, consider the following architecture:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"products service")," - handles querying products from the database and returning them to the frontend"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"orders service")," - handles validating and creating orders"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"order history service")," - handles querying a customer's order history"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"payments service")," - handles processing orders for payment"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"api gateway")," - unifies your services under a single endpoint"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"mongodb")," - serves as the primary database, storing orders, order history, products, etc."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"redis")," - serves as the stream processor and caching database")),(0,r.kt)("p",null,"Here is what the architecture diagram looks like so far:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Microservices architecture with Redis",src:a(87251).Z,width:"2340",height:"1013"})),(0,r.kt)("p",null,"What's nice about this architecture is each service is setup so it can scale independently. What this also means is you can incrementally adopt Redis where needed."))}u.isMDXComponent=!0},95995:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var o=a(87462),r=(a(67294),a(3905));const n={},i=void 0,s={unversionedId:"howtos/solutions/common-data/microservices-ecommerce",id:"howtos/solutions/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"Consider below screenshots of sample e-commerce application",source:"@site/docs/howtos/solutions/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-ecommerce",permalink:"/howtos/solutions/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1678094580,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},l=[],d={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Consider below screenshots of sample e-commerce application"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Dashboard screen : To populate list of products with quick search functionality"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"dashboard ",src:a(98920).Z,width:"2475",height:"1873"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Shopping Cart view : To view added products in the cart\n",(0,r.kt)("img",{alt:"cart",src:a(53296).Z,width:"2772",height:"1942"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Order history view : On ",(0,r.kt)("inlineCode",{parentName:"p"},"Orders")," tab click in the top nav bar, you can see all the orders for the user"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"order history",src:a(28125).Z,width:"2511",height:"1351"})))),(0,r.kt)("p",null,"You can find the full source code for the app pictured above here. The frontend is build using ",(0,r.kt)("strong",{parentName:"p"},"Next.js"),", the backend is in ",(0,r.kt)("strong",{parentName:"p"},"Node.js"),", data is stored in ",(0,r.kt)("strong",{parentName:"p"},"MongoDB")," and ",(0,r.kt)("strong",{parentName:"p"},"Redis"),"."),(0,r.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Source code for the application"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}u.isMDXComponent=!0},91312:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/cache-aside-dddf54d02b1c3cf616eaed3bf07ae6f1.jpg"},53296:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/design-cart-2-53bcfc9de6293c66337d1a1d7a80dab5.png"},98920:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/design-dashboard-face10f3332e9a77b8b427dc4cfb18fd.png"},28125:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/design-order-history-15153e22828baa23b0269a711f3aac5b.png"},87251:(e,t,a)=>{a.d(t,{Z:()=>o});const o=a.p+"assets/images/redis-microservices-arch-6a6896038f20517635bdfc18d32cc3db.png"}}]);