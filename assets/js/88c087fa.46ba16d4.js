"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[9590],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return c}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=d(r),c=n,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||i;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var d=2;d<i;d++)s[d]=r[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},15049:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var a=r(87462),n=r(63366),i=(r(67294),r(3905)),s=["components"],o={id:"index-usingrust",title:"How to query Graph data in Redis using Rust",sidebar_label:"RedisGraph and Rust",slug:"/howtos/redisgraph/using-rust",authors:["ajeet"]},l=void 0,d={unversionedId:"howtos/redisgraph/using-rust/index-usingrust",id:"howtos/redisgraph/using-rust/index-usingrust",title:"How to query Graph data in Redis using Rust",description:"RedisGraph is the first queryable Property Graph database to use sparse matrices to represent the adjacency matrix",source:"@site/docs/howtos/redisgraph/using-rust/index-usingrust.mdx",sourceDirName:"howtos/redisgraph/using-rust",slug:"/howtos/redisgraph/using-rust",permalink:"/howtos/redisgraph/using-rust",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisgraph/using-rust/index-usingrust.mdx",tags:[],version:"current",lastUpdatedAt:1655488379,formattedLastUpdatedAt:"6/17/2022",frontMatter:{id:"index-usingrust",title:"How to query Graph data in Redis using Rust",sidebar_label:"RedisGraph and Rust",slug:"/howtos/redisgraph/using-rust",authors:["ajeet"]},sidebar:"docs",previous:{title:"RedisGraph and Go",permalink:"/howtos/redisgraph/using-go"},next:{title:"Building Movies database app using RedisGraph & NodeJS",permalink:"/howtos/redisgraph/redisgraphmovies"}},p={},u=[{value:"RedisGraph Rust Client",id:"redisgraph-rust-client",level:2},{value:"Step 1. Run RedisMod Docker container",id:"step-1-run-redismod-docker-container",level:3},{value:"Step 2. Verify if RedisGraph module is loaded",id:"step-2-verify-if-redisgraph-module-is-loaded",level:3},{value:"Step 3. Install Rust",id:"step-3-install-rust",level:3},{value:"Step 4. Clone the repository",id:"step-4-clone-the-repository",level:3},{value:"Step 5. Write a rust program",id:"step-5-write-a-rust-program",level:3},{value:"Step 6. Run the current local package",id:"step-6-run-the-current-local-package",level:3},{value:"Step 7. Monitor the Graph query",id:"step-7-monitor-the-graph-query",level:3},{value:"Step 8. Install RedisInsight",id:"step-8-install-redisinsight",level:3},{value:"Step 8. Accessing RedisInsight",id:"step-8-accessing-redisinsight",level:3},{value:"Step 9. Run the Graph Query",id:"step-9-run-the-graph-query",level:3},{value:"References",id:"references",level:3}],h={toc:u};function c(e){var t=e.components,o=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"RedisGraph is the first queryable Property Graph database to use sparse matrices to represent the adjacency matrix\nin graphs and linear algebra to query the graph. RedisGraph is based on a unique approach and architecture that translates Cypher queries to matrix operations executed over a GraphBLAS engine. This new design allows use cases like social graph operation, fraud detection, and real-time recommendation to be executed 10x \u2013 600x faster than any other graph database. Undoubtedly, it is the fastest graph database that processes complex graph operations in real time, 10x \u2013 600x faster than any other graph database. It primariy shows how your data is connected through multiple visualization integrations including RedisInsight, Linkurious, and Graphileon."),(0,i.kt)("p",null,"RedisGraph is a graph database developed from scratch on top of Redis, using the new Redis Modules API to extend Redis with new commands and capabilities. Its main features include: Simple, fast indexing and querying data stored in RAM using memory-efficient custom data structure. Redis Graph is a directed graph where both nodes and relationships are typed - nodes with labels and edges with types. Node/s and edges can and often do contain properties like columns in a SQL-db or keys in a document store.The newer RedisGraph 2.0 benchmark reveals a significant improvements on parallel workload (multiple clients) with a latency improvements up to 6x and throughput improvements up to 5x when performing graph traversals."),(0,i.kt)("p",null,"Below are the primary use cases of RedisGraph:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Recommendation: It allows you to rapidly find connections between your customers and the experiences they want by examining the relationships between them."),(0,i.kt)("li",{parentName:"ul"},"Graph-aided search: It allows you to search for single or multiple words or phrases and execute full-text and linguistic queries and implementation in real time over your graph structure."),(0,i.kt)("li",{parentName:"ul"},"Identity and access management: It allows you to define complex resources access permissions as a graph and enable rapid real-time verification of these permissions with a single query.")),(0,i.kt)("h2",{id:"redisgraph-rust-client"},"RedisGraph Rust Client"),(0,i.kt)("p",null,"The Rust programming language is blazingly fast and memory-efficient: with no runtime or garbage collector, it can power performance-critical services, run on embedded devices, and easily integrate with other languages. It is an open-source project developed originally at Mozilla Research. The Rust Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem."),(0,i.kt)("p",null,"redisgraph-rs is an idiomatic Rust client for RedisGraph, the graph database by Redis.This crate parses responses from RedisGraph and converts them into ordinary Rust values. It exposes a very flexible API that allows you to retrieve a single value, a single record or multiple records using only one function: Graph::query."),(0,i.kt)("p",null,"Follow the steps below to get started with RedisGraph with Rust:"),(0,i.kt)("h3",{id:"step-1-run-redismod-docker-container"},"Step 1. Run RedisMod Docker container"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," docker run -p 6379:6379 --name redislabs/redismod\n")),(0,i.kt)("h3",{id:"step-2-verify-if-redisgraph-module-is-loaded"},"Step 2. Verify if RedisGraph module is loaded"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," info modules\n # Modules\n module:name=graph,ver=20405,api=1,filters=0,usedby=[],using=[],options=[]\n")),(0,i.kt)("h3",{id:"step-3-install-rust"},"Step 3. Install Rust"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," brew install rust\n")),(0,i.kt)("h3",{id:"step-4-clone-the-repository"},"Step 4. Clone the repository"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  git clone https://github.com/malte-v/redisgraph-rs\n")),(0,i.kt)("h3",{id:"step-5-write-a-rust-program"},"Step 5. Write a rust program"),(0,i.kt)("p",null,'Copy the below content and save it as "main.rs" under src directory.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"}," use redis::Client;\n use redisgraph::{Graph, RedisGraphResult};\n\n fn main() -> RedisGraphResult<()> {\n   let client = Client::open(\"redis://127.0.0.1:6379\")?;\n   let mut connection = client.get_connection()?;\n\n   let mut graph = Graph::open(connection, \"MotoGP\".to_string())?;\n\n   // Create six nodes (three riders, three teams) and three relationships between them.\n   graph.mutate(\"CREATE (:Rider {name: 'Valentino Rossi', birth_year: 1979})-[:rides]->(:Team {name: 'Yamaha'}), \\\n       (:Rider {name:'Dani Pedrosa', birth_year: 1985, height: 1.58})-[:rides]->(:Team {name: 'Honda'}), \\\n       (:Rider {name:'Andrea Dovizioso', birth_year: 1986, height: 1.67})-[:rides]->(:Team {name: 'Ducati'})\")?;\n\n   // Get the names and birth years of all riders in team Yamaha.\n   let results: Vec<(String, u32)> = graph.query(\"MATCH (r:Rider)-[:rides]->(t:Team) WHERE t.name = 'Yamaha' RETURN r.name, r.birth_year\")?;\n   // Since we know just one rider in our graph rides for team Yamaha,\n   // we can also write this and only get the first record:\n   let (name, birth_year): (String, u32) = graph.query(\"MATCH (r:Rider)-[:rides]->(t:Team) WHERE t.name = 'Yamaha' RETURN r.name, r.birth_year\")?;\n   // Let's now get all the data about the riders we have.\n   // Be aware of that we only know the height of some riders, and therefore we use an `Option`:\n   let results: Vec<(String, u32, Option<f32>)> = graph.query(\"MATCH (r:Rider) RETURN r.name, r.birth_year, r.height\")?;\n\n   // That was just a demo; we don't need this graph anymore. Let's delete it from the database:\n   //graph.delete()?;\n\n   Ok(())\n\n")),(0,i.kt)("h3",{id:"step-6-run-the-current-local-package"},"Step 6. Run the current local package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," cargo run\n")),(0,i.kt)("h3",{id:"step-7-monitor-the-graph-query"},"Step 7. Monitor the Graph query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},' 1633515550.109594 [0 172.17.0.1:55114] "GRAPH.QUERY" "MotoGP" "CREATE (dummy:__DUMMY_LABEL__)" "--compact"\n 1633515550.111727 [0 172.17.0.1:55114] "GRAPH.QUERY" "MotoGP" "MATCH (dummy:__DUMMY_LABEL__) DELETE dummy" "--compact"\n 1633515550.114948 [0 172.17.0.1:55114] "GRAPH.QUERY" "MotoGP" "CREATE (:Rider {name: \'Valentino Rossi\', birth_year: 1979})-[:rides]->(:Team {name: \'Yamaha\'}), (:Rider {name:\'Dani Pedrosa\', birth_year: 1985, height: 1.58})-[:rides]->(:Team {name: \'Honda\'}), (:Rider {name:\'Andrea Dovizioso\', birth_year: 1986, height: 1.67})-[:rides]->(:Team {name: \'Ducati\'})" "--compact"\n 1633515550.118380 [0 172.17.0.1:55114] "GRAPH.QUERY" "MotoGP" "MATCH (r:Rider)-[:rides]->(t:Team) WHERE t.name = \'Yamaha\' RETURN r.name, r.birth_year" "--compact"\n 1633515550.120766 [0 172.17.0.1:55114] "GRAPH.QUERY" "MotoGP" "MATCH (r:Rider)-[:rides]->(t:Team) WHERE t.name = \'Yamaha\' RETURN r.name, r.birth_year" "--compact"\n 1633515550.122505 [0 172.17.0.1:55114] "GRAPH.QUERY" "MotoGP" "MATCH (r:Rider) RETURN r.name, r.birth_year, r.height" "--compact"\n 1633515550.124045 [0 172.17.0.1:55114] "GRAPH.DELETE" "MotoGP"\n\n')),(0,i.kt)("h3",{id:"step-8-install-redisinsight"},"Step 8. Install RedisInsight"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/explore/redisinsight/getting-started"},"Follow this link to install RedisInsight"),". For this demo, we will be using RedisInsight Docker container as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," docker run -d -v redisinsight:/db -p 8001:8001 redislabs/redisinsight:latest\n")),(0,i.kt)("h3",{id:"step-8-accessing-redisinsight"},"Step 8. Accessing RedisInsight"),(0,i.kt)("p",null,"Next, point your browser to http://localhost:8001."),(0,i.kt)("h3",{id:"step-9-run-the-graph-query"},"Step 9. Run the Graph Query"),(0,i.kt)("p",null,"You can use the limit clause to limit the number of records returned by a query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},' GRAPH.QUERY "MotoGP" "MATCH (r:Rider) RETURN r.name, r.birth_year, r.height"\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"My Image",src:r(25389).Z,width:"1346",height:"732"})),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/howtos/redisgraphmovies/"},"Building Movies database app using RedisGraph and NodeJS")),(0,i.kt)("li",{parentName:"ul"},"Learn more about RedisGraph in the ",(0,i.kt)("a",{parentName:"li",href:"https://oss.redis.com/redisgraph/"},"Quickstart")," tutorial."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/explore/redisinsight/redisgraph"},"Query, Visualize and Manipulate Graphs using RedisGraph Browser Tool"))),(0,i.kt)("h2",{id:""}),(0,i.kt)("div",null,(0,i.kt)("a",{href:"https://launchpad.redis.com",target:"_blank",rel:"noopener",className:"link"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<img\n  src="/img/launchpad.png"\n  className="thumb"\n  loading="lazy"\n  alt="Redis Launchpad"\n/>\n')))))}c.isMDXComponent=!0},25389:function(e,t,r){t.Z=r.p+"assets/images/redisgraph_redisinsight_rust-1b54626866541bbe89887af3a155584d.png"}}]);