"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[5851,1144,9570],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>h});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=l(o),h=a,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||s;return o?n.createElement(m,i(i({ref:t},d),{},{components:o})):n.createElement(m,i({ref:t},d))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=o.length,i=new Array(s);i[0]=p;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var l=2;l<s;l++)i[l]=o[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},50358:(e,t,o)=>{o.d(t,{Z:()=>c});var n=o(67294),a=o(52263);const s="authorByline_VoxI",i="authorLabel_a70t",r="authorProfileImage_URwT";const c=function(e){let{frontMatter:t}=e;const{siteConfig:o}=(0,a.Z)(),c=o.customFields.authors;return n.createElement(n.Fragment,null,t.authors&&n.createElement("div",{className:"docAuthors"},n.createElement("hr",null),t.authors.map((e=>n.createElement("div",{key:e,className:s},n.createElement("img",{className:r,src:`/img/${c[e].image?c[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${c[e].name}`}),n.createElement("div",null,n.createElement("div",{className:i},"Author:"),n.createElement("div",null,n.createElement("a",{href:c[e].link,target:"_blank"},c[e].name),", ",c[e].title))))),n.createElement("hr",null)))}},40374:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var n=o(87462),a=(o(67294),o(3905)),s=o(50358),i=o(95995),r=o(30989);const c={id:"index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",sidebar_label:"How to use Redis for API Gateway Caching",slug:"/howtos/solutions/api-gateway-caching",authors:["prasan","will"]},l=void 0,d={unversionedId:"howtos/solutions/api-gateway-caching/index-solutions-api-gateway-caching",id:"howtos/solutions/api-gateway-caching/index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",description:"Source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/api-gateway-caching/index-api-gateway-caching.mdx",sourceDirName:"howtos/solutions/api-gateway-caching",slug:"/howtos/solutions/api-gateway-caching",permalink:"/howtos/solutions/api-gateway-caching",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/api-gateway-caching/index-api-gateway-caching.mdx",tags:[],version:"current",lastUpdatedAt:1678094580,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{id:"index-solutions-api-gateway-caching",title:"How to use Redis for API Gateway Caching",sidebar_label:"How to use Redis for API Gateway Caching",slug:"/howtos/solutions/api-gateway-caching",authors:["prasan","will"]}},u={},p=[{value:"API Gateway Caching",id:"api-gateway-caching",level:2},{value:"Why you should use Redis for API Gateway Caching",id:"why-you-should-use-redis-for-api-gateway-caching",level:2},{value:"Ecommerce (event-driven) architecture",id:"ecommerce-event-driven-architecture",level:2},{value:"Ecommerce product",id:"ecommerce-product",level:2},{value:"Sample API Gateway Caching Application with Redis and MongoDB",id:"sample-api-gateway-caching-application-with-redis-and-mongodb",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Resources",id:"additional-resources",level:3}],h={toc:p};function m(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{frontMatter:c,mdxType:"Authors"}),(0,a.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Source code for the application used in this tutorial"),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))),(0,a.kt)("h2",{id:"api-gateway-caching"},"API Gateway Caching"),(0,a.kt)("p",null,"So you are building a microservices application, but you're struggling with how to handle authentication in a way that let's you reuse code and maximize performance. Typically for authentication you might you sessions, oauth, authorization tokens, etc. For the purposes of this tutorial, let's say we're using an authorization token. In a monolithic application authentication is pretty straightforward:\nWhen a request comes in..."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Decode the authorization header"),(0,a.kt)("li",{parentName:"ol"},"Validate the credentials"),(0,a.kt)("li",{parentName:"ol"},"Store the session information on the request for further use down the line")),(0,a.kt)("p",null,"However, you might be left puzzled by how to accomplish something similar with microservices. Typically in a microservices application you have an API gateway that serves as the single entrypoint for clients, and routes traffic to the appropriate services. Depending on the nature of the request, those services may or may not require a user to be authenticated. Because of this, you might think it is a good idea to handle authentication in each respective service. While this works, you end up with a fair amount of duplicated code. It's also more difficult to understand where slowdowns are happening and scale services appropriately because you repeat some of the same work in each service. A more effective way of handling authentication is to handle it at the API gateway layer, and then pass the session information down to each service."),(0,a.kt)("p",null,"Great, you've decided to handle authentication at the API gateway layer. Now you have to decide where to store sessions. Imagine you're building an e-commerce app that uses MongoDB as the primary data store. You could store sessions in MongoDB, but think about how many times you will be hitting MongoDB to retrieve session information. If you have millions of customers, you don't want to be going to MongoDB for every single request made to the API. This is where Redis comes in."),(0,a.kt)("h2",{id:"why-you-should-use-redis-for-api-gateway-caching"},"Why you should use Redis for API Gateway Caching"),(0,a.kt)("p",null,"Redis is an in-memory datastore, making it perfect for caching session data. It allows you to reduce the load on your primary database while speeding up database reads. The rest of this tutorial covers how to do this in the context of an e-commerce application."),(0,a.kt)("h2",{id:"ecommerce-event-driven-architecture"},"Ecommerce (event-driven) architecture"),(0,a.kt)(r.default,{mdxType:"MicroservicesArchitectureWithRedis"}),(0,a.kt)("h2",{id:"ecommerce-product"},"Ecommerce product"),(0,a.kt)(i.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,a.kt)("h2",{id:"sample-api-gateway-caching-application-with-redis-and-mongodb"},"Sample API Gateway Caching Application with Redis and MongoDB"),(0,a.kt)("p",null,"What's nice about microservice architecture is each service is setup so it can scale independently. Now, seeing as how each service might require authentication, you will likely want to obtain session information for almost every request. So it makes a lot of sense to use the API gateway to cache and retrieve session information, and subsequently pass the information on to each service. Let's see how you might accomplish this."),(0,a.kt)("p",null,"In our sample application, all requests are routed through the API gateway. We are using Express to setup our API gateway and we're using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Authorization")," header to pass the authorization token from the frontend to the API. For every request, the API gateway gets the authorization token and looks it up in Redis. Then it passes it along to the correct microservice. Below you will find the code to validate the session:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {\n  createProxyMiddleware,\n  responseInterceptor,\n} from 'http-proxy-middleware';\n\n//-----\nconst app: Express = express();\n\napp.use(cors());\napp.use(async (req, res, next) => {\n  const authorizationHeader = req.header('Authorization');\n  const sessionInfo = await getSessionInfo(authorizationHeader); //---- (1)\n\n  //add session info to request\n  if (sessionInfo?.sessionData && sessionInfo?.sessionId) {\n    req.session = sessionInfo?.sessionData;\n    req.sessionId = sessionInfo?.sessionId;\n  }\n  next();\n});\n\napp.use(\n  '/orders',\n  createProxyMiddleware({\n    // http://localhost:3000/orders/bar -> http://localhost:3001/orders/bar\n    target: 'http://localhost:3001',\n    changeOrigin: true,\n    selfHandleResponse: true,\n    onProxyReq(proxyReq, req, res) {\n      //pass session info to micro service\n      proxyReq.setHeader('x-session', req.session);\n    },\n    onProxyRes: applyAuthToResponse, //---- (2)\n  }),\n);\n\napp.use(\n  '/orderHistory',\n  createProxyMiddleware({\n    target: 'http://localhost:3002',\n    changeOrigin: true,\n    selfHandleResponse: true,\n    onProxyReq(proxyReq, req, res) {\n      //pass session info to micro service\n      proxyReq.setHeader('x-session', req.session);\n    },\n    onProxyRes: applyAuthToResponse, //---- (2)\n  }),\n);\n//-----\n\nconst getSessionInfo = async (authHeader?: string) => {\n  //(For demo purpose) dummy random userId and sessionId created for first time, then userId is fetched gainst that sessionId for future requests\n  let sessionId = '';\n  let sessionData: string | null = '';\n\n  if (!!authHeader) {\n    sessionId = authHeader.split(/\\s/)[1];\n  } else {\n    sessionId = 'SES_' + randomUUID(); //random new sessionId\n  }\n\n  const nodeRedisClient = getNodeRedisClient();\n  if (nodeRedisClient) {\n    const exists = await nodeRedisClient.exists(sessionId);\n    if (!exists) {\n      await nodeRedisClient.set(\n        sessionId,\n        JSON.stringify({ userId: 'USR_' + randomUUID() }),\n      ); //random new userId\n    }\n    sessionData = await nodeRedisClient.get(sessionId);\n  }\n\n  return {\n    sessionId: sessionId,\n    sessionData: sessionData,\n  };\n};\n\nconst applyAuthToResponse = responseInterceptor(\n  //adding sessionId in response so that front end can store it for future requests\n\n  async (responseBuffer, proxyRes, req, res) => {\n    // detect json responses\n    if (\n      !!proxyRes.headers['content-type'] &&\n      proxyRes.headers['content-type'].includes('application/json')\n    ) {\n      let data = JSON.parse(responseBuffer.toString('utf8'));\n\n      // manipulate JSON data here\n      if (!!(req as Request).sessionId) {\n        data = Object.assign({}, data, { auth: (req as Request).sessionId });\n      }\n\n      // return manipulated JSON\n      return JSON.stringify(data);\n    }\n\n    // return other content-types as-is\n    return responseBuffer;\n  },\n);\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The example above is not meant to be the defacto best practice for handling authentication. It is meant to illustrate what you might do with respect to Redis. You will likely have a different setup for authentication, but the concept of storing a session in Redis is similar.")),(0,a.kt)("p",null,"In the code above, we check for the authorization header, else we create a new one and store it in Redis. Then we retrieve the session from Redis. Further down the line we attach the session to an ",(0,a.kt)("inlineCode",{parentName:"p"},"x-session")," header prior to calling into the orders service. Now let's see how the orders service receives the session."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"router.post(API_NAMES.CREATE_ORDER, async (req: Request, res: Response) => {\n  const body = req.body;\n  const result: IApiResponseBody = {\n    data: null,\n    error: null,\n  };\n\n  const sessionData = req.header('x-session');\n  const userId = sessionData ? JSON.parse(sessionData).userId : \"\";\n  ...\n});\n")),(0,a.kt)("p",null,"The last line above shows how to pull the session out of the ",(0,a.kt)("inlineCode",{parentName:"p"},"x-session")," header and get the ",(0,a.kt)("inlineCode",{parentName:"p"},"userId"),"."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"That's all there is to it! You've now seen how to use Redis for API gateway caching. It is not too complicated to get started, but it will help you scale as you build out microservices. Check out additional resources below for learning more about Redis."),(0,a.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/howtos/solutions/cqrs"},"CQRS")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/howtos/solutions/interservice-communication"},"Interservice communication")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/howtos/solutions/caching"},"Query caching"))))}m.isMDXComponent=!0},30989:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var n=o(87462),a=(o(67294),o(3905));const s={},i=void 0,r={unversionedId:"howtos/solutions/common-data/microservices-arch-with-redis",id:"howtos/solutions/common-data/microservices-arch-with-redis",title:"microservices-arch-with-redis",description:"Thinking about the e-commerce application, consider the following architecture:",source:"@site/docs/howtos/solutions/common-data/microservices-arch-with-redis.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-arch-with-redis",permalink:"/howtos/solutions/common-data/microservices-arch-with-redis",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-arch-with-redis.mdx",tags:[],version:"current",lastUpdatedAt:1678094580,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},l=[],d={toc:l};function u(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Thinking about the e-commerce application, consider the following architecture:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"products service")," - handles querying products from the database and returning them to the frontend"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"orders service")," - handles validating and creating orders"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"order history service")," - handles querying a customer's order history"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"payments service")," - handles processing orders for payment"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"api gateway")," - unifies your services under a single endpoint"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"mongodb")," - serves as the primary database, storing orders, order history, products, etc."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"redis")," - serves as the stream processor and caching database")),(0,a.kt)("p",null,"Here is what the architecture diagram looks like so far:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Microservices architecture with Redis",src:o(87251).Z,width:"2340",height:"1013"})),(0,a.kt)("p",null,"What's nice about this architecture is each service is setup so it can scale independently. What this also means is you can incrementally adopt Redis where needed."))}u.isMDXComponent=!0},95995:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var n=o(87462),a=(o(67294),o(3905));const s={},i=void 0,r={unversionedId:"howtos/solutions/common-data/microservices-ecommerce",id:"howtos/solutions/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"Consider below screenshots of sample e-commerce application",source:"@site/docs/howtos/solutions/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/common-data",slug:"/howtos/solutions/common-data/microservices-ecommerce",permalink:"/howtos/solutions/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1678094580,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{}},c={},l=[],d={toc:l};function u(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Consider below screenshots of sample e-commerce application"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Dashboard screen : To populate list of products with quick search functionality"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{alt:"dashboard ",src:o(98920).Z,width:"2475",height:"1873"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Shopping Cart view : To view added products in the cart\n",(0,a.kt)("img",{alt:"cart",src:o(53296).Z,width:"2772",height:"1942"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Order history view : On ",(0,a.kt)("inlineCode",{parentName:"p"},"Orders")," tab click in the top nav bar, you can see all the orders for the user"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{alt:"order history",src:o(28125).Z,width:"2511",height:"1351"})))),(0,a.kt)("p",null,"You can find the full source code for the app pictured above here. The frontend is build using ",(0,a.kt)("strong",{parentName:"p"},"Next.js"),", the backend is in ",(0,a.kt)("strong",{parentName:"p"},"Node.js"),", data is stored in ",(0,a.kt)("strong",{parentName:"p"},"MongoDB")," and ",(0,a.kt)("strong",{parentName:"p"},"Redis"),"."),(0,a.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Source code for the application"),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}u.isMDXComponent=!0},53296:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/design-cart-2-53bcfc9de6293c66337d1a1d7a80dab5.png"},98920:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/design-dashboard-face10f3332e9a77b8b427dc4cfb18fd.png"},28125:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/design-order-history-15153e22828baa23b0269a711f3aac5b.png"},87251:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/redis-microservices-arch-6a6896038f20517635bdfc18d32cc3db.png"}}]);