"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[7826],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var l=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},s=Object.keys(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=l.createContext({}),i=function(e){var t=l.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=i(e.components);return l.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),d=i(n),k=r,p=d["".concat(u,".").concat(k)]||d[k]||c[k]||s;return n?l.createElement(p,o(o({ref:t},m),{},{components:n})):l.createElement(p,o({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var i=2;i<s;i++)o[i]=n[i];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var l=n(67294),r=n(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return l.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>k});var l=n(87462),r=n(67294),s=n(86010),o=n(72389),a=n(67392),u=n(7094),i=n(12466);const m="tabList__CuJ",c="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:k,groupId:p,className:y}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=k??f.map((e=>{let{props:{value:t,label:n,attributes:l}}=e;return{value:t,label:n,attributes:l}})),h=(0,a.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const S=null===d?d:d??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==S&&!b.some((e=>e.value===S)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${S}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:g}=(0,u.U)(),[E,O]=(0,r.useState)(S),R=[],{blockElementScrollPositionUntilNextRender:D}=(0,i.o5)();if(null!=p){const e=v[p];null!=e&&e!==E&&b.some((t=>t.value===e))&&O(e)}const T=e=>{const t=e.currentTarget,n=R.indexOf(t),l=b[n].value;l!==E&&(D(t),O(l),null!=p&&g(p,String(l)))},w=e=>{var t;let n=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const t=R.indexOf(e.currentTarget)+1;n=R[t]??R[0];break}case"ArrowLeft":{const t=R.indexOf(e.currentTarget)-1;n=R[t]??R[R.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},y)},b.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,l.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:e=>R.push(e),onKeyDown:w,onClick:T},o,{className:(0,s.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":E===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==E})))))}function k(e){const t=(0,o.Z)();return r.createElement(d,(0,l.Z)({key:String(t)},e))}},93880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>k,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var l=n(87462),r=(n(67294),n(3905)),s=n(65488),o=n(85162);const a={},u=void 0,i={unversionedId:"howtos/quick-start/cheat-sheets/sets",id:"howtos/quick-start/cheat-sheets/sets",title:"sets",description:"<Tabs",source:"@site/docs/howtos/quick-start/cheat-sheets/sets.mdx",sourceDirName:"howtos/quick-start/cheat-sheets",slug:"/howtos/quick-start/cheat-sheets/sets",permalink:"/howtos/quick-start/cheat-sheets/sets",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/quick-start/cheat-sheets/sets.mdx",tags:[],version:"current",lastUpdatedAt:1694812977,formattedLastUpdatedAt:"Sep 15, 2023",frontMatter:{}},m={},c=[],d={toc:c};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{defaultValue:"CLI",groupId:"REDIS_CHEAT_SHEET",values:[{label:"CLI",value:"CLI"},{label:"NodeRedis",value:"NODE_JS"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"CLI",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("strong",null,"Command")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Syntax")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Example")),(0,r.kt)("td",null,(0,r.kt)("strong",null,"Output"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SADD"),(0,r.kt)("td",null,"SADD key member [member ...]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nSADD mySet "Hello"\n'))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Adds the specified members to the set stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SMEMBERS"),(0,r.kt)("td",null,"SMEMBERS key"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nSMEMBERS mySet\n"))),(0,r.kt)("td",null,'1) "Hello"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns all the members of the set value stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SCARD"),(0,r.kt)("td",null,"SCARD key"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nSCARD mySet\n"))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns the set cardinality (number of elements) of the set stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SISMEMBER"),(0,r.kt)("td",null,"SISMEMBER key member"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nSISMEMBER mySet "Hello"\n'))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns if member is a member of the set stored at key.",(0,r.kt)("em",null,"Time Complexity:")," O(1)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SDIFF"),(0,r.kt)("td",null,"SDIFF key1 [key2]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nSDIFF mySet myOtherSet\n"))),(0,r.kt)("td",null,'1) "Hello"')),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Returns the members of the set resulting from the difference between the first set and all the successive sets.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SDIFFSTORE"),(0,r.kt)("td",null,"SDIFFSTORE destination key1 [key2]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,"\nSDIFFSTORE myNewSet mySet myOtherSet\n"))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.",(0,r.kt)("em",null,"Time Complexity:")," O(N)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"SREM"),(0,r.kt)("td",null,"SREM key member [member ...]"),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",null,'\nSREM mySet "Hello"\n'))),(0,r.kt)("td",null,"(integer) 1")),(0,r.kt)("tr",null,(0,r.kt)("td",{colspan:"4"},(0,r.kt)("em",null,"Description:")," Removes the specified members from the set stored at key."))))),(0,r.kt)(o.Z,{value:"NODE_JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/*\n    SADD key member [member ...]\n    Adds the specified members to the set stored at key.\n    Time Complexity: O(N)\n    */\nconst sAddResult = await client.sAdd('mySet', 'Hello');\nconsole.log(sAddResult); // 1\n\n/*\n    SMEMBERS key\n    Returns all the members of the set value stored at key.\n    Time Complexity: O(N)\n    */\nconst sMembersResult = await client.sMembers('mySet');\nconsole.log(sMembersResult); // [\"Hello\"]\n\n/*\n    SCARD key\n    Returns the set cardinality (number of elements) of the set stored at key.\n    Time Complexity: O(1)\n    */\nconst sCardResult = await client.sCard('mySet');\nconsole.log(sCardResult); // 1\n\n/*\n    SISMEMBER key member\n    Returns if member is a member of the set stored at key.\n    Time Complexity: O(1)\n    */\nconst sIsMemberResult = await client.sIsMember('mySet', 'Hello');\nconsole.log(sIsMemberResult); // true\n\n/*\n    SDIFF key1 [key2]\n    Returns the members of the set resulting from the difference between the first set and all the successive sets.\n    Time Complexity: O(N)\n    */\nconst sDiffResult = await client.sDiff(['mySet', 'myOtherSet']);\nconsole.log(sDiffResult); // [\"Hello\"]\n\n/*\n    SDIFFSTORE destination key1 [key2]\n    This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.\n    Time Complexity: O(N)\n    */\nconst sDiffStoreResult = await client.sDiffStore('myNewSet', [\n  'mySet',\n  'myOtherSet',\n]);\nconsole.log(sDiffStoreResult); // 1\n\n/*\n    SREM key member [member ...]\n    Removes the specified members from the set stored at key.\n    */\nconst sRemResult = await client.sRem('mySet', 'Hello');\nconsole.log(sRemResult); // 1\n")))))}k.isMDXComponent=!0}}]);