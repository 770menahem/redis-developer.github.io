"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[1617],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=o,g=p["".concat(d,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},19950:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={id:"geo-filters",title:"Geo Filters",sidebar_label:"Geo Filters",slug:"/develop/dotnet/redis-om-dotnet/searching/geo-filters",authors:["steve"]},d=void 0,l={unversionedId:"develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filters",id:"develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filters",title:"Geo Filters",description:"A really nifty bit of indexing you can do with Redis OM is geo-indexing. To GeoIndex, all you need to do is to mark a GeoLoc field in your model as Indexed and create the index",source:"@site/docs/develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filter.md",sourceDirName:"develop/dotnet/redis-om-dotnet/searching/geo-filters",slug:"/develop/dotnet/redis-om-dotnet/searching/geo-filters",permalink:"/develop/dotnet/redis-om-dotnet/searching/geo-filters",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/dotnet/redis-om-dotnet/searching/geo-filters/geo-filter.md",tags:[],version:"current",lastUpdatedAt:1655485542,formattedLastUpdatedAt:"6/17/2022",frontMatter:{id:"geo-filters",title:"Geo Filters",sidebar_label:"Geo Filters",slug:"/develop/dotnet/redis-om-dotnet/searching/geo-filters",authors:["steve"]},sidebar:"docs",previous:{title:"Numeric Queries",permalink:"/develop/dotnet/redis-om-dotnet/searching/numeric-queries"},next:{title:"Aggregations Intro",permalink:"/develop/dotnet/redis-om-dotnet/aggregations"}},c={},u=[{value:"Querying Based off Location",id:"querying-based-off-location",level:2}],p={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A really nifty bit of indexing you can do with Redis OM is geo-indexing. To GeoIndex, all you need to do is to mark a ",(0,a.kt)("inlineCode",{parentName:"p"},"GeoLoc")," field in your model as ",(0,a.kt)("inlineCode",{parentName:"p"},"Indexed")," and create the index"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"[Document]\npublic class Restaurant\n{\n    [Indexed]\n    public string Name { get; set; }\n\n    [Indexed]\n    public GeoLoc Location{get; set;}\n\n    [Indexed(Aggregatable = true)]\n    public double CostPerPerson{get;set;}\n}\n")),(0,a.kt)("p",null,"So let's create the index and seed some data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// connect\nvar provider = new RedisConnectionProvider("redis://localhost:6379");\n\n// get connection\nvar connection = provider.Connection;\n\n// get collection\nvar restaurants = provider.RedisCollection<Restaurant>();\n\n// Create index\nawait connection.CreateIndexAsync(typeof(Restaurant));\n\n// seed with dummy data\n var r1 = new Restaurant {Name = "Tony\'s Pizza & Pasta", CostPerPerson = 12.00, Location = new (-122.076751,37.369929)};\nvar r2 = new Restaurant {Name = "Nizi Sushi", CostPerPerson = 16.00, Location = new (-122.057360,37.371207)};\nvar r3 = new Restaurant {Name = "Thai Thai", CostPerPerson = 11.50, Location = new (-122.04382,37.38)};\nvar r4 = new Restaurant {Name = "Chipotles", CostPerPerson = 8.50, Location = new (-122.0524,37.359719 )};\nrestaurants.Insert(r1);\nrestaurants.Insert(r2);\nrestaurants.Insert(r3);\nrestaurants.Insert(r4);\n')),(0,a.kt)("h2",{id:"querying-based-off-location"},"Querying Based off Location"),(0,a.kt)("p",null,"With our data seeded, we can now run geo-filters on our restaurants data, let's say we had an office (e.g. Redis's offices in Mountain View at ",(0,a.kt)("inlineCode",{parentName:"p"},"-122.064224,37.377266"),") and we wanted to find nearby restaurants, we could do so by using a ",(0,a.kt)("inlineCode",{parentName:"p"},"GeoFilter")," query restaurants within a certain radius, say 1 mile we can:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var nearbyRestaurants = restaurants.GeoFilter(x => x.Location, -122.064224, 37.377266, 5, GeoLocDistanceUnit.Miles);\nforeach (var restaurant in nearbyRestaurants)\n{\n    Console.WriteLine($"{restaurant.Name} is within 1 mile of work");\n}\n')))}f.isMDXComponent=!0}}]);