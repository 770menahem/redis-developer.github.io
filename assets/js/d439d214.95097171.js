"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[7846],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),m=a,h=c["".concat(d,".").concat(m)]||c[m]||p[m]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},47239:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={id:"index-jsonind-document",title:"Indexing JSON document using RediSearch",sidebar_label:"Indexing JSON document using RediSearch",slug:"/howtos/redisjson/jsonind-document",authors:["ajeet"]},d=void 0,l={unversionedId:"howtos/redisjson/jsonind-document/index-jsonind-document",id:"howtos/redisjson/jsonind-document/index-jsonind-document",title:"Indexing JSON document using RediSearch",description:"RedisJSON 2.0 Private Preview was announced for the first time during RedisConf 2021. With this newer version, RedisJSON will fully support JSONPath expressions and Active-Active geo-distribution. The Active-Active implementation is based on Conflict-free Replicated Data-Types (CRDT).",source:"@site/docs/howtos/redisjson/jsonind-document/index-jsonind-document.mdx",sourceDirName:"howtos/redisjson/jsonind-document",slug:"/howtos/redisjson/jsonind-document",permalink:"/howtos/redisjson/jsonind-document",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/redisjson/jsonind-document/index-jsonind-document.mdx",tags:[],version:"current",lastUpdatedAt:1655485542,formattedLastUpdatedAt:"6/17/2022",frontMatter:{id:"index-jsonind-document",title:"Indexing JSON document using RediSearch",sidebar_label:"Indexing JSON document using RediSearch",slug:"/howtos/redisjson/jsonind-document",authors:["ajeet"]},sidebar:"docs",previous:{title:"Storing and retrieving Nested JSON document",permalink:"/howtos/redisjson/storing-complex-json-document"},next:{title:"RedisJSON CheatSheet",permalink:"/howtos/redisjson/redisjson-cheatsheet"}},u={},p=[{value:"Prerequisite:",id:"prerequisite",level:3},{value:"Step 1. Run the &quot;preview&quot; tagged Redismod container",id:"step-1-run-the-preview-tagged-redismod-container",level:3},{value:"Step 2. Create an Index",id:"step-2-create-an-index",level:3},{value:"Step 3. Populate the database with JSON document",id:"step-3-populate-the-database-with-json-document",level:3},{value:"Step 4. Indexing the database with JSON document",id:"step-4-indexing-the-database-with-json-document",level:3},{value:"Step 5. Projecting using JSON Path expressions",id:"step-5-projecting-using-json-path-expressions",level:3},{value:"References",id:"references",level:3}],c={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"RedisJSON 2.0 Private Preview was announced for the first time during RedisConf 2021. With this newer version, RedisJSON will fully support JSONPath expressions and ",(0,i.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/technology/active-active-geo-distribution/"},"Active-Active geo-distribution"),". The Active-Active implementation is based on ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type"},"Conflict-free Replicated Data-Types (CRDT)"),"."),(0,i.kt)("p",null,"Prior to v2.2, RediSearch only supported Redis hashes. Going forward, RediSearch will support RedisJSON documents. This opens a powerful new set of document-based indexing use cases. In addition, RediSearch now provides query profiling. This will empower developers to understand and optimize their RediSearch queries, increasing their developer experience."),(0,i.kt)("p",null,"RediSearch has been providing indexing and search capabilities on hashes. Under the hood, RedisJSON 2.0 exposes an internal public API. Internal, because this API is exposed to other modules running inside a Redis node. Public, because any module can consume this API. So does RediSearch 2.2 ! In addition to indexing Redis hashes, RediSearch also indexes JSON. To index JSON, you must use the RedisJSON module."),(0,i.kt)("p",null,"By exposing its capabilities to other modules, RedisJSON gives RediSearch the ability to index JSON documents so users can now find documents by indexing and querying the content. These combined modules give you a powerful, low latency, JSON-oriented document database!"),(0,i.kt)("h3",{id:"prerequisite"},"Prerequisite:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Redis 6.x or later"),(0,i.kt)("li",{parentName:"ul"},"RediSearch 2.2 or later"),(0,i.kt)("li",{parentName:"ul"},"RediJSON 2.0 or later")),(0,i.kt)("h3",{id:"step-1-run-the-preview-tagged-redismod-container"},'Step 1. Run the "preview" tagged Redismod container'),(0,i.kt)("p",null,"Please note that this publicly available Docker Image is a community preview and doesn't support Active-Active.This Docker image contains Redis together with the main Redis modules, including RediSearch and RedisJSON. You'll need the preview tag of the image, which you can access as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," docker run -p 6379:6379 redislabs/redismod:preview\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," info modules\n # Modules\n module:name=rg,ver=10006,api=1,filters=0,usedby=[],using=[ai],options=[]\n module:name=graph,ver=20406,api=1,filters=0,usedby=[],using=[],options=[]\n module:name=timeseries,ver=10410,api=1,filters=0,usedby=[],using=[],options=[]\n module:name=bf,ver=20205,api=1,filters=0,usedby=[],using=[],options=[]\n module:name=ai,ver=10003,api=1,filters=0,usedby=[rg],using=[],options=[]\n module:name=ReJSON,ver=20000,api=1,filters=0,usedby=[search],using=[],options=[]\n module:name=search,ver=20200,api=1,filters=0,usedby=[],using=[ReJSON],options=[]\n")),(0,i.kt)("h3",{id:"step-2-create-an-index"},"Step 2. Create an Index"),(0,i.kt)("p",null,"Let's start by creating an index."),(0,i.kt)("p",null,"We can now specify ON JSON to inform RediSearch that we want to index JSON documents.\nThen, on the SCHEMA part, you can provide JSONPath expressions. The result of each JSON Path expression is indexed and associated with a logical name ( attribute ). This attribute (previously called field ) is used in the query part."),(0,i.kt)("p",null,"This is the basic syntax for indexing a JSON document:"),(0,i.kt)("b",null,"Syntax"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," FT.CREATE {index_name} ON JSON SCHEMA {json_path} AS {attribute} {type}\n")),(0,i.kt)("b",null,"Command"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," FT.CREATE userIdx ON JSON SCHEMA $.user.name AS name TEXT $.user.email AS email  TAG\n")),(0,i.kt)("h3",{id:"step-3-populate-the-database-with-json-document"},"Step 3. Populate the database with JSON document"),(0,i.kt)("p",null,"We should first populate the database with a JSON document using the JSON.SET command. In our example we are going to use the following JSON document:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "user": {\n    "name": "Paul John",\n    "email": "paul.john@example.com",\n    "age": "42",\n    "country": "London"\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'JSON.SET myuser $ \'{ "user":{"name": "Paul John", "email": "paul.john@example.com", "age": "4", "country": "London" }}\'\n\n')),(0,i.kt)("p",null,"Because indexing is synchronous, the document will be visible on the index as soon as the JSON.SET command returns. Any subsequent query matching the indexed content will return the document"),(0,i.kt)("h3",{id:"step-4-indexing-the-database-with-json-document"},"Step 4. Indexing the database with JSON document"),(0,i.kt)("p",null,"This new version includes a comprehensive support of JSONPath. It is now possible to use all the expressiveness of JSONPath expressions."),(0,i.kt)("p",null,"To create a new index, we use the FT.CREATE command. The schema of the index now accepts JSONPath expressions. The result of the expression is indexed and associated with an attribute (here: title)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"FT.CREATE myIdx ON JSON SCHEMA $.title AS title TEXT\n")),(0,i.kt)("p",null,"We can now do a search query and find our JSON document using FT.SEARCH:"),(0,i.kt)("b",null,"Command"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," FT.SEARCH userIdx '@name:(John)'\n")),(0,i.kt)("b",null,"Result"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},' 1) (integer) 1\n 2) "myuser"\n 3) 1) "$"\n    2) "{\\"user\\":{\\"name\\":\\"Paul John\\",\\"email\\":\\"paul.john@example.com\\",\\"age\\":\\"4\\",\\"country\\":\\"London\\"}}"\n')),(0,i.kt)("p",null,"We just saw that, by default, FT.SEARCH returns the whole document. We can also return only specific attribute (here name)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  FT.SEARCH userIdx '@name:(John)' RETURN 1 name\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  1) (integer) 1\n  2) "myuser"\n  3) 1) "name"\n    2) "Paul John"\n')),(0,i.kt)("h3",{id:"step-5-projecting-using-json-path-expressions"},"Step 5. Projecting using JSON Path expressions"),(0,i.kt)("p",null,"The RETURN parameter also accepts a JSON Path expression which let us extract any part of the JSON document.\nIn this example, we return the result of the JSON Path expression $.user.hp ."),(0,i.kt)("b",null,"Command"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," FT.SEARCH userIdx '@name:(John)' RETURN 1 $.user.email\n")),(0,i.kt)("b",null,"Result"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},' 1) (integer) 1\n 2) "myuser"\n 3) 1) "$.user.email"\n    2) "paul.john@example.com"\n')),(0,i.kt)("p",null,"Please Note: It is not possible to index JSON object and JSON arrays.\nTo be indexed, a JSONPath expression must return a single scalar value (string or number). If the JSONPath expression returns an object or an array, it will be ignored."),(0,i.kt)("p",null,"Given the following document:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' {\n\n    "name": "Paul John",\n    \u201caddress": [\n        "Orbital Park",\n        " Hounslow"\n  ],\n  "pincode": "TW4 6JS"\n }\n')),(0,i.kt)("p",null,"If we want to index the array under the address key, we have to create two fields:"),(0,i.kt)("b",null,"Command"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," FT.CREATE orgIdx ON JSON SCHEMA $.address[0] AS a1 TEXT $.address[1] AS a2 TEXT\n")),(0,i.kt)("p",null,"It's time to index the document:"),(0,i.kt)("b",null,"Command"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' JSON.SET org:1 $ \'{ "name": "Home Address", "address": [ "Orbital Park","Hounslow" ], "pincode": "TW4 6JS" }\'\n')),(0,i.kt)("p",null,"We can now search in the address:"),(0,i.kt)("b",null,"Command"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' FT.SEARCH orgIdx "Orbital Park"\n')),(0,i.kt)("b",null,"Result"),":",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},' FT.SEARCH orgIdx "Orbital Park"\n 1) (integer) 1\n 2) "org:1"\n 3) 1) "$"\n   2) "{\\"name\\":\\"Home Address\\",\\"address\\":[\\"Orbital Park\\",\\"Hounslow\\"],\\"pincode\\":\\"TW4 6JS\\"}"\n')),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://university.redis.com/courses/ru204/"},"RU204: Storing, Querying and Indexing JSON at Speed")," - a course at Redis University"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://oss.redis.com/redisearch/master/Indexing_JSON/"},"Indexing JSON Documents")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://redis.com/blog/index-and-query-json-docs-with-redis/"},"Indexing, Querying, and Full-Text Search of JSON Documents with Redis"))))}m.isMDXComponent=!0}}]);