"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[9993],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,y=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(y,s(s({ref:t},p),{},{components:r})):n.createElement(y,s({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},99453:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const a={},s=void 0,i={unversionedId:"howtos/solutions/real-time-inventory/available-to-promise/api/retrieve-many-skus",id:"howtos/solutions/real-time-inventory/available-to-promise/api/retrieve-many-skus",title:"retrieve-many-skus",description:"The code that follows shows an example API request and response for retrieveManySKUs activity.",source:"@site/docs/howtos/solutions/real-time-inventory/available-to-promise/api/retrieve-many-skus.mdx",sourceDirName:"howtos/solutions/real-time-inventory/available-to-promise/api",slug:"/howtos/solutions/real-time-inventory/available-to-promise/api/retrieve-many-skus",permalink:"/howtos/solutions/real-time-inventory/available-to-promise/api/retrieve-many-skus",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/real-time-inventory/available-to-promise/api/retrieve-many-skus.mdx",tags:[],version:"current",lastUpdatedAt:1684462271,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{}},l={},u=[],p={toc:u};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The code that follows shows an example API request and response for retrieveManySKUs activity."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"retrieveManySKUs API Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'POST http://localhost:3000/api/retrieveManySKUs\n[{\n    "sku":1019688\n},{\n    "sku":1003622\n},{\n    "sku":1006702\n}]\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"retrieveManySKUs API Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "sku": 1019688,\n      "name": "5-Year Protection Plan - Geek Squad",\n      "type": "BlackTie",\n      "totalQuantity": 24\n    },\n    {\n      "sku": 1003622,\n      "name": "Aquarius - Fender Stratocaster 1,000-Piece Jigsaw Puzzle - Black/Red/White/Yellow/Green/Orange/Blue",\n      "type": "HardGood",\n      "totalQuantity": 10\n    },\n    {\n      "sku": 1006702,\n      "name": "Clash of the Titans [DVD] [2010]",\n      "type": "Movie",\n      "totalQuantity": 10\n    }\n  ],\n  "error": null\n}\n')),(0,o.kt)("p",null,"When you make a request, it goes through the API gateway to the inventory service. Ultimately, it ends up calling a ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieveManySKUs")," function which looks as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/inventory-service.ts"',title:'"src/inventory-service.ts"'},'static async retrieveManySKUs(_productWithIds: IProductBodyFilter[]): Promise<IProduct[]> {\n        /**\n        Get current Quantity of specific Products.\n\n        :param _productWithIds: Product list with Id\n        :return: Product list\n        */\n        const repository = ProductRepo.getRepository();\n        let retItems: IProduct[] = [];\n\n        if (repository && _productWithIds && _productWithIds.length) {\n\n            //string id array\n            const idArr = _productWithIds.map((product) => {\n                return product.sku?.toString() || ""\n            });\n\n           //fetch products by IDs (using redis om library)\n            const result = await repository.fetch(...idArr);\n\n            let productsArr: IProduct[] = [];\n\n            if (idArr.length == 1) {\n                productsArr = [<IProduct>result];\n            }\n            else {\n                productsArr = <IProduct[]>result;\n            }\n\n            if (productsArr && productsArr.length) {\n\n                retItems = productsArr.map((product) => {\n                    return {\n                        sku: product.sku,\n                        name: product.name,\n                        type: product.type,\n                        totalQuantity: product.totalQuantity\n                    }\n                });\n            }\n            else {\n                throw `No products found !`;\n            }\n        }\n        else {\n            throw `Input params failed !`;\n        }\n\n        return retItems;\n    }\n')))}c.isMDXComponent=!0}}]);