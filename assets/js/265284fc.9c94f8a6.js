"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[3901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),u=r,b=p["".concat(c,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(b,s(s({ref:t},d),{},{components:n})):a.createElement(b,s({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},80880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={},s=void 0,i={unversionedId:"howtos/solutions/mobile-banking/common-mb/data-seeding",id:"howtos/solutions/mobile-banking/common-mb/data-seeding",title:"data-seeding",description:"This application leverages Redis core data structures, JSON, TimeSeries, Search and Query features. The data seeded is later used to show a searchable transaction overview with realtime updates as well as a personal finance management overview with realtime balance and biggest spenders updates.",source:"@site/docs/howtos/solutions/mobile-banking/common-mb/data-seeding.mdx",sourceDirName:"howtos/solutions/mobile-banking/common-mb",slug:"/howtos/solutions/mobile-banking/common-mb/data-seeding",permalink:"/howtos/solutions/mobile-banking/common-mb/data-seeding",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/mobile-banking/common-mb/data-seeding.mdx",tags:[],version:"current",lastUpdatedAt:1698353241,formattedLastUpdatedAt:"Oct 26, 2023",frontMatter:{}},c={},l=[],d={toc:l};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This application leverages ",(0,r.kt)("strong",{parentName:"p"},"Redis core data structures, JSON, TimeSeries, Search and Query features"),". The data seeded is later used to show a searchable transaction overview with realtime updates as well as a personal finance management overview with realtime balance and biggest spenders updates."),(0,r.kt)("p",null,"On application startup in ",(0,r.kt)("inlineCode",{parentName:"p"},"app/server.js"),", a cron is scheduled to create random bank transactions at regular intervals and seed those transactions in to Redis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app/server.js"',title:'"app/server.js"'},"//cron job to trigger createBankTransaction() at regular intervals\n\ncron.schedule('*/10 * * * * *', async () => {\n  const userName = process.env.REDIS_USERNAME;\n\n  createBankTransaction(userName);\n\n  //...\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The transaction generator creates a randomized banking debit or credit which will reflect on a (default) starting user balance of $100,000.00"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"transaction data")," is saved as a JSON document within Redis."),(0,r.kt)("li",{parentName:"ul"},"To capture ",(0,r.kt)("strong",{parentName:"li"},"balance over time"),", the ",(0,r.kt)("inlineCode",{parentName:"li"},"balanceAfter")," value is recorded in a TimeSeries with the key ",(0,r.kt)("inlineCode",{parentName:"li"},"balance_ts")," for every transaction."),(0,r.kt)("li",{parentName:"ul"},"To track ",(0,r.kt)("strong",{parentName:"li"},"biggest spenders"),", an associated ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"fromAccountName"))," member within the sorted set ",(0,r.kt)("inlineCode",{parentName:"li"},"bigspenders")," is incremented by the transaction amount. Note that this amount can be positive or negative.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app/transactions/transactionsGenerator.js"',title:'"app/transactions/transactionsGenerator.js"'},"let balance = 100000.0;\nconst BALANCE_TS = 'balance_ts';\nconst SORTED_SET_KEY = 'bigspenders';\n\nexport const createBankTransaction = async () => {\n  //to create random bank transaction\n  let vendorsList = source.source; //app/transactions/transaction_sources.js\n  const random = Math.floor(Math.random() * 9999999999);\n\n  const vendor = vendorsList[random % vendorsList.length]; //random vendor from the list\n\n  const amount = createTransactionAmount(vendor.fromAccountName, random);\n  const transaction = {\n    id: random * random,\n    fromAccount: Math.floor((random / 2) * 3).toString(),\n    fromAccountName: vendor.fromAccountName,\n    toAccount: '1580783161',\n    toAccountName: 'bob',\n    amount: amount,\n    description: vendor.description,\n    transactionDate: new Date(),\n    transactionType: vendor.type,\n    balanceAfter: balance,\n  };\n\n  //redis json feature\n  const bankTransaction = await bankTransactionRepository.save(transaction);\n  console.log('Created bankTransaction!');\n  // ...\n};\n\nconst createTransactionAmount = (vendor, random) => {\n  let amount = createAmount(); //random amount\n  balance += amount;\n  balance = parseFloat(balance.toFixed(2));\n\n  //redis time series feature\n  redis.ts.add(BALANCE_TS, '*', balance, { DUPLICATE_POLICY: 'first' });\n  //redis sorted set as secondary index\n  redis.zIncrBy(SORTED_SET_KEY, amount * -1, vendor);\n\n  return amount;\n};\n")),(0,r.kt)("p",null,"Sample ",(0,r.kt)("inlineCode",{parentName:"p"},"bankTransaction")," data view using ",(0,r.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"bank transaction data",src:n(65089).Z,width:"900",height:"355"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"bank transaction json",src:n(91622).Z,width:"1336",height:"858"})),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Download ",(0,r.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},(0,r.kt)("u",null,(0,r.kt)("strong",{parentName:"a"},"RedisInsight")))," to view your Redis data or to play with raw Redis commands in the workbench.")))}m.isMDXComponent=!0},65089:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/bank-transaction-data-1b37f7f9cb0f5b2c97754ab3b51d11c5.png"},91622:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/bank-transaction-json-37fcad9b0904e7cc5c148e6fd1e450e1.png"}}]);