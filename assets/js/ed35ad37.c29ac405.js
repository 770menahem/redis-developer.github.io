"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[7894,5653,4074,6045,8454],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>u});var o=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function n(e,t){if(null==e)return{};var r,o,i=function(e,t){if(null==e)return{};var r,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=o.createContext({}),c=function(e){var t=o.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return o.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,l=n(e,["components","mdxType","originalType","parentName"]),p=c(r),u=i,h=p["".concat(d,".").concat(u)]||p[u]||m[u]||a;return r?o.createElement(h,s(s({ref:t},l),{},{components:r})):o.createElement(h,s({ref:t},l))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=p;var n={};for(var d in t)hasOwnProperty.call(t,d)&&(n[d]=t[d]);n.originalType=e,n.mdxType="string"==typeof e?e:i,s[1]=n;for(var c=2;c<a;c++)s[c]=r[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},50358:(e,t,r)=>{r.d(t,{Z:()=>d});var o=r(67294),i=r(52263);const a="authorByline_VoxI",s="authorLabel_a70t",n="authorProfileImage_URwT";const d=function(e){let{frontMatter:t}=e;const{siteConfig:r}=(0,i.Z)(),d=r.customFields.authors;return o.createElement(o.Fragment,null,t.authors&&o.createElement("div",{className:"docAuthors"},o.createElement("hr",null),t.authors.map((e=>o.createElement("div",{key:e,className:a},o.createElement("img",{className:n,src:`/img/${d[e].image?d[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${d[e].name}`}),o.createElement("div",null,o.createElement("div",{className:s},"Author:"),o.createElement("div",null,o.createElement("a",{href:d[e].link,target:"_blank"},d[e].name),", ",d[e].title))))),o.createElement("hr",null)))}},36773:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>c});var o=r(87462),i=(r(67294),r(3905));const a={},s=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-arch",id:"howtos/solutions/microservices/common-data/microservices-arch",title:"microservices-arch",description:"You eventually land on the following architecture:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-arch.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-arch",permalink:"/howtos/solutions/microservices/common-data/microservices-arch",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-arch.mdx",tags:[],version:"current",lastUpdatedAt:1679585474,formattedLastUpdatedAt:"Mar 23, 2023",frontMatter:{}},d={},c=[],l={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You eventually land on the following architecture:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"products service"),": handles querying products from the database and returning them to the frontend"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"orders service"),": handles validating and creating orders"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"order history service"),": handles querying a customer's order history"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"payments service"),": handles processing orders for payment"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"api gateway"),": unifies the services under a single endpoint"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"mongodb"),": serves as the write-optimized database for storing orders, order history, products, etc.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You don\u2019t need to use MongoDB as your write-optimized database; you can use other databases such as a SQL database as well. This is just an example.")))}m.isMDXComponent=!0},4975:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var o=r(87462),i=(r(67294),r(3905)),a=r(31788);const s={},n=void 0,d={unversionedId:"howtos/solutions/microservices/common-data/microservices-ecommerce",id:"howtos/solutions/microservices/common-data/microservices-ecommerce",title:"microservices-ecommerce",description:"The e-commerce microservices application consists of a frontend, built using Next.js with TailwindCSS. The application backend uses Node.js. The data is stored in MongoDB and Redis. Below you will find screenshots of the frontend of the e-commerce app:",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-ecommerce",permalink:"/howtos/solutions/microservices/common-data/microservices-ecommerce",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-ecommerce.mdx",tags:[],version:"current",lastUpdatedAt:1679585474,formattedLastUpdatedAt:"Mar 23, 2023",frontMatter:{}},c={},l=[],m={toc:l};function p(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,o.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The e-commerce microservices application consists of a frontend, built using ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," with ",(0,i.kt)("a",{parentName:"p",href:"https://tailwindcss.com/"},"TailwindCSS"),". The application backend uses ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". The data is stored in ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB")," and ",(0,i.kt)("a",{parentName:"p",href:"https://redis.com/try-free/"},"Redis"),". Below you will find screenshots of the frontend of the e-commerce app:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Dashboard"),": Shows the list of products with search functionality"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"redis microservices e-commerce app frontend products page",src:r(89628).Z,width:"2475",height:"1873"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Shopping Cart"),': Add products to the cart, then check out using the "Buy Now" button\n',(0,i.kt)("img",{alt:"redis microservices e-commerce app frontend shopping cart",src:r(70114).Z,width:"2772",height:"1942"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Order history"),": Once an order is placed, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Orders")," link in the top navigation bar shows the order status and history"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"redis microservices e-commerce app frontend order history page",src:r(61032).Z,width:"2511",height:"1351"})))),(0,i.kt)(a.default,{mdxType:"SourceCode"}))}p.isMDXComponent=!0},31788:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>c});var o=r(87462),i=(r(67294),r(3905));const a={},s=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/microservices-source-code-tip",id:"howtos/solutions/microservices/common-data/microservices-source-code-tip",title:"microservices-source-code-tip",description:"Below is a command to the clone the source code for the application used in this tutorial",source:"@site/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",permalink:"/howtos/solutions/microservices/common-data/microservices-source-code-tip",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/microservices-source-code-tip.mdx",tags:[],version:"current",lastUpdatedAt:1679343780,formattedLastUpdatedAt:"Mar 20, 2023",frontMatter:{}},d={},c=[],l={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"GITHUB CODE",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Below is a command to the clone the source code for the application used in this tutorial"),(0,i.kt)("p",{parentName:"admonition"},"git clone --branch v1.0.0 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"},"https://github.com/redis-developer/redis-microservices-ecommerce-solutions"))))}m.isMDXComponent=!0},71673:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>c});var o=r(87462),i=(r(67294),r(3905));const a={},s=void 0,n={unversionedId:"howtos/solutions/microservices/common-data/redis-enterprise",id:"howtos/solutions/microservices/common-data/redis-enterprise",title:"redis-enterprise",description:"You can use Redis Enterprise as a multi-model primary database. Redis Enterprise is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or Flash. It also supports Active-Active (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes.",source:"@site/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",sourceDirName:"howtos/solutions/microservices/common-data",slug:"/howtos/solutions/microservices/common-data/redis-enterprise",permalink:"/howtos/solutions/microservices/common-data/redis-enterprise",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/common-data/redis-enterprise.mdx",tags:[],version:"current",lastUpdatedAt:1679343780,formattedLastUpdatedAt:"Mar 20, 2023",frontMatter:{}},d={},c=[],l={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can use ",(0,i.kt)("strong",{parentName:"p"},"Redis Enterprise")," as a multi-model primary database. Redis Enterprise is a fully managed, highly available, secure, and real-time data platform. It can store data on both RAM or ",(0,i.kt)("strong",{parentName:"p"},"Flash"),". It also supports ",(0,i.kt)("strong",{parentName:"p"},"Active-Active")," (multi-zone read and write replicas) on different cloud vendors, providing extreme high availability and scalability. Active-Active offers global scalability while maintaining local speed for database reads and writes."),(0,i.kt)("p",null,"Redis Enterprise has many built-in modular capabilities, making it a unified, real-time data platform. Redis Enterprise is far more than a document database."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RedisJSON"),": Persists JSON documents"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RediSearch"),": Indexes and searches JSON documents"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RedisGraph"),": A fast and easy-to-use graph database"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RedisBloom:")," Provides bloom filters and other probabilistic data structures"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RedisTimeSeries"),": Supports time series data structures"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RedisGears"),": Syncs data to external databases via different pattern (write-behind/ write-through) or executes custom logic.")),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," to view your Redis data or to play with raw Redis commands in the workbench."),(0,i.kt)("p",null,"If you're interested in diving deeper, try ",(0,i.kt)("a",{parentName:"p",href:"https://redis.com/try-free"},"Redis Enterprise")," today for free!"))}m.isMDXComponent=!0},29368:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var o=r(87462),i=(r(67294),r(3905)),a=r(50358),s=r(4975),n=r(36773),d=r(31788);r(71673);r.p;const c=r.p+"assets/images/cqrs-architecture-with-cdc-e7323ac92248e51c75bfcb7fe32c0b88.png",l={id:"index-solutions-cqrs",title:"How to Build an E-Commerce App Using Redis with the CQRS Pattern",sidebar_label:"How to Build an E-Commerce App Using Redis with the CQRS Pattern",slug:"/howtos/solutions/microservices/cqrs",authors:["prasan","will"]},m=void 0,p={unversionedId:"howtos/solutions/microservices/cqrs/index-solutions-cqrs",id:"howtos/solutions/microservices/cqrs/index-solutions-cqrs",title:"How to Build an E-Commerce App Using Redis with the CQRS Pattern",description:"What is command and query responsibility segregation (CQRS)?",source:"@site/docs/howtos/solutions/microservices/cqrs/index-cqrs.mdx",sourceDirName:"howtos/solutions/microservices/cqrs",slug:"/howtos/solutions/microservices/cqrs",permalink:"/howtos/solutions/microservices/cqrs",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/howtos/solutions/microservices/cqrs/index-cqrs.mdx",tags:[],version:"current",lastUpdatedAt:1679604864,formattedLastUpdatedAt:"Mar 23, 2023",frontMatter:{id:"index-solutions-cqrs",title:"How to Build an E-Commerce App Using Redis with the CQRS Pattern",sidebar_label:"How to Build an E-Commerce App Using Redis with the CQRS Pattern",slug:"/howtos/solutions/microservices/cqrs",authors:["prasan","will"]},sidebar:"docs",previous:{title:"Overview",permalink:"/howtos/solutions"},next:{title:"Microservices Communication with Redis Streams",permalink:"/howtos/solutions/microservices/interservice-communication"}},u={},h=[{value:"What is command and query responsibility segregation (CQRS)?",id:"what-is-command-and-query-responsibility-segregation-cqrs",level:2},{value:"Why you might use CQRS",id:"why-you-might-use-cqrs",level:2},{value:"Microservices CQRS architecture for an e-commerce application",id:"microservices-cqrs-architecture-for-an-e-commerce-application",level:2},{value:"Using CQRS in a microservices architecture",id:"using-cqrs-in-a-microservices-architecture",level:2},{value:"E-commerce application frontend using Next.js and Tailwind",id:"e-commerce-application-frontend-using-nextjs-and-tailwind",level:2},{value:"Building a CQRS microservices application with Redis and MongoDB",id:"building-a-cqrs-microservices-application-with-redis-and-mongodb",level:2},{value:"Create order command API",id:"create-order-command-api",level:3},{value:"Create order request",id:"create-order-request",level:4},{value:"Create order response",id:"create-order-response",level:4},{value:"Order history API",id:"order-history-api",level:3},{value:"Order history request",id:"order-history-request",level:4},{value:"Order history response",id:"order-history-response",level:4},{value:"Ready to use Redis with the CQRS pattern?",id:"ready-to-use-redis-with-the-cqrs-pattern",level:2},{value:"Additional resources",id:"additional-resources",level:3}],g={toc:h};function y(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(a.Z,{frontMatter:l,mdxType:"Authors"}),(0,i.kt)(d.default,{mdxType:"SourceCode"}),(0,i.kt)("h2",{id:"what-is-command-and-query-responsibility-segregation-cqrs"},"What is command and query responsibility segregation (CQRS)?"),(0,i.kt)("p",null,"Command Query Responsibility Segregation (CQRS) is a critical pattern within a microservice architecture. It decouples reads (queries) and writes (commands), which permits read and write workloads to work independently."),(0,i.kt)("p",null,"Commands(write) focus on higher durability and consistency, while queries(read) focus on performance. This enables a microservice to write data to a slower system of record disk-based database, while pre-fetching and caching that data in a cache for real-time reads."),(0,i.kt)("p",null,'The idea is simple: you separate commands such as "Order this product" (a write operation) from queries such as "Show me my order history" (a read operation). CQRS applications are often messaging-based and rely on ',(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Eventual_consistency"},"eventual consistency"),"."),(0,i.kt)("p",null,"The sample data architecture that follows demonstrates how to use Redis with CQRS:"),(0,i.kt)("img",{src:c,alt:"CQRS architecture with Redis",width:"500",className:"margin-bottom--md"}),(0,i.kt)("p",null,'The architecture illustrated in the diagram uses the Change Data Capture pattern (noted as "Integrated CDC") to track the changed state on the command database and to replicate it to the query database (Redis). This is a common pattern used with CQRS.'),(0,i.kt)("p",null,"Implementing CDC requires:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Taking the data snapshot from the system of record"),(0,i.kt)("li",{parentName:"ol"},"Performing an ETL operation finalized to load the data on the target cache database"),(0,i.kt)("li",{parentName:"ol"},"Setting up a mechanism to continuously stream the changes in the system of record to the cache")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"While you can implement your own CDC mechanism with Redis using RedisGears, Redis Enterprise comes with its own integrated CDC mechanism to solve this problem for you.")),(0,i.kt)("h2",{id:"why-you-might-use-cqrs"},"Why you might use CQRS"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"To improve application performance, scale your read and write operations separately."))),(0,i.kt)("p",null,'Consider the following scenario: You have an e-commerce application that allows a customer to populate a shopping cart with products. The site has a "Buy Now" button to facilitate ordering those products. When first starting out, you might set up and populate a product database (perhaps a SQL database). Then you might write a backend API to handle the processes of creating an order, creating an invoice, processing payments, handling fulfillment, and updating the customer\'s order history\u2026 all in one go.'),(0,i.kt)("p",null,"This method of synchronous order processing seemed like a good idea. But you soon find out that your database slows down as you gain more customers and have a higher sales volume. In reality, most applications have significantly more reads than writes. You should scale those operations separately."),(0,i.kt)("p",null,"You decide that you need to process orders quickly so the customer doesn't have to wait. Then, when you have time, you can create an invoice, process payment, handle fulfillment, etc."),(0,i.kt)("p",null,"So you decide to separate each of these steps. Using a microservices approach with CQRS allows you to scale your reads and writes independently as well as aid in decoupling your microservices. With a CQRS model, a single service is responsible for handling an entire command from end to end. One service should not depend on another service in order to complete a command."),(0,i.kt)("h2",{id:"microservices-cqrs-architecture-for-an-e-commerce-application"},"Microservices CQRS architecture for an e-commerce application"),(0,i.kt)(n.default,{mdxType:"InitialMicroservicesArchitecture"}),(0,i.kt)("h2",{id:"using-cqrs-in-a-microservices-architecture"},"Using CQRS in a microservices architecture"),(0,i.kt)("p",null,"Note that in the current architecture all the services use the same underlying database. Even though you\u2019re technically separating reads and writes, you can't scale the write-optimized database independently. This is where Redis comes in. If you put Redis in front of your write-optimized database, you can use it for reads while writing to the write-optimized database. The benefit of Redis is that it\u2019s fast for reads and writes, which is why it\u2019s the best choice for caching and CQRS."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For the purposes of this tutorial, we\u2019re not highlighting how communication is coordinated between our services, such as how new orders are processed for payment. That process uses Redis Streams, and is outlined in our ",(0,i.kt)("u",null,(0,i.kt)("a",{parentName:"p",href:"/howtos/solutions/microservices/interservice-communication"},"interservice communication guide")),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"When your e-commerce application eventually needs to scale across the globe, Redis Enterprise provides Active-Active geo-distribution for reads and writes at local latencies as well as availability of 99.999% uptime.")),(0,i.kt)("p",null,"Let's look at some sample code that helps facilitate the CQRS pattern with Redis and MongoDB."),(0,i.kt)("h2",{id:"e-commerce-application-frontend-using-nextjs-and-tailwind"},"E-commerce application frontend using Next.js and Tailwind"),(0,i.kt)(s.default,{mdxType:"MicroservicesEcommerceDesign"}),(0,i.kt)("h2",{id:"building-a-cqrs-microservices-application-with-redis-and-mongodb"},"Building a CQRS microservices application with Redis and MongoDB"),(0,i.kt)("p",null,"Let's look at the sample code for the ",(0,i.kt)("inlineCode",{parentName:"p"},"order service")," and see the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateOrder")," command (a write operation). Then we look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"order history service")," to see the ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewOrderHistory")," command (a read operation)."),(0,i.kt)("h3",{id:"create-order-command-api"},"Create order command API"),(0,i.kt)("p",null,"The code that follows shows an example API request and response to create an order."),(0,i.kt)("h4",{id:"create-order-request"},"Create order request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="docs/api/create-order.md"',title:'"docs/api/create-order.md"'},'// POST http://api-gateway/orders/createOrder\n{\n  "products": [\n    {\n      "productId": 11000,\n      "qty": 2,\n      "productPrice": 3995\n    },\n    {\n      "productId": 11001,\n      "qty": 1,\n      "productPrice": 5450\n    }\n  ]\n}\n')),(0,i.kt)("h4",{id:"create-order-response"},"Create order response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": "63f5f8dc3696d145a45775a6", // orderId\n  "error": null\n}\n')),(0,i.kt)("p",null,"When you make a request, it goes through the API gateway to the ",(0,i.kt)("inlineCode",{parentName:"p"},"orders service"),". Ultimately, it ends up calling a ",(0,i.kt)("inlineCode",{parentName:"p"},"createOrder")," function which looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server/src/services/orders/src/service-impl.ts"',title:'"server/src/services/orders/src/service-impl.ts"'},"async function createOrder(order: IOrder) {\n  if (!order) {\n    throw 'Order data is mandatory!';\n  }\n\n  order.orderStatusCode = ORDER_STATUS.CREATED;\n  order.userId = USERS.DEFAULT; // Used as a shortcut, in a real app you would use customer session data to fetch user details\n  order.createdOn = new Date();\n  order.createdBy = order.userId;\n  order.lastUpdatedOn = null;\n  order.lastUpdatedBy = null;\n  order.statusCode = DB_ROW_STATUS.ACTIVE;\n\n  order = await validateOrder(order);\n\n  const orderId = await addOrderToRedis(order);\n  order.orderId = orderId;\n\n  await addOrderToMongoDB(order);\n\n  return orderId;\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For tutorial simplicity, we add data to both MongoDB and Redis in the same service (double-write). As mentioned earlier, a common pattern is to have your services write to one database, and then separately use a CDC mechanism to update the other database. For example, you could write directly to Redis, then use ",(0,i.kt)("strong",{parentName:"p"},"RedisGears")," to handle synchronizing Redis and MongoDB in the background. For the purposes of this tutorial, we don\u2019t outline exactly how you might handle synchronization, but instead focus on how the data is stored and accessed in Redis.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you're using ",(0,i.kt)("strong",{parentName:"p"},"Redis Enterprise"),", you can take advantage of the ",(0,i.kt)("strong",{parentName:"p"},"integrated CDC")," mechanism to avoid having to roll your own.")),(0,i.kt)("p",null,"Note that in the previous code block we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"addOrderToRedis")," function to store orders in Redis. We use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/redis/redis-om-node"},"Redis OM for Node.js")," to store the order entities in Redis. This is what that function looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server/src/services/orders/src/service-impl.ts"',title:'"server/src/services/orders/src/service-impl.ts"'},"import { Entity, Schema } from 'redis-om';\nimport { getRedisOmClient } from '../utils/redis/redis-wrapper';\n\nclass OrderEntity extends Entity {}\n\nconst schema = new Schema(OrderEntity, {\n  orderId: { type: 'string' },\n  userId: { type: 'string' },\n  orderStatusCode: { type: 'number' },\n\n  productsStr: { type: 'string' },\n\n  createdOn: { type: 'date' },\n  createdBy: { type: 'string' },\n  lastUpdatedOn: { type: 'date' },\n  lastUpdatedBy: { type: 'string' },\n  statusCode: { type: 'number' },\n});\n\nasync function addOrderToRedis(order: IOrder) {\n  let orderId = '';\n\n  const redisOmClient = getRedisOmClient();\n  const repository = redisOmClient.fetchRepository(schema);\n  const entity = repository.createEntity(order);\n\n  orderId = entity.entityId;\n  entity.orderId = orderId;\n\n  await repository.save(entity);\n\n  return orderId;\n}\n")),(0,i.kt)("h3",{id:"order-history-api"},"Order history API"),(0,i.kt)("p",null,"The code that follows shows an example API request and response to get a customer's order history."),(0,i.kt)("h4",{id:"order-history-request"},"Order history request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="docs/api/view-order-history.md"',title:'"docs/api/view-order-history.md"'},"// GET http://api-gateway/orderHistory/viewOrderHistory\n")),(0,i.kt)("h4",{id:"order-history-response"},"Order history response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "orderId": "01GTH7JTQWP5QSEY32NNKT6B88",\n      "userId": "ADMIN",\n      "orderStatusCode": 1,\n      "products": [\n        {\n          "productId": 11000,\n          "qty": 10,\n          "productPrice": 3995,\n          "productData": {\n            "id": 11000,\n            "price": 3995,\n            "productDisplayName": "Puma Men Slick 3HD Yellow Black Watches",\n            "variantName": "Slick 3HD Yellow",\n            "brandName": "Puma",\n            "ageGroup": "Adults-Men",\n            "gender": "Men",\n            "displayCategories": "Accessories",\n            "styleImages": {\n              "default": {\n                "imageURL": "http://cdn_service/images/11000.jpg"\n              }\n            },\n            "productDescriptors": {\n              "description": {\n                "value": "Stylish and comfortable, this motor sport inspired wrist watch from puma is designed with a plastic case and ..."\n              }\n            }\n          }\n        },\n        {\n          "productId": 11001,\n          "qty": 19,\n          "productPrice": 5450,\n          "productData": {\n            "id": 11001,\n            "price": 5450,\n            "productDisplayName": "Puma Men Top Fluctuation Red Black Watches",\n            "variantName": "Top Fluctuation Red",\n            "brandName": "Puma",\n            "ageGroup": "Adults-Men",\n            "gender": "Men",\n            "displayCategories": "Accessories",\n            "styleImages": {\n              "default": {\n                "imageURL": "http://cdn_service/images/11001.jpg"\n              }\n            },\n            "productDescriptors": {\n              "description": {\n                "value": "This watch from puma comes in a clean sleek design. This active watch is perfect for urban wear and ..."\n              }\n            }\n          }\n        }\n      ],\n      "createdOn": "2023-03-02T13:18:31.657Z",\n      "createdBy": "ADMIN",\n      "lastUpdatedOn": null,\n      "lastUpdatedBy": null\n    }\n    //...\n  ],\n  "error": null\n}\n')),(0,i.kt)("p",null,"When you make a request, it goes through the API gateway to the ",(0,i.kt)("inlineCode",{parentName:"p"},"order history service"),". Ultimately, it ends up calling a ",(0,i.kt)("inlineCode",{parentName:"p"},"viewOrderHistory")," function, which looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server/src/services/order-history/src/service-impl.ts"',title:'"server/src/services/order-history/src/service-impl.ts"'},"async function viewOrderHistory(userId: string) {\n  const repository = OrderRepo.getRepository();\n  let orders: IOrder[] = [];\n\n  const result = repository\n    .search()\n    .where('createdBy')\n    .eq(userId)\n    .and('orderStatusCode')\n    .gte(ORDER_STATUS.CREATED) //gte returns CREATED and PAYMENT_SUCCESS\n    .and('statusCode')\n    .eq(DB_ROW_STATUS.ACTIVE)\n    .return.all();\n\n  orders = result.map((elm) => {\n    return {\n      orderId: elm.orderId,\n      userId: elm.userId,\n      orderStatusCode: elm.orderStatusCode,\n      createdOn: elm.createdOn,\n      createdBy: elm.createdBy,\n      lastUpdatedOn: elm.lastUpdatedOn,\n      lastUpdatedBy: elm.lastUpdatedBy,\n    } as IOrder;\n  });\n\n  return orders;\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"order history service")," only needs to go to Redis for all orders. This is because we handle storage and synchronization between Redis and MongoDB within the ",(0,i.kt)("inlineCode",{parentName:"p"},"orders service"),".")),(0,i.kt)("p",null,"You might be used to using Redis as a cache and both storing and retrieving stringified JSON values or perhaps hashed values. However, look closely at the code above. In it, we store orders as ",(0,i.kt)("strong",{parentName:"p"},"JSON")," documents, and then use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/redis/redis-om-node"},"Redis OM")," to search for the orders that belong to a specific user. Redis operates like a search engine, here, with the ability to speed up queries and scale independently from the primary database (which in this case is MongoDB)."),(0,i.kt)("h2",{id:"ready-to-use-redis-with-the-cqrs-pattern"},"Ready to use Redis with the CQRS pattern?"),(0,i.kt)("p",null,"Hopefully, this tutorial has helped you visualize how to use Redis with the CQRS pattern. It can help to reduce the load on your primary database while still allowing you to store and search JSON documents. For additional resources related to this topic, check out the links below:"),(0,i.kt)("h3",{id:"additional-resources"},"Additional resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/interservice-communication"},"Interservice communication")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/caching"},"Query caching")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/howtos/solutions/microservices/api-gateway-caching"},"API gateway caching")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/c/Redisinc"},"Redis YouTube channel")),(0,i.kt)("li",{parentName:"ul"},"Clients like ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/redis/node-redis"},"Node Redis")," and ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/redis/redis-om-node"},"Redis om Node")," help you to use Redis in Node.js applications."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise/redis-insight/"},"RedisInsight")," : To view your Redis data or to play with raw Redis commands in the workbench")))}y.isMDXComponent=!0},70114:(e,t,r)=>{r.d(t,{Z:()=>o});const o=r.p+"assets/images/design-cart-2-2a3b76656f26a754bed6a6c63ad8beef.png"},89628:(e,t,r)=>{r.d(t,{Z:()=>o});const o=r.p+"assets/images/design-dashboard-6a34137ca4862561cc2f065ed55ae081.png"},61032:(e,t,r)=>{r.d(t,{Z:()=>o});const o=r.p+"assets/images/design-order-history-16fc808f70b63d91a37a3ea76baa232d.png"}}]);