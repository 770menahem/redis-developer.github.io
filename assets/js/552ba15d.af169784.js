"use strict";(self.webpackChunkredis_developer_hub=self.webpackChunkredis_developer_hub||[]).push([[3114],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(t),c=a,h=u["".concat(l,".").concat(c)]||u[c]||m[c]||o;return t?r.createElement(h,s(s({ref:n},p),{},{components:t})):r.createElement(h,s({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},50358:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(67294),a=t(52263);const o="authorByline_VoxI",s="authorLabel_a70t",i="authorProfileImage_URwT";const l=function(e){let{frontMatter:n}=e;const{siteConfig:t}=(0,a.Z)(),l=t.customFields.authors;return r.createElement(r.Fragment,null,n.authors&&r.createElement("div",{className:"docAuthors"},r.createElement("hr",null),n.authors.map((e=>r.createElement("div",{key:e,className:o},r.createElement("img",{className:i,src:`/img/${l[e].image?l[e].image:"default_author_profile_pic.png"}`,alt:`Profile picture for ${l[e].name}`}),r.createElement("div",null,r.createElement("div",{className:s},"Author:"),r.createElement("div",null,r.createElement("a",{href:l[e].link,target:"_blank"},l[e].name),", ",l[e].title))))),r.createElement("hr",null)))}},74731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),o=t(50358);const s={id:"index-lesson_4",title:"User/Roles & Secondary Indexes",sidebar_label:"User Roles & Secondary Indexes",slug:"/develop/java/redis-and-spring-course/lesson_4",authors:["bsb"]},i=void 0,l={unversionedId:"develop/java/spring/redis-and-spring-course/lesson_4/index-lesson_4",id:"develop/java/spring/redis-and-spring-course/lesson_4/index-lesson_4",title:"User/Roles & Secondary Indexes",description:"Objectives",source:"@site/docs/develop/java/spring/redis-and-spring-course/lesson_4/index-lesson_4.mdx",sourceDirName:"develop/java/spring/redis-and-spring-course/lesson_4",slug:"/develop/java/redis-and-spring-course/lesson_4",permalink:"/develop/java/redis-and-spring-course/lesson_4",draft:!1,editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/develop/java/spring/redis-and-spring-course/lesson_4/index-lesson_4.mdx",tags:[],version:"current",lastUpdatedAt:1667495358,formattedLastUpdatedAt:"Nov 3, 2022",frontMatter:{id:"index-lesson_4",title:"User/Roles & Secondary Indexes",sidebar_label:"User Roles & Secondary Indexes",slug:"/develop/java/redis-and-spring-course/lesson_4",authors:["bsb"]},sidebar:"docs",previous:{title:"Mapping & Repositories",permalink:"/develop/java/redis-and-spring-course/lesson_3"},next:{title:"Books, Categories & The Catalog",permalink:"/develop/java/redis-and-spring-course/lesson_5"}},d={},p=[{value:"Objectives",id:"objectives",level:3},{value:"Agenda",id:"agenda",level:3},{value:"Loading Users",id:"loading-users",level:3},{value:"User Repository",id:"user-repository",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Password Encoding",id:"password-encoding",level:3},{value:"Secondary Indexes: Finding Roles by Name",id:"secondary-indexes-finding-roles-by-name",level:3},{value:"CreateUsers CommandLineRunner",id:"createusers-commandlinerunner",level:3},{value:"Exploring the loaded Users",id:"exploring-the-loaded-users",level:3},{value:"Building the Redi2Read API",id:"building-the-redi2read-api",level:3}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{frontMatter:s,mdxType:"Authors"}),(0,a.kt)("h3",{id:"objectives"},"Objectives"),(0,a.kt)("p",null,"To finish creating the user-role domain, load and transform JSON data, and begin crafting the Redi2Read API."),(0,a.kt)("h3",{id:"agenda"},"Agenda"),(0,a.kt)("p",null,"In this lesson, you'll learn:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"How to load JSON data using Jackson."),(0,a.kt)("li",{parentName:"ul"},"How to create and work with secondary indexes"),(0,a.kt)("li",{parentName:"ul"},"How to use the repositories with a REST controller.")),(0,a.kt)("p",null,"If you get stuck:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The progress made in this lesson is available on the redi2read github repository at ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/redis-developer/redi2read/tree/course/milestone-4"},"https://github.com/redis-developer/redi2read/tree/course/milestone-4"))),(0,a.kt)("h3",{id:"loading-users"},"Loading Users"),(0,a.kt)("p",null,"Now that we\u2019ve created the Roles let\u2019s load the ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),"s from the provided JSON data in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/resources/data/users/users.json"),".\nThe file contains an array of JSON user objects as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "password": "9yNvIO4GLBdboI",\n  "name": "Georgia Spencer",\n  "id": -5035019007718357598,\n  "email": "georgia.spencer@example.com"\n}\n')),(0,a.kt)("p",null,"The JSON fields map exactly to the JavaBean names for our User POJO properties."),(0,a.kt)("h3",{id:"user-repository"},"User Repository"),(0,a.kt)("p",null,"First, we\u2019ll create the ",(0,a.kt)("inlineCode",{parentName:"p"},"UserRepository"),"; just like we did with the ",(0,a.kt)("inlineCode",{parentName:"p"},"RoleRepository"),", we\u2019ll extend ",(0,a.kt)("inlineCode",{parentName:"p"},"CrudRepository"),".\nUnder the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/java/com/redislabs/edu/redi2read/repositories")," let's create the ",(0,a.kt)("inlineCode",{parentName:"p"},"UserRepository")," interface as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"package com.redislabs.edu.redi2read.repositories;\n\nimport com.redislabs.edu.redi2read.models.User;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends CrudRepository<User, String> {\n  User findFirstByEmail(String email);\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"findFirstByEmail")," method takes advantage of the index we previously created on the email field of the ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," model.\nThe Spring Repository will provide an implementation of the finder method at runtime.\nWe will use this finder when we tackle our application's security."),(0,a.kt)("p",null,"Let\u2019s create another ",(0,a.kt)("inlineCode",{parentName:"p"},"CommandLineRunner")," under the boot package to load the users. We\u2019ll follow a similar recipe for the Roles,\nexcept that we will load the JSON data from disk and use Jackson (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/FasterXML/jackson"},"https://github.com/FasterXML/jackson"),"),\none of the most popular Java JSON libraries."),(0,a.kt)("p",null,"The recipe to load the user goes as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create an input stream from the user\u2019s JSON data file"),(0,a.kt)("li",{parentName:"ol"},"Using Jackson, read the input stream into a collection of users"),(0,a.kt)("li",{parentName:"ol"},"For each user:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Encode the plain text password"),(0,a.kt)("li",{parentName:"ul"},"Add the customer role")),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Based on the loading recipe above, there are two things our application can\u2019t currently do that it needs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A way to encode plain text user password"),(0,a.kt)("li",{parentName:"ul"},"A way to find a role by name")),(0,a.kt)("h3",{id:"password-encoding"},"Password Encoding"),(0,a.kt)("p",null,"Our implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"PasswordEncoder")," will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"BCrypt")," strong hashing function. In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Redi2readApplication")," class add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Bean\npublic BCryptPasswordEncoder passwordEncoder() {\n  return new BCryptPasswordEncoder();\n}\n")),(0,a.kt)("p",null,"With the corresponding import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n")),(0,a.kt)("h3",{id:"secondary-indexes-finding-roles-by-name"},"Secondary Indexes: Finding Roles by Name"),(0,a.kt)("p",null,"As we learned in the previous lesson, the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Indexed")," annotation can be used to create a secondary index. Secondary indexes enable lookup operations based on native Redis structures.\nThe index is maintained on every save/update of an indexed object.\nTo add a secondary index to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Role")," model, we\u2019ll simply add the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Indexed")," annotation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Data\n@Builder\n@RedisHash\npublic class Role {\n  @Id\n  private String id;\n\n  @Indexed\n  private String name;\n}\n")),(0,a.kt)("p",null,"Don\u2019t forget to add the corresponding import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import org.springframework.data.redis.core.index.Indexed;\n")),(0,a.kt)("p",null,"Now when a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Role")," instance is created, with ID as ",(0,a.kt)("inlineCode",{parentName:"p"},'"abc-123"')," and role as ",(0,a.kt)("inlineCode",{parentName:"p"},'"superuser"'),", Spring Data Redis will do the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create the ",(0,a.kt)("inlineCode",{parentName:"li"},'"by name"')," index: Created as a Redis Set with the key ",(0,a.kt)("inlineCode",{parentName:"li"},"com.redislabs.edu.redi2read.models.Role:name:superuser")," containing one entry; the id of the indexed object ",(0,a.kt)("inlineCode",{parentName:"li"},'"abc-123"')),(0,a.kt)("li",{parentName:"ol"},"A list of indexes for the ",(0,a.kt)("inlineCode",{parentName:"li"},"Role"),' "superuser": Create a Redis Set with the key ',(0,a.kt)("inlineCode",{parentName:"li"},'"com.redislabs.edu.redi2read.models.Role:abc-123:idx"'),"\ncontaining one entry; the key of the index ",(0,a.kt)("inlineCode",{parentName:"li"},'"com.redislabs.edu.redi2read.models.Role:name:superuser"'))),(0,a.kt)("p",null,"Unfortunately, to index the already created Roles, we\u2019ll need to either retrieve them and resave them or recreate them.\nSince we already have automated the seeding of the Roles and we haven\u2019t yet created any associated objects,\nwe can simply delete them using the Redis CLI and the DEL command and restart the server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> KEYS com.redislabs.edu.redi2read.models.Role*\n1) "com.redislabs.edu.redi2read.models.Role:c4219654-0b79-4ee6-b928-cb75909c4464"\n2) "com.redislabs.edu.redi2read.models.Role:9d383baf-35a0-4d20-8296-eedc4bea134a"\n3) "com.redislabs.edu.redi2read.models.Role"\n127.0.0.1:6379> DEL "com.redislabs.edu.redi2read.models.Role:c4219654-0b79-4ee6-b928-cb75909c4464" "com.redislabs.edu.redi2read.models.Role:9d383baf-35a0-4d20-8296-eedc4bea134a" "com.redislabs.edu.redi2read.models.Role"\n(integer) 3\n127.0.0.1:6379>\n')),(0,a.kt)("p",null,"The DEL command takes one or more keys. We\u2019ll pass the three current keys for the Role hashes and the Role key set."),(0,a.kt)("p",null,"With the secondary index on the name for roles created, we can add a finder method to the ",(0,a.kt)("inlineCode",{parentName:"p"},"RoleRepository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Repository\npublic interface RoleRepository extends CrudRepository<Role, String> {\n  Role findFirstByName(String role);\n}\n")),(0,a.kt)("h3",{id:"createusers-commandlinerunner"},"CreateUsers CommandLineRunner"),(0,a.kt)("p",null,"Under the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/java/com/redislabs/edu/redi2read/boot "),"let's create the ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateUsers.java")," file with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package com.redislabs.edu.redi2read.boot;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.redislabs.edu.redi2read.models.Role;\nimport com.redislabs.edu.redi2read.models.User;\nimport com.redislabs.edu.redi2read.repositories.RoleRepository;\nimport com.redislabs.edu.redi2read.repositories.UserRepository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Component;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Component\n@Order(2)\n@Slf4j\npublic class CreateUsers implements CommandLineRunner {\n\n  @Autowired\n  private RoleRepository roleRepository;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Autowired\n  private BCryptPasswordEncoder passwordEncoder;\n\n  @Override\n  public void run(String... args) throws Exception {\n    if (userRepository.count() == 0) {\n      // load the roles\n      Role admin = roleRepository.findFirstByname("admin");\n      Role customer = roleRepository.findFirstByname("customer");\n\n      try {\n        // create a Jackson object mapper\n        ObjectMapper mapper = new ObjectMapper();\n        // create a type definition to convert the array of JSON into a List of Users\n        TypeReference<List<User>> typeReference = new TypeReference<List<User>>() {\n        };\n        // make the JSON data available as an input stream\n        InputStream inputStream = getClass().getResourceAsStream("/data/users/users.json");\n        // convert the JSON to objects\n        List<User> users = mapper.readValue(inputStream, typeReference);\n\n        users.stream().forEach((user) -> {\n          user.setPassword(passwordEncoder.encode(user.getPassword()));\n          user.addRole(customer);\n          userRepository.save(user);\n        });\n        log.info(">>>> " + users.size() + " Users Saved!");\n      } catch (IOException e) {\n        log.info(">>>> Unable to import users: " + e.getMessage());\n      }\n\n      User adminUser = new User();\n      adminUser.setName("Adminus Admistradore");\n      adminUser.setEmail("admin@example.com");\n      adminUser.setPassword(passwordEncoder.encode("Reindeer Flotilla"));//\n      adminUser.addRole(admin);\n\n      userRepository.save(adminUser);\n      log.info(">>>> Loaded User Data and Created users...");\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Let\u2019s break it down:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"At the top, we use the ",(0,a.kt)("inlineCode",{parentName:"li"},"@Autowired")," annotation to inject the ",(0,a.kt)("inlineCode",{parentName:"li"},"RoleRepository"),", the ",(0,a.kt)("inlineCode",{parentName:"li"},"UserRepository"),", and the ",(0,a.kt)("inlineCode",{parentName:"li"},"BCryptPasswordEncoder"),"."),(0,a.kt)("li",{parentName:"ul"},"As with the ",(0,a.kt)("inlineCode",{parentName:"li"},"CreateRoles")," ",(0,a.kt)("inlineCode",{parentName:"li"},"CommandLineRunner"),", we only execute the logic if there are no database users."),(0,a.kt)("li",{parentName:"ul"},"We then load the admin and customer roles by using the Repository custom finder method ",(0,a.kt)("inlineCode",{parentName:"li"},"findFirstByName"),"."),(0,a.kt)("li",{parentName:"ul"},"To process the JSON, we create a Jackson ObjectMapper and a TypeReference, which will serve as a recipe for serializing the JSON into Java objects."),(0,a.kt)("li",{parentName:"ul"},"Using the ",(0,a.kt)("inlineCode",{parentName:"li"},"getResourceAsStream")," from the ",(0,a.kt)("inlineCode",{parentName:"li"},"Class")," object, we load the JSON file from the resources directory"),(0,a.kt)("li",{parentName:"ul"},"Then we use the ",(0,a.kt)("inlineCode",{parentName:"li"},"ObjectMapper")," to convert the incoming input stream into a ",(0,a.kt)("inlineCode",{parentName:"li"},"List")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"User")," objects"),(0,a.kt)("li",{parentName:"ul"},"For each user, we encode the password and add the customer role"),(0,a.kt)("li",{parentName:"ul"},"Near the end of the file, we create a single user with the admin role, which we will use in a later Lesson")),(0,a.kt)("p",null,"On application restart, we should now see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"2021-04-03 10:05:04.222  INFO 40386 --- [  restartedMain] c.r.edu.redi2read.Redi2readApplication   : Started Redi2readApplication in 2.192 seconds (JVM running for 2.584)\n2021-04-03 10:05:04.539  INFO 40386 --- [  restartedMain] c.r.edu.redi2read.boot.CreateRoles       : >>>> Created admin and customer roles...\n2021-04-03 10:06:27.292  INFO 40386 --- [  restartedMain] c.r.edu.redi2read.boot.CreateUsers       : >>>> 1000 Users Saved!\n2021-04-03 10:06:27.373  INFO 40386 --- [  restartedMain] c.r.edu.redi2read.boot.CreateUsers       : >>>> Loaded User Data and Created users...\n")),(0,a.kt)("h3",{id:"exploring-the-loaded-users"},"Exploring the loaded Users"),(0,a.kt)("p",null,"If you were watching the Redis CLI in MONITOR mode you probably saw a barrage of the Redis commands executing for the 1001 users we\u2019ve just created.\nLet\u2019s use the CLI to explore the data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'127.0.0.1:6379> KEYS "com.redislabs.edu.redi2read.models.User"\n1) "com.redislabs.edu.redi2read.models.User"\n127.0.0.1:6379> TYPE "com.redislabs.edu.redi2read.models.User"\nset\n127.0.0.1:6379> SCARD "com.redislabs.edu.redi2read.models.User"\n(integer) 1001\n127.0.0.1:6379> SRANDMEMBER "com.redislabs.edu.redi2read.models.User"\n"-1848761758049653394"\n127.0.0.1:6379> HGETALL "com.redislabs.edu.redi2read.models.User:-1848761758049653394"\n 1) "id"\n 2) "-1848761758049653394"\n 3) "_class"\n 4) "com.redislabs.edu.redi2read.models.User"\n 5) "roles.[0]"\n 6) "com.redislabs.edu.redi2read.models.Role:a9f9609f-c173-4f48-a82d-ca88b0d62d0b"\n 7) "name"\n 8) "Janice Garza"\n 9) "email"\n10) "janice.garza@example.com"\n11) "password"\n12) "$2a$10$/UHTESWIqcl6HZmGpWSUHexNymIgM7rzOsWc4tcgqh6W5OVO4O46."\n')),(0,a.kt)("p",null,"We now have a Redis Set holding the collection of user keys for the Redis Hashes containing user instances.\nWe use the SCARD command to get the set\u2019s cardinality (1001, the 1000 users from the JSON plus the admin user).\nUsing the SRANDMEMBER command, we can pull a random member from a ",(0,a.kt)("inlineCode",{parentName:"p"},"Set"),". We then use that and the ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," Hashes prefix to retrieve the data for a random User hash.\nA few things to point out:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The user\u2019s set of roles are stored using indexed hash fields (",(0,a.kt)("inlineCode",{parentName:"li"},"roles.[0], roles.[1]"),", etc.) with a value being the key for a given role.\nThis is the result of annotating the Java Set of Role using ",(0,a.kt)("inlineCode",{parentName:"li"},"@Reference")),(0,a.kt)("li",{parentName:"ul"},"The password field is hashed correctly.")),(0,a.kt)("h3",{id:"building-the-redi2read-api"},"Building the Redi2Read API"),(0,a.kt)("p",null,"Now that we have ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),"s and ",(0,a.kt)("inlineCode",{parentName:"p"},"Role"),"s, let\u2019s create an ",(0,a.kt)("inlineCode",{parentName:"p"},"UserController")," to expose some user management functionality."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package com.redislabs.edu.redi2read.controllers;\n\nimport com.redislabs.edu.redi2read.models.User;\nimport com.redislabs.edu.redi2read.repositories.UserRepository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @GetMapping\n  public Iterable<User> all() {\n    return userRepository.findAll();\n  }\n}\n')),(0,a.kt)("p",null,"We can now issue a GET request to retrieve all users:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl --location --request GET 'http://localhost:8080/api/users/'\n")),(0,a.kt)("p",null,"The output should be an array of JSON object like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n   {\n       "id": "-1180251602608130769",\n       "name": "Denise Powell",\n       "email": "denise.powell@example.com",\n       "password": "$2a$10$pMJjQ2bFAUGlBTX9cHsx/uGrbbl3JZmmiR.vG5xaVwQodQyLaj52a",\n       "passwordConfirm": null,\n       "roles": [\n           {\n               "id": "a9f9609f-c173-4f48-a82d-ca88b0d62d0b",\n               "name": "customer"\n           }\n       ]\n   },\n...\n]\n')),(0,a.kt)("p",null,"Let\u2019s be good RESTful citizens and filter out the ",(0,a.kt)("inlineCode",{parentName:"p"},"password")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"passwordConfirm")," fields on the way out.\nTo accomplish this we take advantage of the fact the Jackson is the default serializer in Spring Web which\nmean we can annotate the ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," class with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@JsonIgnoreProperties")," only allowing setters\n(so that we can load the data) but hiding the getters during serialization as shown next:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@JsonIgnoreProperties(value = { "password", "passwordConfirm" }, allowSetters = true)\n@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n@ToString(onlyExplicitlyIncluded = true)\n@Data\n@RedisHash\npublic class User {\n...\n}\n')),(0,a.kt)("p",null,"With the import statement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n")),(0,a.kt)("p",null,"Issuing the request again should reflect the changes on the JSON response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id": "-1180251602608130769",\n        "name": "Denise Powell",\n        "email": "denise.powell@example.com",\n        "roles": [\n            {\n                "id": "a9f9609f-c173-4f48-a82d-ca88b0d62d0b",\n                "name": "customer"\n            }\n        ]\n    },\n...\n]\n')),(0,a.kt)("p",null,"Let\u2019s add one more method to our ",(0,a.kt)("inlineCode",{parentName:"p"},"UserController"),". We\u2019ll add the ability to retrieve a user by its email address,\nwhich will take advantage of the secondary index on email in the User object.\nWe\u2019ll implement it as a filter on the GET root endpoint of the controller:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},' @GetMapping\n public Iterable<User> all(@RequestParam(defaultValue = "") String email) {\n   if (email.isEmpty()) {\n     return userRepository.findAll();\n   } else {\n     Optional<User> user = Optional.ofNullable(userRepository.findFirstByEmail(email));\n     return user.isPresent() ? List.of(user.get()) : Collections.emptyList();\n   }\n }\n')),(0,a.kt)("p",null,"We use a request parameter for the email, and if it is present, we invoke the ",(0,a.kt)("inlineCode",{parentName:"p"},"findFirstByEmail")," finder.\nWe wrap the result in a list to match the result type of the method. We use Optional to handle a null\nresult from the finder.\nAnd don\u2019t forget your imports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport org.springframework.web.bind.annotation.RequestParam;\n")),(0,a.kt)("p",null,"Invoking the endpoint with curl:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request GET 'http://localhost:8080/api/users/?email=donald.gibson@example.com'\n")),(0,a.kt)("p",null,"Returns the expected result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "-1266125356844480724",\n    "name": "Donald Gibson",\n    "email": "donald.gibson@example.com",\n    "roles": [\n      {\n        "id": "a9f9609f-c173-4f48-a82d-ca88b0d62d0b",\n        "name": "customer"\n      }\n    ]\n  }\n]\n')))}u.isMDXComponent=!0}}]);