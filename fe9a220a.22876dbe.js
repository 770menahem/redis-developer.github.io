(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{1129:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image_login-b4a0ee93495e37c6287d6b9c5b2dab04.png"},1130:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image_03-56d3f8ad3be23376702d5f98463ead46.png"},1131:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image_04-b41cf514b3516ac74403520912c29f5a.png"},1132:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image_05-7ce589944397942b6c898595e18dc844.png"},1133:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/installed_operators-aad3bc68c1aa2c47896c395bc53e47cb.png"},1134:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/streaming_events-43510bdc97bf40d65edb6070359db0cd.png"},1135:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/create_rec-6dba2c57602ae13de821cc057e87f9e7.png"},1136:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/succeeded-d8188451d46193eaae9291fe396c51da.png"},1137:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/ocp-cad019a1f147603df99802b100561159.png"},1138:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/recui-da0cb910d5f26298f52c62909c70134b.png"},1139:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/loadbalancer-f9689c003727dadde864a7b6d6f04cd0.png"},1140:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/recui2-81e29e464af10ce4fa3e410002ef55fc.png"},1141:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re1-7e0fd1324f6d37b25347b6bba7f2cf49.png"},1142:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re2-2b68c422779c76ef2dd75c33325a9d71.png"},1143:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re3-7567eb26b21e2c9d8f2d0493979a43be.png"},1144:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re4-2aa5813bddd1b0fc4809aff3f36f830b.png"},1145:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re6-26d19677fdec5f640e1c7a48400d280c.png"},1146:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re7-044f1f0670adc0c927e6c6884ea4d9c0.png"},1147:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re8-578f5a402d38edd3127fa90e07b866ec.png"},1148:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/re9-e5a9d8e169609a7cf50eb58e0392edf2.png"},322:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),s=n(7),a=(n(0),n(327)),i={id:"index-openshift",title:"How to deploy Redis Enterprise on Red Hat OpenShift Container Platform via OperatorHub",sidebar_label:"Redis on Red Hat OpenShift Container Platform",slug:"/create/openshift",authors:["karan","sumit","ajeet"]},o={unversionedId:"create/openshift/index-openshift",id:"create/openshift/index-openshift",isDocsHomePage:!1,title:"How to deploy Redis Enterprise on Red Hat OpenShift Container Platform via OperatorHub",description:"Deploying and managing containerised applications is not easy. With the rise of microservice architecture, it becomes cumbersome to deploy containers across multiple environments. Given that containers can be spun up in seconds and that too in a higher volume compared to VMs, managing across multiple platforms can be extremely challenging. OpenShift (kubernetes) comes to the rescue. Kubernetes is designed and built from the ground up to deploy and manage containerized applications across hundreds of compute nodes. Red Hat OpenShift is a leading enterprise kubernetes platform that enables a cloud-like experience everywhere it\u2019s deployed, no matter if it\u2019s in the cloud, on-premise or at the edge.",source:"@site/docs/create/openshift/index-openshift.mdx",slug:"/create/openshift",permalink:"/create/openshift",editUrl:"https://github.com/redis-developer/redis-developer/edit/master/docs/create/openshift/index-openshift.mdx",version:"current",lastUpdatedAt:1643714221,sidebar_label:"Redis on Red Hat OpenShift Container Platform",sidebar:"docs",previous:{title:"How to Deploy a Redis Enterprise Database from a Jenkins Pipeline",permalink:"/create/jenkins"},next:{title:"Develop your application using programming languages",permalink:"/develop"}},c=[{value:"What is OpenShift?",id:"what-is-openshift",children:[]},{value:"Supported Technologies",id:"supported-technologies",children:[]},{value:"What is OperatorHub?",id:"what-is-operatorhub",children:[]},{value:"Pre-requisites:",id:"pre-requisites",children:[]},{value:"Step 1. Login to Red Hat Openshift Container Platform(OCP)",id:"step-1-login-to-red-hat-openshift-container-platformocp",children:[]},{value:"Step 2. Verify the status of nodes",id:"step-2-verify-the-status-of-nodes",children:[]},{value:"Step 3. Create a New Project",id:"step-3-create-a-new-project",children:[]},{value:"Step 4. Clone the Redis Enterprise on Kubernetes Github repository",id:"step-4-clone-the-redis-enterprise-on-kubernetes-github-repository",children:[]},{value:"Step 5. Apply the SCC configuration",id:"step-5-apply-the-scc-configuration",children:[]},{value:"Step 6. Provide the operator permissions for Redis Enterprise Operator and Cluster pods",id:"step-6-provide-the-operator-permissions-for-redis-enterprise-operator-and-cluster-pods",children:[]},{value:"Step 7. Deploy Redis Enterprise Operator",id:"step-7-deploy-redis-enterprise-operator",children:[]},{value:"Step 8. Install Redis Enterprise Operator",id:"step-8-install-redis-enterprise-operator",children:[]},{value:"Step 9. Prerequisites to access Redis Enterprise Cluster Admin Console",id:"step-9-prerequisites-to-access-redis-enterprise-cluster-admin-console",children:[]},{value:"Step 10. Access the Redis Enterprise Cluster Amdin Console",id:"step-10-access-the-redis-enterprise-cluster-amdin-console",children:[]},{value:"Step 11. Create Redis Enterprise Database",id:"step-11-create-redis-enterprise-database",children:[]},{value:"References:",id:"references",children:[]}],l={toc:c};function p(e){var t=e.components,i=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,i,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Deploying and managing containerised applications is not easy. With the rise of microservice architecture, it becomes cumbersome to deploy containers across multiple environments. Given that containers can be spun up in seconds and that too in a higher volume compared to VMs, managing across multiple platforms can be extremely challenging. OpenShift (kubernetes) comes to the rescue. Kubernetes is designed and built from the ground up to deploy and manage containerized applications across hundreds of compute nodes. Red Hat OpenShift is a leading enterprise kubernetes platform that enables a cloud-like experience everywhere it\u2019s deployed, no matter if it\u2019s in the cloud, on-premise or at the edge."),Object(a.b)("h3",{id:"what-is-openshift"},"What is OpenShift?"),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.redhat.com/en/technologies/cloud-computing/openshift"}),"Red Hat OpenShift")," gives you the ability to choose where you build, deploy, and run applications through a consistent experience. Red Hat OpenShift\u2019s full-stack automated operations and self-service provisioning for developers lets teams work together more efficiently to move ideas from development to production. "),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.redhat.com/en/technologies/cloud-computing/openshift/developers"}),"Red Hat OpenShift focused on developer experience")," and application security that's platform agnostic. OpenShift helps you develop and deploy applications to one or more hosts. These can be public facing web applications, or backend applications, including micro services or databases. Applications can be implemented in any programming language you choose. The only requirement is that the application can run within a container.  "),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.redhat.com/en/technologies/cloud-computing/openshift/container-platform"}),"OpenShift Container Platform(OCP)")," is a set of modular components and services built on top of Red Hat Enterprise Linux, and Kubernetes. OpenShift adds capabilities such as remote management, multitenancy, increased security, application life-cycle management and self-service interfaces for developers."),Object(a.b)("p",null,"Red Hat OpenShift is built on Kubernetes and extends the open source platform in several ways to make it suitable for enterprise operations teams: "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Automated installation and operations for platform updates on the container host, the Kubernetes cluster, and application services"),Object(a.b)("li",{parentName:"ul"},"A consistent Kubernetes platform portable across different infrastructures and clouds "),Object(a.b)("li",{parentName:"ul"},"Built-in cluster and application monitoring using Prometheus and Grafana dashboards "),Object(a.b)("li",{parentName:"ul"},"Centralized policy management and enforcement across clusters "),Object(a.b)("li",{parentName:"ul"},"Built-in security checks for the entire container stack throughout the application life cycle ")),Object(a.b)("h3",{id:"supported-technologies"},"Supported Technologies"),Object(a.b)("p",null,"OpenShift is fully pluggable and works with a wide range of technologies some of them are Languages Runtimes like .NET, Java, Node.js, PHP, Python, Ruby, GoLang and Perl. Databases such as MariaDB, MongoDB, MySQL, PostgreSQL, and Redis. Red Hat and IBM Application Services which includes application runtimes, agile integration, business process automation technologies and other enterprise software solutions are available as containers which are managed by Operators in OpenShift. Also, OpenShift is certified with and supports 100+ independent software vendors including Redis Enterprise. "),Object(a.b)("h3",{id:"what-is-operatorhub"},"What is OperatorHub?"),Object(a.b)("p",null,"OperatorHub is the web console interface in OpenShift Container Platform that cluster administrators use to discover, install and manage Operators. In a few clicks, users can subscribe to the software they like via operators and make it available to software developers and platform administrators across cluster or isolated namespace environments using Operator Lifecycle Manager (OLM)."),Object(a.b)("p",null,"In this tutorial, you will learn how to deploy Redis Enterprise Cluster and Database on OpenShift using Redis Enterprise Kubernetes Operator."),Object(a.b)("h3",{id:"pre-requisites"},"Pre-requisites:"),Object(a.b)("p",null,"To follow this guide, you should have an OpenShift cluster with 3 or more worker nodes. There are multiple ways to provision an OpenShift cluster, ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.openshift.com/container-platform/4.9/installing/index.html"}),"you can follow the installation guide")," based on your preferred infrastructure or cloud provider. Redis Enterprise Operator currently supports OpenShift 3.11 and OpenShift 4.x. ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.redis.com/latest/kubernetes/reference/supported_k8s_distributions/"}),"Visit this page")," to find all the supported Kubernetes distributions. "),Object(a.b)("p",null,"In this guide we are using a self-managed OpenShift  Cluster on Google Cloud Platform."),Object(a.b)("h3",{id:"step-1-login-to-red-hat-openshift-container-platformocp"},"Step 1. Login to Red Hat Openshift Container Platform(OCP)"),Object(a.b)("p",null,"You can login to OCP via CLI and user with cluster-admin role."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$ oc login\nAuthentication required for https://api.sumit.openshift.demo.redislabs.com:6443 (openshift)\nUsername: \nPassword: \nLogin successful.\n")),Object(a.b)("p",null,"You have access to 68 projects, the list has been suppressed. You can list all projects with 'oc projects'."),Object(a.b)("h3",{id:"step-2-verify-the-status-of-nodes"},"Step 2. Verify the status of nodes"),Object(a.b)("p",null,"All the nodes should be in \u201cReady\u201d status. "),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$ oc get nodes\nNAME                                 STATUS   ROLES          AGE    VERSION\ndemoopenshift-9x5xq-infra-b-h28tc    Ready    infra,worker   86m    v1.22.3+e790d7f\ndemoopenshift-9x5xq-infra-b-wrfgg    Ready    infra,worker   85m    v1.22.3+e790d7f\ndemoopenshift-9x5xq-master-0         Ready    master         103m   v1.22.3+e790d7f\ndemoopenshift-9x5xq-master-1         Ready    master         103m   v1.22.3+e790d7f\ndemoopenshift-9x5xq-master-2         Ready    master         103m   v1.22.3+e790d7f\ndemoopenshift-9x5xq-worker-b-6jwx2   Ready    worker         97m    v1.22.3+e790d7f\ndemoopenshift-9x5xq-worker-b-9pxhd   Ready    worker         95m    v1.22.3+e790d7f\n")),Object(a.b)("h3",{id:"step-3-create-a-new-project"},"Step 3. Create a New Project"),Object(a.b)("p",null,"Redis Enterprise can only be deployed in an user\u2019s custom project. Hence, let us create a new project."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'$ oc new-project myproject \nNow using project "myproject" on server "https://api.sumit.openshift.demo.redislabs.com:6443".\n\nYou can add applications to this project with the \'new-app\' command. For example, try:\n\n    oc new-app ruby~https://github.com/sclorg/ruby-ex.git\n\nto build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n')),Object(a.b)("h3",{id:"step-4-clone-the-redis-enterprise-on-kubernetes-github-repository"},"Step 4. Clone the Redis Enterprise on Kubernetes Github repository"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$ git clone https://github.com/RedisLabs/redis-enterprise-k8s-docs\n$ cd redis-enteprise-k8s-docs/\n")),Object(a.b)("h3",{id:"step-5-apply-the-scc-configuration"},"Step 5. Apply the SCC configuration"),Object(a.b)("p",null,"The scc ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.openshift.com/container-platform/4.8/authentication/managing-security-context-constraints.html"}),"(Security Context Constraint)")," yaml defines security context constraints for the cluster for our project. This is composed of custom security settings and strategies that will provide access to the Redis Enterprise Operator and Cluster Pods to run on OpenShift.  We strongly recommend that you not change anything in this yaml file."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"kind: SecurityContextConstraints\napiVersion: security.openshift.io/v1\nmetadata:\n  name: redis-enterprise-scc\nallowPrivilegedContainer: false\nallowedCapabilities:\n  - SYS_RESOURCE\nrunAsUser:\n  type: MustRunAs\n  uid: 1001\nFSGroup:\n  type: MustRunAs\n  ranges: 1001,1001\nseLinuxContext:\n  type: RunAsAny\n")),Object(a.b)("p",null,"Apply the configuration to a resource by filename \u201cscc.yaml\u201d which is available in \u201copenshift\u201d folder as shown below:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{})," $  oc apply -f scc.yaml          \n securitycontextconstraints.security.openshift.io/redis-enterprise-scc configured\n")),Object(a.b)("h3",{id:"step-6-provide-the-operator-permissions-for-redis-enterprise-operator-and-cluster-pods"},"Step 6. Provide the operator permissions for Redis Enterprise Operator and Cluster pods"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{})," $ oc adm policy add-scc-to-user redis-enterprise-scc system:serviceaccount:myproject:redis-enterprise-operator\n $ oc adm policy add-scc-to-user redis-enterprise-scc system:serviceaccount:myproject:rec\n")),Object(a.b)("h3",{id:"step-7-deploy-redis-enterprise-operator"},"Step 7. Deploy Redis Enterprise Operator"),Object(a.b)("p",null,"If you want to perform this operation via UI, follow the below steps:"),Object(a.b)("p",null,"Login to OpenShift console with admin privileges."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1129).default})),Object(a.b)("p",null,"Click on \u201cOperatorHub\u201d under Operators section."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1130).default})),Object(a.b)("p",null,"This will open up a list of operators with various categories. Search for \u201cRedis\u201d and click \u201cRedis Enterprise\u201d without \u201cMarketplace\u201d tag to proceed further."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1131).default})),Object(a.b)("h3",{id:"step-8-install-redis-enterprise-operator"},"Step 8. Install Redis Enterprise Operator"),Object(a.b)("p",null,"Click \u201cInstall\u201d to start the installation process and then select the required channel, namespace and approval strategy in the next screen."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1132).default})),Object(a.b)("p",null,"Wait till the installation gets completed."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1133).default})),Object(a.b)("p",null,"Click on \u201cEvents\u201d to see the streaming events to troubleshoot or check the progress of installation."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1134).default})),Object(a.b)("p",null,"Once Redis Enterprise Operator is installed, we will create a Redis Enterprise Cluster instance using RedisEnterpriseCluster (REC) custom resource definition."),Object(a.b)("p",null,"RedisEnterpriseCluster is the Schema for the redisenterpriseclusters API. From the installed Redis EnterpriseOperator, Click on \u201cCreate Redis Enterprise Cluster'' and click on \u201cYAML\u201d section and paste below sample yaml file:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1135).default})),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"apiVersion: app.redislabs.com/v1\nkind: RedisEnterpriseCluster\nmetadata:\n  name: rec\n  namespace: myproject\nspec:\n  redisEnterpriseNodeResources:\n    limits:\n      cpu: 4000m\n      memory: 4Gi\n    requests:\n      cpu: 4000m\n      memory: 4Gi\n  persistentSpec:\n    enabled: true\n    storageClassName: standard\n  redisEnterpriseImageSpec:\n    imagePullPolicy: IfNotPresent\n    repository: redislabs/redis\n    versionTag: 6.2.8-64.rhel7-openshift\n  servicesRiggerSpec:\n    databaseServiceType: load_balancer\n    serviceNaming: redis-port\n  nodes: 3\n  uiServiceType: LoadBalancer\n  username: demo@redis.com\n")),Object(a.b)("p",null,"For configuring any additional parameters for the Redis Enterprise Cluster custom resource definition, visit this page."),Object(a.b)("p",null,"Wait till the status shows \u201cSucceeded\u201d under Redis Enterprise Operator. "),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1136).default})),Object(a.b)("h3",{id:"step-9-prerequisites-to-access-redis-enterprise-cluster-admin-console"},"Step 9. Prerequisites to access Redis Enterprise Cluster Admin Console"),Object(a.b)("p",null,"To access the Redis Enterprise Cluster admin console, you will need credentials. Follow the below steps to get the credentials via \u201crec\u201d secret resource:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1137).default})),Object(a.b)("p",null,"Under the \u201cData\u201d section, you can reveal username and password."),Object(a.b)("p",null,"Next, Click on \u201cServices\u201d and choose \u201crec-ui\u201d under the services list:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1138).default})),Object(a.b)("p",null,"Click on \u201cServices\u201d and look out for External Load-balancer IP."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1139).default})),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1140).default})),Object(a.b)("h3",{id:"step-10-access-the-redis-enterprise-cluster-amdin-console"},"Step 10. Access the Redis Enterprise Cluster Amdin Console"),Object(a.b)("p",null,"From web browser access the rec-ui external IP http://IP:8443 to access  the Redis Enterprise Cluster Admin Console."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1141).default})),Object(a.b)("p",null,"To login into Redis Enterprise Cluster, use the credentials what we have extracted above.\nBy now, you will be able to see 3 nodes of the Redis Enterprise cluster."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1142).default})),Object(a.b)("h3",{id:"step-11-create-redis-enterprise-database"},"Step 11. Create Redis Enterprise Database"),Object(a.b)("p",null,"RedisEnterpriseDatabase is the Schema for the redisenterprisedatabases API. To create REDB, navigate to Installed Operator > Redis Enterprise Operator > Redis Enterprise Database > Click \u201cCreate RedisEnterpriseDatabase\u201d to start the creation process using REDB custom resource. You can click on \u201cYAML\u201d and paste below sample yaml file."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"apiVersion: app.redislabs.com/v1alpha1\nkind: RedisEnterpriseDatabase\nmetadata:\n  name: redb\n  namespace: myproject\nspec:\n  redisEnterpriseCluster:\n    name: rec\n  memorySize: 1GB\n  tlsMode: enabled\n")),Object(a.b)("p",null,"For configuring any additional parameters for the Redis Enterprise Database custom resource, visit this page.\nOnce the REDB creation is done, you should see the status as \u201cactive\u201d. "),Object(a.b)("p",null,Object(a.b)("img",{alt:"Image",src:n(1143).default})),Object(a.b)("p",null,"Finally, navigate to Redis Enterprise Cluster admin console to verify Redis Enterprise database. "),Object(a.b)("p",null,Object(a.b)("img",{alt:"Image",src:n(1144).default})),Object(a.b)("p",null,"Click on the newly created database and then click on configuration option to see the overall details: "),Object(a.b)("p",null,Object(a.b)("img",{alt:"Image",src:n(1145).default})),Object(a.b)("p",null,"Navigate back to the OpenShift console and verify the service object created for the Redis Database."),Object(a.b)("p",null,Object(a.b)("img",{alt:"Image",src:n(1146).default})),Object(a.b)("p",null,"Select \u201cRoutes\u201d from left panel and create a new route object for this database service with below sample yaml file:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"kind: Route\napiVersion: route.openshift.io/v1\nmetadata:\n name: redb\n labels:\n   app: redis-enterprise\n   redis.io/cluster: rec    \nspec:\n host: redb-re-test.apps.sumit.openshift.demo.redislabs.com\n to:\n   kind: Service\n   name: redis-12119-load-balancer\n   weight: 100\n port:\n   targetPort: redis\n tls:\n   termination: passthrough\n   insecureEdgeTerminationPolicy: None\n")),Object(a.b)("p",null,"Note the Host name 'my-db-hostname' from the created route object."),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1147).default})),Object(a.b)("p",null,'Note the database password "my-db-password" from the database secret object with name \u201cdb-name-redb\u201d.'),Object(a.b)("p",null,Object(a.b)("img",{alt:"image",src:n(1148).default})),Object(a.b)("p",null,"Get the default CA certificate from the redis-enterprise-node container on any of the Redis Enterprise pods and paste the output in a file called \u201cproxy_cert.pem\u201d."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$ oc exec -it <pod-name> -c redis-enterprise-node -- cat \\ /etc/opt/redislabs/proxy_cert.pem \n")),Object(a.b)("p",null,"Run the following openssl command, substituting your own values for 'my-db-hostname'."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$  openssl s_client -connect <my-db-hostname>:443 -crlf \\\n -CAfile ./proxy_cert.pem -servername <my-db-hostname>  \n")),Object(a.b)("p",null,"Authorize the database with the password and enter the ping command. If you are connected to the database, you will receive PONG back, as shown below:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"...\n... \n...\n    Verify return code: 0 (ok)\n ---\n auth 'my-db-password'\n +OK \n \n PING \n +PONG  \n")),Object(a.b)("p",null,"You can use the code below to test your access with Python, substituting your own values for 'my-db-hostname' and 'file-path'."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{})," import redis\n try:\n    r = redis.StrictRedis(    \n    host='my-db-hostname',\n    port=443,\n    password='my-db-password',\n    ssl=True,\n    ssl_ca_certs='file-path')\n    print (r.info())\n #test the connection\n    print('Testing redis by setting a key and value..')\n    r.set('hello', 'world')\n    value = r.get('hello')\n    print(value)\n except Exception as e:\n    print (e) \n")),Object(a.b)("p",null,"Your output should look something like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"{'redis_version': '6.0.13', 'redis_git_sha1': 0, 'redis_git_dirty': 0, 'redis_build_id': 0, 'redis_mode': 'standalone', 'os': 'Linux 4.18.0-305.30.1.el8_4.x86_64 x86_64'\n...\n...\n...\n\nTesting redis by setting a key and value..\nb'world'\n \n")),Object(a.b)("p",null,"In our next tutorial, we will learn how to deploy a sample Real-time chat application powered by Go and Redis on OpenShift Container Platform."),Object(a.b)("h3",{id:"references"},"References:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.redis.com/latest/kubernetes/deployment/openshift/"}),"Deploy Redis Enterprise Software on Kubernetes with OpenShift")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.openshift.com/"}),"Official OpenShift Documentation")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.openshift.com/container-platform/4.7/installing/installing_gcp/installing-gcp-default.html"}),"Install a Cluster quickly on GCP")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/RedisLabs/redis-enterprise-k8s-docs"}),"Redis Enterprise on Kubernetes Github Repository"))))}p.isMDXComponent=!0},327:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),p=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},b=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||a;return n?s.a.createElement(m,o(o({ref:t},l),{},{components:n})):s.a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);